<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Baduncle Blog</title>
  
  <subtitle>vibe coding</subtitle>
  <link href="https://blog.baduncle.top/atom.xml" rel="self"/>
  
  <link href="https://blog.baduncle.top/"/>
  <updated>2025-08-07T16:37:58.485Z</updated>
  <id>https://blog.baduncle.top/</id>
  
  <author>
    <name>Baduncle</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TypeScript Full-Stack Engineering 8-Month Comprehensive Learning Plan</title>
    <link href="https://blog.baduncle.top/2025/08/07/eight-month-plan-for-typescript-ecosystem/"/>
    <id>https://blog.baduncle.top/2025/08/07/eight-month-plan-for-typescript-ecosystem/</id>
    <published>2025-08-07T15:35:58.000Z</published>
    <updated>2025-08-07T16:37:58.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Phase-1-TypeScript-Mastery-JavaScript-Runtime-Foundation-Month-1"><a href="#Phase-1-TypeScript-Mastery-JavaScript-Runtime-Foundation-Month-1" class="headerlink" title="Phase 1: TypeScript Mastery &amp; JavaScript Runtime Foundation (Month 1)"></a>Phase 1: TypeScript Mastery &amp; JavaScript Runtime Foundation (Month 1)</h2><p><strong>Goal:</strong> Master TypeScript’s type system and JavaScript’s asynchronous runtime model, establishing a solid foundation for full-stack development. This phase bridges your Java background to the TypeScript&#x2F;JavaScript ecosystem.</p><span id="more"></span><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li><a href="#Phase-1-TypeScript-Mastery-JavaScript-Runtime-Foundation-Month-1">Phase 1: TypeScript Mastery-JavaScript Runtime Foundation (Month 1)</a><ul><li><a href="#Week-1-2-TypeScript-Type-System-Deep-Dive">Week 1-2: TypeScript Type System Deep Dive</a></li><li><a href="#Week-3-4-JavaScript-Runtime-Asynchronous-Programming">Week 3-4: JavaScript Runtime-Asynchronous Programming</a></li></ul></li><li><a href="#Phase-2-React-19-Mastery-Modern-Frontend-Architecture-Month-2">Phase 2: React 19 Mastery-Modern Frontend Architecture (Month 2)</a><ul><li><a href="#Week-1-2-React-Fundamentals-Component-Architecture">Week 1-2: React Fundamentals-Component Architecture</a></li><li><a href="#Week-3-4-React-19-Advanced-Features-Performance">Week 3-4: React 19 Advanced Features-Performance</a></li></ul></li><li><a href="#Phase-3-UI-Engineering-Design-Systems-Month-3">Phase 3: UI Engineering-Design Systems (Month 3)</a><ul><li><a href="#Week-1-2-CSS-Mastery-Tailwind-CSS">Week 1-2: CSS Mastery-Tailwind CSS</a></li><li><a href="#Week-3-4-Component-Libraries-Design-Systems">Week 3-4: Component Libraries-Design Systems</a></li></ul></li><li><a href="#Phase-4-Full-Stack-Architecture-with-TanStack-Ecosystem-Month-4">Phase 4: Full-Stack Architecture with TanStack Ecosystem (Month 4)</a><ul><li><a href="#Week-1-2-TanStack-Router-File-Based-Routing">Week 1-2: TanStack Router-File-Based Routing</a></li><li><a href="#Week-3-4-TanStack-Query-Data-Synchronization">Week 3-4: TanStack Query-Data Synchronization</a></li></ul></li><li><a href="#Phase-5-Backend-Mastery-with-tRPC-Database-Month-5">Phase 5: Backend Mastery with tRPC-Database (Month 5)</a><ul><li><a href="#Week-1-2-tRPC-Type-Safe-APIs">Week 1-2: tRPC-Type-Safe APIs</a></li><li><a href="#Week-3-4-Database-Design-Drizzle-ORM">Week 3-4: Database Design-Drizzle ORM</a></li></ul></li><li><a href="#Phase-6-Authentication-Payments-Production-Features-Month-6">Phase 6: Authentication, Payments-Production Features (Month 6)</a><ul><li><a href="#Week-1-2-Authentication-Authorization">Week 1-2: Authentication-Authorization</a></li><li><a href="#Week-3-4-Stripe-Integration-Monetization">Week 3-4: Stripe Integration-Monetization</a></li></ul></li><li><a href="#Phase-7-Monorepo-Architecture-DevOps-Month-7">Phase 7: Monorepo Architecture-DevOps (Month 7)</a><ul><li><a href="#Week-1-2-Monorepo-with-pnpm-Workspaces">Week 1-2: Monorepo with pnpm Workspaces</a></li><li><a href="#Week-3-4-Deployment-Monitoring">Week 3-4: Deployment-Monitoring</a></li></ul></li><li><a href="#Phase-8-React-Native-Capstone-Project-Month-8">Phase 8: React Native-Capstone Project (Month 8)</a><ul><li><a href="#Week-1-2-React-Native-Development">Week 1-2: React Native Development</a></li><li><a href="#Week-3-4-Capstone-Project-Completion">Week 3-4: Capstone Project Completion</a></li></ul></li><li><a href="#Daily-Schedule-8-hours">Daily Schedule (8 hours)</a></li><li><a href="#Success-Metrics-Milestones">Success Metrics-Milestones</a></li><li><a href="#Learning-Resources-Summary">Learning Resources Summary</a><ul><li><a href="#Essential-Books">Essential Books</a></li><li><a href="#Key-YouTube-Channels">Key YouTube Channels</a></li><li><a href="#Online-Courses">Online Courses</a></li></ul></li></ul><h3 id="Week-1-2-TypeScript-Type-System-Deep-Dive"><a href="#Week-1-2-TypeScript-Type-System-Deep-Dive" class="headerlink" title="Week 1-2: TypeScript Type System Deep Dive"></a>Week 1-2: TypeScript Type System Deep Dive</h3><p><strong>Learning Checklist:</strong></p><ul><li><input disabled="" type="checkbox"> <strong>Structural vs Nominal Typing:</strong> Understand TypeScript’s structural type system vs Java’s nominal typing. Read <a href="https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes-oop.html">TypeScript for Java&#x2F;C# Programmers</a> to grasp this fundamental difference</li><li><input disabled="" type="checkbox"> <strong>Advanced Type Features:</strong><ul><li>Union and Intersection types (<code>string | number</code>, <code>A &amp; B</code>)</li><li>Type guards and narrowing (<code>typeof</code>, <code>instanceof</code>, custom type predicates)</li><li>Generics with constraints (<code>&lt;T extends BaseType&gt;</code>)</li><li>Conditional types (<code>T extends U ? X : Y</code>)</li><li>Mapped types and template literal types</li><li>Utility types (<code>Partial</code>, <code>Required</code>, <code>Pick</code>, <code>Omit</code>, <code>Record</code>)</li></ul></li><li><input disabled="" type="checkbox"> <strong>Type Inference &amp; Control Flow Analysis:</strong> Learn how TypeScript infers types and how control flow affects type narrowing</li><li><input disabled="" type="checkbox"> <strong>Module Systems:</strong> Master ES modules vs CommonJS, understanding <code>import</code>&#x2F;<code>export</code> patterns and their TypeScript configurations</li><li><input disabled="" type="checkbox"> <strong>Configuration Mastery:</strong> Deep dive into <code>tsconfig.json</code> options, understanding <code>strict</code> mode flags, module resolution strategies, and compilation targets</li></ul><p><strong>Resources:</strong></p><ul><li><a href="https://www.typescriptlang.org/docs/handbook/intro.html">TypeScript Handbook</a> - Complete Chapters 1-6 (15 hours)</li><li><a href="https://github.com/type-challenges/type-challenges">Type Challenges</a> - Complete 20 easy challenges (5 hours)</li><li>Matt Pocock’s <a href="https://www.totaltypescript.com/">TypeScript Tips Newsletter</a> and free workshops (8 hours)</li><li><strong>Book:</strong> “Effective TypeScript” by Dan Vanderkam - Read Items 1-30 (Chapters 1-3)</li></ul><p><strong>Practice Project:</strong> Build a type-safe CLI task manager with:</p><ul><li>Custom type definitions for tasks, priorities, and statuses</li><li>Generic repository pattern for data operations</li><li>Advanced type constraints for command parsing</li><li>Publish to npm with proper type declarations</li></ul><h3 id="Week-3-4-JavaScript-Runtime-Asynchronous-Programming"><a href="#Week-3-4-JavaScript-Runtime-Asynchronous-Programming" class="headerlink" title="Week 3-4: JavaScript Runtime &amp; Asynchronous Programming"></a>Week 3-4: JavaScript Runtime &amp; Asynchronous Programming</h3><p><strong>Learning Checklist:</strong></p><ul><li><input disabled="" type="checkbox"> <strong>Event Loop Mastery:</strong> Understand microtasks vs macrotasks, call stack, callback queue</li><li><input disabled="" type="checkbox"> <strong>Promises Deep Dive:</strong><ul><li>Promise construction and chaining</li><li>Error handling patterns</li><li><code>Promise.all</code>, <code>Promise.race</code>, <code>Promise.allSettled</code></li><li>Converting callbacks to promises</li></ul></li><li><input disabled="" type="checkbox"> <strong>Async&#x2F;Await Patterns:</strong><ul><li>Error handling with try&#x2F;catch</li><li>Concurrent execution patterns</li><li>AsyncIterators and for-await-of loops</li></ul></li><li><input disabled="" type="checkbox"> <strong>Prototype Chain &amp; <code>this</code> Binding:</strong> Understand JavaScript’s object model, crucial for React class components and event handlers</li><li><input disabled="" type="checkbox"> <strong>Closures &amp; Scope:</strong> Master lexical scoping, crucial for React hooks and state management</li><li><input disabled="" type="checkbox"> <strong>Node.js Fundamentals:</strong><ul><li>Event-driven architecture</li><li>Streams and buffers</li><li>File system operations</li><li>Process management and environment variables</li></ul></li></ul><p><strong>Resources:</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide">MDN JavaScript Guide</a> - Focus on async sections (10 hours)</li><li><a href="https://nodejs.org/en/learn">Node.js Official Learn Path</a> - Complete getting started guide (8 hours)</li><li>Philip Roberts’ <a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">“What the heck is the event loop?”</a> talk (1 hour)</li><li><strong>Book:</strong> “You Don’t Know JS” series - Read “Async &amp; Performance” chapters 1-3</li><li>Wes Bos’s <a href="https://wesbos.com/learn-node">Node.js course</a> - First 5 modules (10 hours)</li></ul><p><strong>Deliverable:</strong></p><ul><li><strong>Blog Series (3 articles):</strong> “From Java to JavaScript” covering:<ol><li>“Understanding JavaScript’s Event Loop vs Java’s Thread Model”</li><li>“Promise Patterns: JavaScript’s Alternative to CompletableFuture”</li><li>“TypeScript Generics vs Java Generics: A Practical Comparison”</li></ol></li><li><strong>Code Project:</strong> REST API server using Node.js with TypeScript, implementing:<ul><li>Custom middleware for request logging</li><li>Async error handling middleware</li><li>Stream-based file uploads</li><li>Rate limiting using promises</li></ul></li></ul><h2 id="Phase-2-React-19-Mastery-Modern-Frontend-Architecture-Month-2"><a href="#Phase-2-React-19-Mastery-Modern-Frontend-Architecture-Month-2" class="headerlink" title="Phase 2: React 19 Mastery &amp; Modern Frontend Architecture (Month 2)"></a>Phase 2: React 19 Mastery &amp; Modern Frontend Architecture (Month 2)</h2><p><strong>Goal:</strong> Master React 19’s new features and component patterns, understanding the mental model shift from object-oriented to functional-reactive programming.</p><h3 id="Week-1-2-React-Fundamentals-Component-Architecture"><a href="#Week-1-2-React-Fundamentals-Component-Architecture" class="headerlink" title="Week 1-2: React Fundamentals &amp; Component Architecture"></a>Week 1-2: React Fundamentals &amp; Component Architecture</h3><p><strong>Learning Checklist:</strong></p><ul><li><input disabled="" type="checkbox"> <strong>Component Mental Model:</strong><ul><li>Components as functions of state</li><li>Unidirectional data flow</li><li>Composition over inheritance</li><li>Thinking in React: breaking UI into component hierarchy</li></ul></li><li><input disabled="" type="checkbox"> <strong>JSX Deep Dive:</strong><ul><li>JSX transformation process</li><li>Fragments and keys</li><li>Conditional rendering patterns</li><li>List rendering optimization</li></ul></li><li><input disabled="" type="checkbox"> <strong>State Management Fundamentals:</strong><ul><li><code>useState</code> hook patterns</li><li>State immutability principles</li><li>Lifting state up</li><li>Derived state vs stored state</li></ul></li><li><input disabled="" type="checkbox"> <strong>Effect System:</strong><ul><li><code>useEffect</code> lifecycle and dependencies</li><li>Cleanup functions</li><li>Common pitfalls and solutions</li><li>Effect vs event handlers</li></ul></li><li><input disabled="" type="checkbox"> <strong>TypeScript in React:</strong><ul><li>Component prop types with interfaces</li><li>Generic components</li><li>Event handler types</li><li>Children and render prop patterns</li></ul></li></ul><p><strong>Resources:</strong></p><ul><li><a href="https://react.dev/">React 19 Documentation</a> - Complete “Learn React” section (20 hours)</li><li><a href="https://react.dev/blog/2024/12/05/react-19">React 19 Release Blog</a> - Understand new features (2 hours)</li><li>Kent C. Dodds’ <a href="https://epicreact.dev/">Epic React</a> - Fundamentals workshop (15 hours)</li><li><strong>Book:</strong> “Learning React” by Eve Porcello - Chapters 3-6 on hooks and state</li></ul><p><strong>Practice Projects:</strong></p><ol><li><strong>Interactive Dashboard:</strong> Build a weather dashboard with:</li></ol><ul><li>Multiple widget components</li><li>Real-time data updates</li><li>Local state management</li><li>Error boundaries</li></ul><ol start="2"><li><strong>Form Builder:</strong> Create a dynamic form generator with:</li></ol><ul><li>Controlled components</li><li>Custom validation</li><li>Field dependencies</li><li>TypeScript type safety</li></ul><h3 id="Week-3-4-React-19-Advanced-Features-Performance"><a href="#Week-3-4-React-19-Advanced-Features-Performance" class="headerlink" title="Week 3-4: React 19 Advanced Features &amp; Performance"></a>Week 3-4: React 19 Advanced Features &amp; Performance</h3><p><strong>Learning Checklist:</strong></p><ul><li><input disabled="" type="checkbox"> <strong>React 19 New Features:</strong><ul><li>Actions and <code>useActionState</code></li><li><code>useOptimistic</code> for optimistic UI</li><li><code>use</code> hook for resources</li><li>Document metadata management</li><li>Improved hydration and error reporting</li></ul></li><li><input disabled="" type="checkbox"> <strong>Server Components (RSC):</strong><ul><li>Client vs Server component boundaries</li><li>Data fetching patterns</li><li>Streaming and suspense</li></ul></li><li><input disabled="" type="checkbox"> <strong>Advanced Hooks:</strong><ul><li><code>useReducer</code> for complex state</li><li><code>useContext</code> and provider patterns</li><li><code>useMemo</code> and <code>useCallback</code> optimization</li><li>Custom hooks creation</li></ul></li><li><input disabled="" type="checkbox"> <strong>Performance Optimization:</strong><ul><li>React DevTools Profiler</li><li>Code splitting with lazy&#x2F;Suspense</li><li>Memo and PureComponent patterns</li><li>Virtual list rendering</li></ul></li></ul><p><strong>Resources:</strong></p><ul><li>Jack Herrington’s <a href="https://www.youtube.com/@jherr">YouTube channel</a> - React 19 deep dives (10 hours)</li><li>Theo’s <a href="https://www.youtube.com/@t3dotgg">t3.gg YouTube</a> - React Server Components explained (5 hours)</li><li><a href="https://conf.react.dev/">React Conf 2024 talks</a> on React 19 features (8 hours)</li><li>Josh Comeau’s <a href="https://www.joyofreact.com/">React course</a> - Performance sections</li></ul><p><strong>Deliverable:</strong></p><ul><li><strong>Portfolio Website 2.0:</strong> Rebuilt with React 19 featuring:<ul><li>Server components for static content</li><li>Client components for interactions</li><li>Optimistic UI for contact form</li><li>Progressive enhancement</li><li>SEO optimization with metadata API</li></ul></li><li><strong>Technical Blog Post:</strong> “React 19 Server Components: A Java Developer’s Perspective”</li></ul><h2 id="Phase-3-UI-Engineering-Design-Systems-Month-3"><a href="#Phase-3-UI-Engineering-Design-Systems-Month-3" class="headerlink" title="Phase 3: UI Engineering &amp; Design Systems (Month 3)"></a>Phase 3: UI Engineering &amp; Design Systems (Month 3)</h2><p><strong>Goal:</strong> Master modern CSS, component libraries, and build a professional design system using Tailwind CSS and shadcn&#x2F;ui.</p><h3 id="Week-1-2-CSS-Mastery-Tailwind-CSS"><a href="#Week-1-2-CSS-Mastery-Tailwind-CSS" class="headerlink" title="Week 1-2: CSS Mastery &amp; Tailwind CSS"></a>Week 1-2: CSS Mastery &amp; Tailwind CSS</h3><p><strong>Learning Checklist:</strong></p><ul><li><input disabled="" type="checkbox"> <strong>Modern CSS Fundamentals:</strong><ul><li>Flexbox complete guide</li><li>CSS Grid for layouts</li><li>CSS custom properties (variables)</li><li>Container queries</li><li>CSS animations and transitions</li></ul></li><li><input disabled="" type="checkbox"> <strong>Tailwind CSS Philosophy:</strong><ul><li>Utility-first methodology</li><li>Composition patterns</li><li>Responsive design with breakpoints</li><li>Dark mode implementation</li><li>Custom configuration and themes</li></ul></li><li><input disabled="" type="checkbox"> <strong>Advanced Tailwind Patterns:</strong><ul><li>Component extraction</li><li>Plugin development</li><li>JIT mode optimization</li><li>Arbitrary values and modifiers</li></ul></li></ul><p><strong>Resources:</strong></p><ul><li><a href="https://tailwindcss.com/docs">Tailwind CSS Documentation</a> - Complete fundamentals (10 hours)</li><li><a href="https://css-for-js.dev/">CSS for JS Developers</a> by Josh Comeau - Layout modules (15 hours)</li><li>Kevin Powell’s <a href="https://www.youtube.com/@KevinPowell">CSS YouTube channel</a> - Modern CSS techniques (8 hours)</li><li>Tailwind Labs <a href="https://www.youtube.com/@TailwindLabs">YouTube channel</a> - Best practices (5 hours)</li></ul><h3 id="Week-3-4-Component-Libraries-Design-Systems"><a href="#Week-3-4-Component-Libraries-Design-Systems" class="headerlink" title="Week 3-4: Component Libraries &amp; Design Systems"></a>Week 3-4: Component Libraries &amp; Design Systems</h3><p><strong>Learning Checklist:</strong></p><ul><li><input disabled="" type="checkbox"> <strong>shadcn&#x2F;ui Architecture:</strong><ul><li>Component installation and customization</li><li>Radix UI primitives understanding</li><li>Theming with CSS variables</li><li>Accessibility built-in features</li><li>Component composition patterns</li></ul></li><li><input disabled="" type="checkbox"> <strong>Design System Principles:</strong><ul><li>Design tokens</li><li>Component variants</li><li>Compound components</li><li>Controlled vs uncontrolled components</li></ul></li><li><input disabled="" type="checkbox"> <strong>Advanced UI Patterns:</strong><ul><li>Modal and dialog management</li><li>Toast notifications system</li><li>Data table with sorting&#x2F;filtering</li><li>Form validation with react-hook-form</li><li>Command palette implementation</li></ul></li></ul><p><strong>Resources:</strong></p><ul><li><a href="https://ui.shadcn.com/">shadcn&#x2F;ui Documentation</a> - All components (10 hours)</li><li><a href="https://www.radix-ui.com/">Radix UI Documentation</a> - Understanding primitives (5 hours)</li><li>Build UI’s <a href="https://buildui.com/">YouTube tutorials</a> on advanced patterns (8 hours)</li><li><strong>Book:</strong> “Design Systems” by Alla Kholmatova - Chapters 1-4</li></ul><p><strong>Deliverable:</strong></p><ul><li><strong>Custom Design System:</strong> Extend shadcn&#x2F;ui with:<ul><li>10 custom components</li><li>Complete theme system (light&#x2F;dark&#x2F;custom)</li><li>Storybook documentation</li><li>Accessibility testing suite</li><li>Published as npm package</li></ul></li><li><strong>Demo Application:</strong> Task management app showcasing all components</li></ul><h2 id="Phase-4-Full-Stack-Architecture-with-TanStack-Ecosystem-Month-4"><a href="#Phase-4-Full-Stack-Architecture-with-TanStack-Ecosystem-Month-4" class="headerlink" title="Phase 4: Full-Stack Architecture with TanStack Ecosystem (Month 4)"></a>Phase 4: Full-Stack Architecture with TanStack Ecosystem (Month 4)</h2><p><strong>Goal:</strong> Master TanStack Router, Query, and Start for building production-ready full-stack applications with type-safe routing and data fetching.</p><h3 id="Week-1-2-TanStack-Router-File-Based-Routing"><a href="#Week-1-2-TanStack-Router-File-Based-Routing" class="headerlink" title="Week 1-2: TanStack Router &amp; File-Based Routing"></a>Week 1-2: TanStack Router &amp; File-Based Routing</h3><p><strong>Learning Checklist:</strong></p><ul><li><input disabled="" type="checkbox"> <strong>TanStack Router Core Concepts:</strong><ul><li>File-based routing conventions</li><li>Route loaders and actions</li><li>Search params with validation</li><li>Nested layouts</li><li>Route guards and middleware</li></ul></li><li><input disabled="" type="checkbox"> <strong>Type-Safe Navigation:</strong><ul><li>Link components with type inference</li><li>Programmatic navigation</li><li>Route parameter validation with Zod</li><li>Search param persistence</li></ul></li><li><input disabled="" type="checkbox"> <strong>Advanced Routing Patterns:</strong><ul><li>Parallel routes</li><li>Route groups</li><li>Dynamic segments</li><li>Catch-all routes</li><li>API routes integration</li></ul></li></ul><p><strong>Resources:</strong></p><ul><li><a href="https://tanstack.com/router/latest">TanStack Router Documentation</a> - Complete guide (15 hours)</li><li><a href="https://tanstack.com/start/latest">TanStack Start Documentation</a> - Framework overview (10 hours)</li><li>Tanner Linsley’s <a href="https://www.youtube.com/results?search_query=tanner+linsley+tanstack">conference talks</a> (5 hours)</li></ul><h3 id="Week-3-4-TanStack-Query-Data-Synchronization"><a href="#Week-3-4-TanStack-Query-Data-Synchronization" class="headerlink" title="Week 3-4: TanStack Query &amp; Data Synchronization"></a>Week 3-4: TanStack Query &amp; Data Synchronization</h3><p><strong>Learning Checklist:</strong></p><ul><li><input disabled="" type="checkbox"> <strong>Query Fundamentals:</strong><ul><li>Query keys and functions</li><li>Stale-while-revalidate strategy</li><li>Cache management</li><li>Background refetching</li><li>Query invalidation</li></ul></li><li><input disabled="" type="checkbox"> <strong>Mutations &amp; Optimistic Updates:</strong><ul><li>Mutation functions</li><li>Optimistic updates patterns</li><li>Error recovery</li><li>Mutation side effects</li></ul></li><li><input disabled="" type="checkbox"> <strong>Advanced Patterns:</strong><ul><li>Infinite queries</li><li>Parallel and dependent queries</li><li>Prefetching strategies</li><li>Offline support</li><li>WebSocket integration</li></ul></li></ul><p><strong>Resources:</strong></p><ul><li><a href="https://tanstack.com/query/latest">TanStack Query Documentation</a> - All sections (15 hours)</li><li>Dominik’s <a href="https://tkdodo.eu/blog/practical-react-query">TkDodo blog</a> - All articles (10 hours)</li><li>ui.dev’s <a href="https://ui.dev/react-query">React Query course</a> (12 hours)</li></ul><p><strong>Deliverable:</strong></p><ul><li><strong>Full-Stack SaaS Starter:</strong> Using TanStack Start with:<ul><li>File-based routing with type safety</li><li>Data fetching with TanStack Query</li><li>Optimistic UI for all mutations</li><li>Real-time updates via WebSocket</li><li>Search and filtering with URL state</li><li>Infinite scroll implementation</li></ul></li><li><strong>Technical Guide:</strong> “Building Type-Safe Full-Stack Apps with TanStack”</li></ul><h2 id="Phase-5-Backend-Mastery-with-tRPC-Database-Month-5"><a href="#Phase-5-Backend-Mastery-with-tRPC-Database-Month-5" class="headerlink" title="Phase 5: Backend Mastery with tRPC &amp; Database (Month 5)"></a>Phase 5: Backend Mastery with tRPC &amp; Database (Month 5)</h2><p><strong>Goal:</strong> Build production-ready backends with type-safe APIs using tRPC and modern database patterns with Drizzle ORM.</p><h3 id="Week-1-2-tRPC-Type-Safe-APIs"><a href="#Week-1-2-tRPC-Type-Safe-APIs" class="headerlink" title="Week 1-2: tRPC &amp; Type-Safe APIs"></a>Week 1-2: tRPC &amp; Type-Safe APIs</h3><p><strong>Learning Checklist:</strong></p><ul><li><input disabled="" type="checkbox"> <strong>tRPC Fundamentals:</strong><ul><li>Router definition and composition</li><li>Procedures (query, mutation, subscription)</li><li>Input validation with Zod</li><li>Context and middleware</li><li>Error handling patterns</li></ul></li><li><input disabled="" type="checkbox"> <strong>Advanced tRPC Patterns:</strong><ul><li>Batch queries optimization</li><li>WebSocket subscriptions</li><li>File uploads</li><li>Rate limiting middleware</li><li>Authentication middleware</li></ul></li><li><input disabled="" type="checkbox"> <strong>Testing tRPC APIs:</strong><ul><li>Unit testing procedures</li><li>Integration testing</li><li>Type safety testing</li><li>Mocking strategies</li></ul></li></ul><p><strong>Resources:</strong></p><ul><li><a href="https://trpc.io/docs">tRPC Documentation</a> - Complete guide (12 hours)</li><li><a href="https://github.com/trpc/examples-next-prisma-websockets">tRPC Examples Repository</a> (8 hours)</li><li>Alex&#x2F;KATT’s <a href="https://www.youtube.com/results?search_query=trpc+alex">tRPC talks</a> (3 hours)</li><li>Build a <a href="https://create.t3.gg/">T3 Stack app</a> tutorial (10 hours)</li></ul><h3 id="Week-3-4-Database-Design-Drizzle-ORM"><a href="#Week-3-4-Database-Design-Drizzle-ORM" class="headerlink" title="Week 3-4: Database Design &amp; Drizzle ORM"></a>Week 3-4: Database Design &amp; Drizzle ORM</h3><p><strong>Learning Checklist:</strong></p><ul><li><input disabled="" type="checkbox"> <strong>Drizzle ORM Mastery:</strong><ul><li>Schema definition with TypeScript</li><li>Relations and joins</li><li>Migrations management</li><li>Query builder API</li><li>Raw SQL with type safety</li></ul></li><li><input disabled="" type="checkbox"> <strong>Database Design Patterns:</strong><ul><li>Normalization principles</li><li>Indexing strategies</li><li>Transaction management</li><li>Optimistic locking</li><li>Soft deletes</li></ul></li><li><input disabled="" type="checkbox"> <strong>PostgreSQL Specific Features:</strong><ul><li>JSONB columns</li><li>Full-text search</li><li>Materialized views</li><li>Row-level security</li><li>Connection pooling</li></ul></li></ul><p><strong>Resources:</strong></p><ul><li><a href="https://orm.drizzle.team/">Drizzle ORM Documentation</a> - All sections (15 hours)</li><li><a href="https://www.postgresqltutorial.com/">PostgreSQL Tutorial</a> - Advanced topics (10 hours)</li><li>Aaron Francis’s <a href="https://aaronfrancis.com/2021/efficient-database-queries">Database course</a> (8 hours)</li><li><strong>Book:</strong> “SQL Antipatterns” by Bill Karwin - Chapters 1-10</li></ul><p><strong>Deliverable:</strong></p><ul><li><strong>Multi-Tenant SaaS Backend:</strong> Implementing:<ul><li>Complete tRPC API with 20+ procedures</li><li>Complex database schema with relations</li><li>Row-level security for multi-tenancy</li><li>Background job processing</li><li>Email notifications</li><li>Audit logging</li></ul></li><li><strong>Migration Guide:</strong> “From JPA&#x2F;Hibernate to Drizzle ORM”</li></ul><h2 id="Phase-6-Authentication-Payments-Production-Features-Month-6"><a href="#Phase-6-Authentication-Payments-Production-Features-Month-6" class="headerlink" title="Phase 6: Authentication, Payments &amp; Production Features (Month 6)"></a>Phase 6: Authentication, Payments &amp; Production Features (Month 6)</h2><p><strong>Goal:</strong> Implement enterprise-grade authentication, payment processing, and production-ready features.</p><h3 id="Week-1-2-Authentication-Authorization"><a href="#Week-1-2-Authentication-Authorization" class="headerlink" title="Week 1-2: Authentication &amp; Authorization"></a>Week 1-2: Authentication &amp; Authorization</h3><p><strong>Learning Checklist:</strong></p><ul><li><input disabled="" type="checkbox"> <strong>better-auth Implementation:</strong><ul><li>Email&#x2F;password authentication</li><li>OAuth providers (Google, GitHub, Discord)</li><li>Two-factor authentication</li><li>Email verification</li><li>Password reset flow</li></ul></li><li><input disabled="" type="checkbox"> <strong>Session Management:</strong><ul><li>JWT vs session cookies</li><li>Refresh token rotation</li><li>Session invalidation</li><li>Device management</li></ul></li><li><input disabled="" type="checkbox"> <strong>Authorization Patterns:</strong><ul><li>Role-based access control (RBAC)</li><li>Attribute-based access control (ABAC)</li><li>Resource-based permissions</li><li>API key management</li></ul></li></ul><p><strong>Resources:</strong></p><ul><li><a href="https://www.better-auth.com/">better-auth Documentation</a> - Complete guide (10 hours)</li><li><a href="https://authjs.dev/">Auth.js Documentation</a> for comparison (5 hours)</li><li>Security best practices guides (8 hours)</li></ul><h3 id="Week-3-4-Stripe-Integration-Monetization"><a href="#Week-3-4-Stripe-Integration-Monetization" class="headerlink" title="Week 3-4: Stripe Integration &amp; Monetization"></a>Week 3-4: Stripe Integration &amp; Monetization</h3><p><strong>Learning Checklist:</strong></p><ul><li><input disabled="" type="checkbox"> <strong>Stripe Fundamentals:</strong><ul><li>Customer management</li><li>Payment intents</li><li>Subscription billing</li><li>Webhook handling</li><li>Invoice management</li></ul></li><li><input disabled="" type="checkbox"> <strong>Advanced Stripe Patterns:</strong><ul><li>Metered billing</li><li>Usage-based pricing</li><li>Proration handling</li><li>Tax calculation</li><li>Refunds and disputes</li></ul></li><li><input disabled="" type="checkbox"> <strong>Production Considerations:</strong><ul><li>PCI compliance</li><li>Webhook signature verification</li><li>Idempotency keys</li><li>Error recovery</li><li>Testing with Stripe CLI</li></ul></li></ul><p><strong>Resources:</strong></p><ul><li><a href="https://stripe.com/docs">Stripe Documentation</a> - TypeScript SDK (15 hours)</li><li><a href="https://www.youtube.com/@StripeDevelopers">Stripe’s YouTube channel</a> - Integration guides (8 hours)</li><li>Build a <a href="https://www.youtube.com/watch?v=subscription-saas">SaaS with Stripe</a> course (10 hours)</li></ul><p><strong>Deliverable:</strong></p><ul><li><strong>Production SaaS Application:</strong> Including:<ul><li>Complete authentication system</li><li>Three-tier subscription plans</li><li>Usage-based billing</li><li>Admin dashboard</li><li>Customer portal</li><li>Automated invoicing</li></ul></li><li><strong>Security Audit:</strong> Document covering OWASP top 10 compliance</li></ul><h2 id="Phase-7-Monorepo-Architecture-DevOps-Month-7"><a href="#Phase-7-Monorepo-Architecture-DevOps-Month-7" class="headerlink" title="Phase 7: Monorepo Architecture &amp; DevOps (Month 7)"></a>Phase 7: Monorepo Architecture &amp; DevOps (Month 7)</h2><p><strong>Goal:</strong> Master monorepo management, CI&#x2F;CD pipelines, and deployment strategies for production applications.</p><h3 id="Week-1-2-Monorepo-with-pnpm-Workspaces"><a href="#Week-1-2-Monorepo-with-pnpm-Workspaces" class="headerlink" title="Week 1-2: Monorepo with pnpm Workspaces"></a>Week 1-2: Monorepo with pnpm Workspaces</h3><p><strong>Learning Checklist:</strong></p><ul><li><input disabled="" type="checkbox"> <strong>pnpm Workspaces Setup:</strong><ul><li>Workspace configuration</li><li>Dependency management</li><li>Script orchestration</li><li>Version management</li><li>Publishing strategies</li></ul></li><li><input disabled="" type="checkbox"> <strong>Monorepo Architecture:</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apps/</span><br><span class="line">  web/           # Main React app</span><br><span class="line">  admin/         # Admin dashboard</span><br><span class="line">  mobile/        # React Native app</span><br><span class="line">packages/</span><br><span class="line">  ui/            # Shared components</span><br><span class="line">  api/           # tRPC routers</span><br><span class="line">  db/            # Database schemas</span><br><span class="line">  auth/          # Auth utilities</span><br><span class="line">  config/        # Shared configs</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> <strong>Tooling Integration:</strong><ul><li>Turborepo for builds</li><li>Changesets for versioning</li><li>ESLint&#x2F;Prettier shared config</li><li>TypeScript project references</li><li>Shared testing setup</li></ul></li></ul><p><strong>Resources:</strong></p><ul><li><a href="https://pnpm.io/workspaces">pnpm Workspaces Documentation</a> (8 hours)</li><li><a href="https://turbo.build/repo/docs">Turborepo Documentation</a> (10 hours)</li><li><a href="https://monorepo.tools/">Monorepo.tools</a> comparison guide (5 hours)</li><li>Nrwl’s <a href="https://nrwl.io/monorepo-course">Monorepo course</a> (12 hours)</li></ul><h3 id="Week-3-4-Deployment-Monitoring"><a href="#Week-3-4-Deployment-Monitoring" class="headerlink" title="Week 3-4: Deployment &amp; Monitoring"></a>Week 3-4: Deployment &amp; Monitoring</h3><p><strong>Learning Checklist:</strong></p><ul><li><input disabled="" type="checkbox"> <strong>Cloudflare Deployment:</strong><ul><li>Pages for static sites</li><li>Workers for edge functions</li><li>D1 for edge databases</li><li>R2 for object storage</li><li>Analytics integration</li></ul></li><li><input disabled="" type="checkbox"> <strong>CI&#x2F;CD Pipeline:</strong><ul><li>GitHub Actions setup</li><li>Automated testing</li><li>Preview deployments</li><li>Production deployments</li><li>Rollback strategies</li></ul></li><li><input disabled="" type="checkbox"> <strong>Monitoring &amp; Observability:</strong><ul><li>Error tracking (Sentry)</li><li>Performance monitoring</li><li>Log aggregation</li><li>Custom metrics</li><li>Alerting setup</li></ul></li></ul><p><strong>Resources:</strong></p><ul><li><a href="https://developers.cloudflare.com/">Cloudflare Documentation</a> - Workers &amp; Pages (15 hours)</li><li><a href="https://docs.github.com/en/actions">GitHub Actions Documentation</a> (10 hours)</li><li>Monitoring best practices guides (8 hours)</li></ul><p><strong>Deliverable:</strong></p><ul><li><strong>Production Monorepo Template:</strong> With:<ul><li>Complete CI&#x2F;CD pipeline</li><li>Multi-environment deployments</li><li>Automated testing suite</li><li>Performance budgets</li><li>Documentation site</li></ul></li><li><strong>DevOps Playbook:</strong> Covering deployment, rollback, and incident response</li></ul><h2 id="Phase-8-React-Native-Capstone-Project-Month-8"><a href="#Phase-8-React-Native-Capstone-Project-Month-8" class="headerlink" title="Phase 8: React Native &amp; Capstone Project (Month 8)"></a>Phase 8: React Native &amp; Capstone Project (Month 8)</h2><p><strong>Goal:</strong> Extend to mobile platforms and complete a production-ready full-stack application demonstrating all learned skills.</p><h3 id="Week-1-2-React-Native-Development"><a href="#Week-1-2-React-Native-Development" class="headerlink" title="Week 1-2: React Native Development"></a>Week 1-2: React Native Development</h3><p><strong>Learning Checklist:</strong></p><ul><li><input disabled="" type="checkbox"> <strong>React Native Fundamentals:</strong><ul><li>Core components vs DOM elements</li><li>Platform-specific code</li><li>Navigation with React Navigation</li><li>Native module integration</li><li>Debugging tools</li></ul></li><li><input disabled="" type="checkbox"> <strong>Expo Ecosystem:</strong><ul><li>Managed vs bare workflow</li><li>EAS Build and Submit</li><li>Over-the-air updates</li><li>Push notifications</li><li>App store deployment</li></ul></li><li><input disabled="" type="checkbox"> <strong>Code Sharing Strategies:</strong><ul><li>Shared business logic</li><li>Platform-specific UI</li><li>API client reuse</li><li>Type sharing</li><li>Monorepo integration</li></ul></li></ul><p><strong>Resources:</strong></p><ul><li><a href="https://reactnative.dev/docs/getting-started">React Native Documentation</a> (15 hours)</li><li><a href="https://docs.expo.dev/">Expo Documentation</a> (10 hours)</li><li>William Candillon’s <a href="https://www.youtube.com/c/wcandillon">React Native tutorials</a> (10 hours)</li><li><strong>Book:</strong> “React Native in Action” - Chapters 1-6</li></ul><h3 id="Week-3-4-Capstone-Project-Completion"><a href="#Week-3-4-Capstone-Project-Completion" class="headerlink" title="Week 3-4: Capstone Project Completion"></a>Week 3-4: Capstone Project Completion</h3><p><strong>Final Project Requirements:</strong></p><p><strong>Architecture:</strong></p><ul><li>Monorepo with pnpm workspaces</li><li>Shared packages for types, API client, business logic</li><li>Separate apps for web, admin, and mobile</li></ul><p><strong>Frontend (Web):</strong></p><ul><li>React 19 with Server Components</li><li>TanStack Router for file-based routing</li><li>TanStack Query for data fetching</li><li>shadcn&#x2F;ui component library</li><li>Responsive design with Tailwind CSS</li></ul><p><strong>Backend:</strong></p><ul><li>tRPC API with complete type safety</li><li>Drizzle ORM with PostgreSQL (Neon)</li><li>better-auth for authentication</li><li>Stripe for payments</li><li>Real-time features with WebSockets</li></ul><p><strong>Mobile:</strong></p><ul><li>React Native with Expo</li><li>Shared API client with web</li><li>Native features (camera, location)</li><li>Push notifications</li></ul><p><strong>DevOps:</strong></p><ul><li>Cloudflare Pages for web deployment</li><li>Cloudflare Workers for API</li><li>GitHub Actions CI&#x2F;CD</li><li>Comprehensive test suite</li><li>Monitoring and analytics</li></ul><p><strong>Deliverable:</strong></p><ul><li><strong>Complete SaaS Product:</strong> “DevTask Pro” - A developer task management platform</li><li><strong>Technical Documentation:</strong> Architecture decisions, API documentation, deployment guide</li><li><strong>Case Study Blog Series:</strong> 5-part series documenting the journey</li><li><strong>Open Source Template:</strong> Extracted starter template for community</li></ul><h2 id="Daily-Schedule-8-hours"><a href="#Daily-Schedule-8-hours" class="headerlink" title="Daily Schedule (8 hours)"></a>Daily Schedule (8 hours)</h2><p><strong>Morning Block (3 hours):</strong></p><ul><li>9:00-10:30: Theory study and documentation</li><li>10:30-10:45: Break</li><li>10:45-12:00: Video tutorials and courses</li></ul><p><strong>Afternoon Block (4 hours):</strong></p><ul><li>1:00-3:00: Hands-on coding and exercises</li><li>3:00-3:15: Break</li><li>3:15-5:00: Project implementation</li></ul><p><strong>Evening Block (1 hour):</strong></p><ul><li>5:00-6:00: Blog writing, code review, or community engagement</li></ul><h2 id="Success-Metrics-Milestones"><a href="#Success-Metrics-Milestones" class="headerlink" title="Success Metrics &amp; Milestones"></a>Success Metrics &amp; Milestones</h2><p><strong>Month 1:</strong> Strong TypeScript foundation, published npm package<br><strong>Month 2:</strong> React 19 expertise, portfolio site with modern features<br><strong>Month 3:</strong> Professional UI skills, custom component library<br><strong>Month 4:</strong> Full-stack architecture, TanStack mastery<br><strong>Month 5:</strong> Backend expertise, complex database operations<br><strong>Month 6:</strong> Production features, payment integration<br><strong>Month 7:</strong> DevOps skills, monorepo management<br><strong>Month 8:</strong> Mobile development, complete SaaS product</p><h2 id="Learning-Resources-Summary"><a href="#Learning-Resources-Summary" class="headerlink" title="Learning Resources Summary"></a>Learning Resources Summary</h2><h3 id="Essential-Books"><a href="#Essential-Books" class="headerlink" title="Essential Books"></a>Essential Books</h3><ol><li><strong>“Effective TypeScript”</strong> by Dan Vanderkam - Complete book throughout Month 1-2</li><li><strong>“Learning React”</strong> by Eve Porcello &amp; Alex Banks - Chapters 3-8 in Month 2</li><li><strong>“Node.js Design Patterns”</strong> by Mario Casciaro - Chapters 1-5 in Month 4</li><li><strong>“SQL Antipatterns”</strong> by Bill Karwin - Reference throughout Month 5</li><li><strong>“Design Systems”</strong> by Alla Kholmatova - Chapters 1-4 in Month 3</li></ol><h3 id="Key-YouTube-Channels"><a href="#Key-YouTube-Channels" class="headerlink" title="Key YouTube Channels"></a>Key YouTube Channels</h3><ol><li><strong>Jack Herrington</strong> - TypeScript and React deep dives</li><li><strong>Theo (t3.gg)</strong> - Modern stack opinions and news</li><li><strong>Web Dev Simplified</strong> - Clear concept explanations</li><li><strong>Traversy Media</strong> - Practical project tutorials</li><li><strong>TkDodo</strong> - React Query patterns</li><li><strong>Josh Comeau</strong> - CSS and React techniques</li></ol><h3 id="Online-Courses"><a href="#Online-Courses" class="headerlink" title="Online Courses"></a>Online Courses</h3><ol><li><strong>Epic React</strong> by Kent C. Dodds</li><li><strong>CSS for JS Developers</strong> by Josh Comeau</li><li><strong>Total TypeScript</strong> by Matt Pocock</li><li><strong>T3 Stack Tutorial</strong> by Theo</li></ol>]]></content>
    
    
    <summary type="html">Comprehensive 8-month TypeScript full-stack engineering transformation plan for experienced developers, covering React 19, TanStack ecosystem, tRPC, Drizzle ORM, authentication &amp; payment systems to React Native with real projects and production deployment strategies.</summary>
    
    
    
    <category term="Programming" scheme="https://blog.baduncle.top/categories/Programming/"/>
    
    
    <category term="typescript" scheme="https://blog.baduncle.top/tags/typescript/"/>
    
    <category term="full-stack-engineering" scheme="https://blog.baduncle.top/tags/full-stack-engineering/"/>
    
    <category term="learning-path" scheme="https://blog.baduncle.top/tags/learning-path/"/>
    
    <category term="career-development" scheme="https://blog.baduncle.top/tags/career-development/"/>
    
    <category term="react-19" scheme="https://blog.baduncle.top/tags/react-19/"/>
    
    <category term="tanstack-ecosystem" scheme="https://blog.baduncle.top/tags/tanstack-ecosystem/"/>
    
    <category term="trpc" scheme="https://blog.baduncle.top/tags/trpc/"/>
    
    <category term="drizzle-orm" scheme="https://blog.baduncle.top/tags/drizzle-orm/"/>
    
    <category term="better-auth" scheme="https://blog.baduncle.top/tags/better-auth/"/>
    
    <category term="stripe-integration" scheme="https://blog.baduncle.top/tags/stripe-integration/"/>
    
    <category term="monorepo" scheme="https://blog.baduncle.top/tags/monorepo/"/>
    
    <category term="react-native" scheme="https://blog.baduncle.top/tags/react-native/"/>
    
    <category term="cloudflare-deployment" scheme="https://blog.baduncle.top/tags/cloudflare-deployment/"/>
    
    <category term="professional-development" scheme="https://blog.baduncle.top/tags/professional-development/"/>
    
  </entry>
  
  <entry>
    <title>React 19+ useCallback Hook Deep Dive - Performance Optimization Strategies in the React Compiler Era</title>
    <link href="https://blog.baduncle.top/2025/08/07/react-19-usecallback-hook-comprehensive-guide/"/>
    <id>https://blog.baduncle.top/2025/08/07/react-19-usecallback-hook-comprehensive-guide/</id>
    <published>2025-08-07T13:37:08.000Z</published>
    <updated>2025-08-07T16:43:43.773Z</updated>
    
    <content type="html"><![CDATA[<p>React 19+ introduces the revolutionary React Compiler that promises to automatically handle most performance optimization work. But does this mean the <code>useCallback</code> Hook is now obsolete? This article will explore the real value, practical limitations, and future role of <code>useCallback</code> in the React Compiler era.</p><span id="more"></span><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li><a href="#React-19-Performance-Optimization-Revolution">React 19+ Performance Optimization Revolution</a><ul><li><a href="#How-React-Compiler-Works">How React Compiler Works</a></li><li><a href="#Automatic-Memoization-Promise-vs-Reality">Automatic Memoization Promise vs Reality</a></li></ul></li><li><a href="#useCallback-s-New-Era-Positioning">useCallback’s New Era Positioning</a><ul><li><a href="#From-Essential-Tool-to-Fine-grained-Control">From Essential Tool to Fine-grained Control</a></li><li><a href="#Function-Signature-Changes-in-React-19">Function Signature Changes in React 19+</a></li></ul></li><li><a href="#In-depth-Source-Code-Analysis">In-depth Source Code Analysis</a><ul><li><a href="#TypeScript-Type-Definitions">TypeScript Type Definitions</a></li><li><a href="#Internal-Implementation-Mechanisms">Internal Implementation Mechanisms</a></li></ul></li><li><a href="#React-Compiler-s-Practical-Limitations">React Compiler’s Practical Limitations</a><ul><li><a href="#Real-world-Optimization-Testing">Real-world Optimization Testing</a></li><li><a href="#Scenarios-Still-Requiring-Manual-Optimization">Scenarios Still Requiring Manual Optimization</a></li></ul></li><li><a href="#Real-world-Application-Scenario-Analysis">Real-world Application Scenario Analysis</a><ul><li><a href="#Performance-Benchmarking">Performance Benchmarking</a></li><li><a href="#Third-party-Library-Integration">Third-party Library Integration</a></li></ul></li><li><a href="#Migration-Strategy-from-React-18-to-19">Migration Strategy from React 18 to 19+</a><ul><li><a href="#Progressive-Optimization-Approach">Progressive Optimization Approach</a></li><li><a href="#Code-Review-Checklist">Code Review Checklist</a></li></ul></li><li><a href="#Best-Practices-and-Decision-Framework">Best Practices and Decision Framework</a><ul><li><a href="#When-to-Use-useCallback">When to Use useCallback</a></li><li><a href="#When-to-Rely-on-React-Compiler">When to Rely on React Compiler</a></li></ul></li><li><a href="#Future-Outlook">Future Outlook</a><ul><li><a href="#React-Ecosystem-Evolution">React Ecosystem Evolution</a></li><li><a href="#Performance-Optimization-Pattern-Trends">Performance Optimization Pattern Trends</a></li></ul></li></ul><h2 id="React-19-Performance-Optimization-Revolution"><a href="#React-19-Performance-Optimization-Revolution" class="headerlink" title="React 19+ Performance Optimization Revolution"></a>React 19+ Performance Optimization Revolution</h2><h3 id="How-React-Compiler-Works"><a href="#How-React-Compiler-Works" class="headerlink" title="How React Compiler Works"></a>How React Compiler Works</h3><p>React 19+ introduces the React Compiler, a Babel plugin that can automatically analyze and optimize React components:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Traditional Manual Optimization (React 18)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ExpensiveComponent</span> = (<span class="params">&#123; data, onUpdate &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> processedData = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title function_">expensiveCalculation</span>(item));</span><br><span class="line">  &#125;, [data]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleUpdate = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">onUpdate</span>(processedData, newValue);</span><br><span class="line">  &#125;, [processedData, onUpdate]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;handleUpdate&#125;</span>&gt;</span>&#123;/* render logic */&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React Compiler Automatic Optimization (React 19+)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ExpensiveComponent</span> = (<span class="params">&#123; data, onUpdate &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// React Compiler automatically handles memoization</span></span><br><span class="line">  <span class="keyword">const</span> processedData = data.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title function_">expensiveCalculation</span>(item));</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleUpdate</span> = (<span class="params">newValue</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">onUpdate</span>(processedData, newValue);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;handleUpdate&#125;</span>&gt;</span>&#123;/* render logic */&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>React Compiler identifies the following optimization opportunities through static analysis:</p><ul><li><strong>Automatic memoization</strong>: Automatically cache expensive calculations</li><li><strong>Function stabilization</strong>: Prevent unnecessary function recreation</li><li><strong>Render skipping</strong>: Intelligently skip unnecessary re-renders</li></ul><h3 id="Automatic-Memoization-Promise-vs-Reality"><a href="#Automatic-Memoization-Promise-vs-Reality" class="headerlink" title="Automatic Memoization Promise vs Reality"></a>Automatic Memoization Promise vs Reality</h3><p>Official documentation claims React Compiler can “reduce the need for manual useCallback calls,” but real-world testing reveals a complex reality:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Test Case: Optimization Effects in Complex Component Trees</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TestResults</span> = &#123;</span><br><span class="line">  <span class="attr">totalComponents</span>: <span class="number">8</span>,</span><br><span class="line">  <span class="attr">unnecessaryRerenders</span>: <span class="number">8</span>,</span><br><span class="line">  <span class="attr">optimizedByCompiler</span>: <span class="number">1</span>,  <span class="comment">// Only optimized 1 case</span></span><br><span class="line">  <span class="attr">stillNeedManualOptimization</span>: <span class="number">7</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Scenario Where React Compiler is Effective</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SimpleOptimization</span> = (<span class="params">&#123; count &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// ✅ React Compiler can optimize this</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>Count: &#123;count&#125;<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Complex Scenario React Compiler Cannot Optimize</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ComplexScenario</span> = (<span class="params">&#123; items, filters, onUpdate &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// ❌ React Compiler struggles to optimize this</span></span><br><span class="line">  <span class="keyword">const</span> filteredAndSorted = items</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> filters.<span class="title function_">some</span>(<span class="function"><span class="params">f</span> =&gt;</span> f.<span class="title function_">test</span>(item)))</span><br><span class="line">    .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">priority</span> - b.<span class="property">priority</span>)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> (&#123; ...item, <span class="attr">processed</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleComplexUpdate</span> = (<span class="params">newItem</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title function_">processWithBusinessLogic</span>(filteredAndSorted, newItem);</span><br><span class="line">    <span class="title function_">onUpdate</span>(result);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ComplexList</span> <span class="attr">data</span>=<span class="string">&#123;filteredAndSorted&#125;</span> <span class="attr">onItemUpdate</span>=<span class="string">&#123;handleComplexUpdate&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="useCallback’s-New-Era-Positioning"><a href="#useCallback’s-New-Era-Positioning" class="headerlink" title="useCallback’s New Era Positioning"></a>useCallback’s New Era Positioning</h2><h3 id="From-Essential-Tool-to-Fine-grained-Control"><a href="#From-Essential-Tool-to-Fine-grained-Control" class="headerlink" title="From Essential Tool to Fine-grained Control"></a>From Essential Tool to Fine-grained Control</h3><p>In React 19+, <code>useCallback</code> transforms from a “performance optimization necessity” to a “fine-grained control tool”:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Core Value Scenarios for useCallback in React 19+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. Third-party Library Dependencies Requiring Strict Reference Equality</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MapComponent</span> = (<span class="params">&#123; markers, onMarkerClick &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Third-party map library depends on function reference stability</span></span><br><span class="line">  <span class="keyword">const</span> handleMarkerClick = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">marker</span>) =&gt;</span> &#123;</span><br><span class="line">    analyticsTracker.<span class="title function_">track</span>(<span class="string">&#x27;marker_clicked&#x27;</span>, &#123; <span class="attr">id</span>: marker.<span class="property">id</span> &#125;);</span><br><span class="line">    <span class="title function_">onMarkerClick</span>(marker);</span><br><span class="line">  &#125;, [onMarkerClick]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ThirdPartyMap</span> <span class="attr">markers</span>=<span class="string">&#123;markers&#125;</span> <span class="attr">onMarkerClick</span>=<span class="string">&#123;handleMarkerClick&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Precise Control for Performance-Critical Paths</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HighFrequencyComponent</span> = (<span class="params">&#123; streamData &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// High-frequency update scenarios require precise cache control</span></span><br><span class="line">  <span class="keyword">const</span> processStreamData = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data.<span class="title function_">filter</span>(isRelevant).<span class="title function_">map</span>(transform);</span><br><span class="line">  &#125;, []); <span class="comment">// Empty dependency array ensures function never changes</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> processed = <span class="title function_">processStreamData</span>(streamData);</span><br><span class="line">      <span class="title function_">updateVisualization</span>(processed);</span><br><span class="line">    &#125;, <span class="number">16</span>); <span class="comment">// 60 FPS updates</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">  &#125;, [processStreamData, streamData]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Complex State Update Logic</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">FormHandler</span> = (<span class="params">&#123; initialValues, validationRules &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [formState, setFormState] = <span class="title function_">useState</span>(initialValues);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Complex state update logic requires stable references</span></span><br><span class="line">  <span class="keyword">const</span> updateField = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">fieldName, value, shouldValidate = <span class="literal">true</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setFormState</span>(<span class="function"><span class="params">prev</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> newState = &#123; ...prev, [fieldName]: value &#125;;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (shouldValidate) &#123;</span><br><span class="line">        <span class="keyword">const</span> errors = <span class="title function_">validateField</span>(newState, fieldName, validationRules);</span><br><span class="line">        newState.<span class="property">errors</span> = &#123; ...prev.<span class="property">errors</span>, [fieldName]: errors &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> newState;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, [validationRules]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">FormFields</span> <span class="attr">formState</span>=<span class="string">&#123;formState&#125;</span> <span class="attr">onFieldUpdate</span>=<span class="string">&#123;updateField&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Function-Signature-Changes-in-React-19"><a href="#Function-Signature-Changes-in-React-19" class="headerlink" title="Function Signature Changes in React 19+"></a>Function Signature Changes in React 19+</h3><p>The TypeScript signature of <code>useCallback</code> in React 19+ remains backward compatible, but usage patterns have evolved:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React 19+ useCallback Complete Type Definition</span></span><br><span class="line"><span class="keyword">function</span> useCallback&lt;T <span class="keyword">extends</span> <span class="title class_">Function</span>&gt;(<span class="attr">callback</span>: T, <span class="attr">deps</span>: <span class="title class_">DependencyList</span>): T;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New Usage Patterns: More Cautious Dependency Management</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">OptimizedComponent</span> = (<span class="params">&#123; data, config &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Best Practice: Use functional updates to reduce dependencies</span></span><br><span class="line">  <span class="keyword">const</span> handleUpdate = <span class="title function_">useCallback</span>(<span class="function">(<span class="params"><span class="attr">newValue</span>: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setData</span>(<span class="function"><span class="params">prevData</span> =&gt;</span> (&#123; </span><br><span class="line">      ...prevData, </span><br><span class="line">      <span class="attr">value</span>: newValue,</span><br><span class="line">      <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>() </span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;, []); <span class="comment">// Empty dependency array</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Avoid: Dependencies containing unstable references</span></span><br><span class="line">  <span class="keyword">const</span> handleBadUpdate = <span class="title function_">useCallback</span>(<span class="function">(<span class="params"><span class="attr">newValue</span>: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setData</span>(&#123; </span><br><span class="line">      ...data,  <span class="comment">// ❌ Depends on external data</span></span><br><span class="line">      <span class="attr">value</span>: newValue,</span><br><span class="line">      config    <span class="comment">// ❌ Depends on external config</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, [data, config]); <span class="comment">// Frequently changing dependencies</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="In-depth-Source-Code-Analysis"><a href="#In-depth-Source-Code-Analysis" class="headerlink" title="In-depth Source Code Analysis"></a>In-depth Source Code Analysis</h2><h3 id="TypeScript-Type-Definitions"><a href="#TypeScript-Type-Definitions" class="headerlink" title="TypeScript Type Definitions"></a>TypeScript Type Definitions</h3><p>The type system of <code>useCallback</code> in React 19+ provides stricter type safety:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React Internal Type Definitions</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DependencyList</span> = <span class="title class_">ReadonlyArray</span>&lt;<span class="built_in">unknown</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CallbackOptions</span> &#123;</span><br><span class="line">  <span class="comment">// React Compiler hint information</span></span><br><span class="line">  <span class="attr">_compilerHint</span>?: <span class="string">&#x27;auto-memoize&#x27;</span> | <span class="string">&#x27;manual-control&#x27;</span> | <span class="string">&#x27;critical-path&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Enhanced useCallback type</span></span><br><span class="line"><span class="keyword">function</span> useCallback&lt;T <span class="title function_">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span>&gt;(</span><br><span class="line">  <span class="attr">callback</span>: T,</span><br><span class="line">  <span class="attr">deps</span>: <span class="title class_">DependencyList</span>,</span><br><span class="line">  <span class="attr">options</span>?: <span class="title class_">CallbackOptions</span></span><br><span class="line">): T;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type inference in actual usage</span></span><br><span class="line"><span class="keyword">const</span> typedHandler = <span class="title function_">useCallback</span>(</span><br><span class="line">  <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">React</span>.<span class="title class_">MouseEvent</span>&lt;<span class="title class_">HTMLButtonElement</span>&gt;, <span class="attr">data</span>: <span class="title class_">UserData</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// TypeScript automatically infers parameter types</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">currentTarget</span>.<span class="property">value</span>, data.<span class="property">id</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  [data.<span class="property">id</span>] <span class="comment">// Dependency type checking</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Advanced usage with generic constraints</span></span><br><span class="line"><span class="keyword">function</span> createEventHandler&lt;T <span class="keyword">extends</span> <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">unknown</span>&gt;&gt;(</span><br><span class="line">  <span class="attr">processor</span>: <span class="function">(<span class="params"><span class="attr">data</span>: T</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useCallback</span>(</span><br><span class="line">    <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">Event</span>, <span class="attr">data</span>: T</span>) =&gt;</span> &#123;</span><br><span class="line">      event.<span class="title function_">preventDefault</span>();</span><br><span class="line">      <span class="title function_">processor</span>(data);</span><br><span class="line">    &#125;,</span><br><span class="line">    [processor]</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Internal-Implementation-Mechanisms"><a href="#Internal-Implementation-Mechanisms" class="headerlink" title="Internal Implementation Mechanisms"></a>Internal Implementation Mechanisms</h3><p>Collaboration mechanism between <code>useCallback</code> and React Compiler in React 19+:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Simplified internal implementation logic</span></span><br><span class="line"><span class="keyword">function</span> useCallbackInternal&lt;T <span class="keyword">extends</span> <span class="title class_">Function</span>&gt;(</span><br><span class="line">  <span class="attr">callback</span>: T,</span><br><span class="line">  <span class="attr">deps</span>: <span class="title class_">DependencyList</span></span><br><span class="line">): T &#123;</span><br><span class="line">  <span class="keyword">const</span> hook = <span class="title function_">updateWorkInProgressHook</span>();</span><br><span class="line">  <span class="keyword">const</span> nextDeps = deps === <span class="literal">undefined</span> ? <span class="literal">null</span> : deps;</span><br><span class="line">  <span class="keyword">const</span> prevState = hook.<span class="property">memoizedState</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (prevState !== <span class="literal">null</span> &amp;&amp; nextDeps !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> prevDeps = prevState[<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// React Compiler optimization: smarter dependency comparison</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">areHookInputsEqual</span>(nextDeps, prevDeps)) &#123;</span><br><span class="line">      <span class="keyword">return</span> prevState[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// React Compiler integration point: analysis and optimization</span></span><br><span class="line">  <span class="keyword">const</span> optimizedCallback = <span class="title function_">maybeOptimizeWithCompiler</span>(callback, deps);</span><br><span class="line">  hook.<span class="property">memoizedState</span> = [optimizedCallback, nextDeps];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> optimizedCallback;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React Compiler optimization analysis</span></span><br><span class="line"><span class="keyword">function</span> maybeOptimizeWithCompiler&lt;T <span class="keyword">extends</span> <span class="title class_">Function</span>&gt;(</span><br><span class="line">  <span class="attr">callback</span>: T,</span><br><span class="line">  <span class="attr">deps</span>: <span class="title class_">DependencyList</span></span><br><span class="line">): T &#123;</span><br><span class="line">  <span class="comment">// Compile-time analysis results</span></span><br><span class="line">  <span class="keyword">const</span> compilerAnalysis = &#123;</span><br><span class="line">    <span class="attr">isStaticFunction</span>: <span class="title function_">analyzeForStaticness</span>(callback),</span><br><span class="line">    <span class="attr">hasExpensiveOperations</span>: <span class="title function_">detectExpensiveOps</span>(callback),</span><br><span class="line">    <span class="attr">dependencyStability</span>: <span class="title function_">analyzeDependencyStability</span>(deps)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (compilerAnalysis.<span class="property">isStaticFunction</span> &amp;&amp; compilerAnalysis.<span class="property">dependencyStability</span>.<span class="property">isStable</span>) &#123;</span><br><span class="line">    <span class="comment">// React Compiler can safely optimize</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">compilerOptimizedVersion</span>(callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fallback to manual control</span></span><br><span class="line">  <span class="keyword">return</span> callback;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="React-Compiler’s-Practical-Limitations"><a href="#React-Compiler’s-Practical-Limitations" class="headerlink" title="React Compiler’s Practical Limitations"></a>React Compiler’s Practical Limitations</h2><h3 id="Real-world-Optimization-Testing"><a href="#Real-world-Optimization-Testing" class="headerlink" title="Real-world Optimization Testing"></a>Real-world Optimization Testing</h3><p>Based on community testing data, React Compiler’s practical effectiveness has significant limitations:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Test Case 1: Effective React Compiler Optimization</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SimpleCounter</span> = (<span class="params">&#123; initialCount &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(initialCount);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ✅ React Compiler successfully optimizes</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; <span class="title function_">setCount</span>(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">decrement</span> = (<span class="params"></span>) =&gt; <span class="title function_">setCount</span>(<span class="function"><span class="params">c</span> =&gt;</span> c - <span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test Case 2: React Compiler Optimization Failure</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ComplexDataProcessor</span> = (<span class="params">&#123; rawData, filterCriteria, sortOptions &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// ❌ React Compiler cannot optimize complex data processing</span></span><br><span class="line">  <span class="keyword">const</span> processedData = rawData</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> filterCriteria.<span class="title function_">some</span>(<span class="function"><span class="params">criteria</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> criteria.<span class="property">field</span> <span class="keyword">in</span> item &amp;&amp; </span><br><span class="line">               criteria.<span class="title function_">operator</span>(item[criteria.<span class="property">field</span>], criteria.<span class="property">value</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> option <span class="keyword">of</span> sortOptions) &#123;</span><br><span class="line">        <span class="keyword">const</span> comparison = <span class="title function_">compareValues</span>(a[option.<span class="property">field</span>], b[option.<span class="property">field</span>]);</span><br><span class="line">        <span class="keyword">if</span> (comparison !== <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> option.<span class="property">direction</span> === <span class="string">&#x27;asc&#x27;</span> ? comparison : -comparison;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> (&#123;</span><br><span class="line">      ...item,</span><br><span class="line">      <span class="attr">computed</span>: <span class="title function_">computeExpensiveMetrics</span>(item),</span><br><span class="line">      <span class="attr">formatted</span>: <span class="title function_">formatForDisplay</span>(item)</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ❌ React Compiler cannot stabilize complex functions</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleDataUpdate</span> = (<span class="params">updatedItem</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> validationResult = <span class="title function_">validateBusinessRules</span>(updatedItem, processedData);</span><br><span class="line">    <span class="keyword">if</span> (validationResult.<span class="property">isValid</span>) &#123;</span><br><span class="line">      <span class="title function_">updateDataStore</span>(updatedItem);</span><br><span class="line">      <span class="title function_">triggerRecomputation</span>(processedData.<span class="title function_">filter</span>(<span class="function"><span class="params">i</span> =&gt;</span> i.<span class="property">id</span> !== updatedItem.<span class="property">id</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">DataTable</span> <span class="attr">data</span>=<span class="string">&#123;processedData&#125;</span> <span class="attr">onItemUpdate</span>=<span class="string">&#123;handleDataUpdate&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Performance Test Results Comparison</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PerformanceComparison</span> = &#123;</span><br><span class="line">  <span class="attr">scenario</span>: <span class="string">&quot;8 components with unnecessary re-renders&quot;</span>,</span><br><span class="line">  <span class="attr">reactCompilerOptimized</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">manualOptimizationNeeded</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">improvementRate</span>: <span class="string">&quot;12.5%&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Scenarios-Still-Requiring-Manual-Optimization"><a href="#Scenarios-Still-Requiring-Manual-Optimization" class="headerlink" title="Scenarios Still Requiring Manual Optimization"></a>Scenarios Still Requiring Manual Optimization</h3><p>In the following scenarios, <code>useCallback</code> remains irreplaceable:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Integration with Non-React Ecosystems</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ThirdPartyIntegration</span> = (<span class="params">&#123; chartData, onDataPointClick &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Third-party chart libraries depend on strict reference equality</span></span><br><span class="line">  <span class="keyword">const</span> stableClickHandler = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">dataPoint, event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Complex event handling logic</span></span><br><span class="line">    <span class="keyword">const</span> enrichedData = &#123;</span><br><span class="line">      ...dataPoint,</span><br><span class="line">      <span class="attr">clickTime</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">      <span class="attr">coordinates</span>: &#123; <span class="attr">x</span>: event.<span class="property">clientX</span>, <span class="attr">y</span>: event.<span class="property">clientY</span> &#125;,</span><br><span class="line">      <span class="attr">contextualInfo</span>: <span class="title function_">extractContextualInfo</span>(dataPoint)</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">onDataPointClick</span>(enrichedData);</span><br><span class="line">  &#125;, [onDataPointClick]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Third-party library initialization</span></span><br><span class="line">    <span class="keyword">const</span> chart = <span class="keyword">new</span> <span class="title class_">ThirdPartyChart</span>(&#123;</span><br><span class="line">      <span class="attr">data</span>: chartData,</span><br><span class="line">      <span class="attr">onClick</span>: stableClickHandler  <span class="comment">// Must maintain reference stability</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> chart.<span class="title function_">destroy</span>();</span><br><span class="line">  &#125;, [chartData, stableClickHandler]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Real-time Applications with High-frequency Updates</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">RealTimeDataStream</span> = (<span class="params">&#123; streamEndpoint, processingConfig &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [liveData, setLiveData] = <span class="title function_">useState</span>([]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// High-frequency update processors need stable references</span></span><br><span class="line">  <span class="keyword">const</span> processIncomingData = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">rawData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> processed = rawData</span><br><span class="line">      .<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">timestamp</span> &gt; <span class="title class_">Date</span>.<span class="title function_">now</span>() - processingConfig.<span class="property">windowMs</span>)</span><br><span class="line">      .<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title function_">applyProcessingRules</span>(item, processingConfig.<span class="property">rules</span>))</span><br><span class="line">      .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b.<span class="property">priority</span> - a.<span class="property">priority</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">setLiveData</span>(<span class="function"><span class="params">prev</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Complex state merging logic</span></span><br><span class="line">      <span class="keyword">const</span> merged = <span class="title function_">mergeLiveData</span>(prev, processed);</span><br><span class="line">      <span class="keyword">return</span> merged.<span class="title function_">slice</span>(<span class="number">0</span>, processingConfig.<span class="property">maxItems</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, [processingConfig]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> websocket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(streamEndpoint);</span><br><span class="line">    </span><br><span class="line">    websocket.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(event.<span class="property">data</span>);</span><br><span class="line">      <span class="title function_">processIncomingData</span>(data); <span class="comment">// High-frequency calls</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> websocket.<span class="title function_">close</span>();</span><br><span class="line">  &#125;, [streamEndpoint, processIncomingData]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Recursive or Self-referencing Components</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">RecursiveTreeNode</span> = (<span class="params">&#123; node, onNodeAction, depth = <span class="number">0</span> &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Stable callbacks in recursive components</span></span><br><span class="line">  <span class="keyword">const</span> handleAction = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">action, targetNode</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> contextualAction = &#123;</span><br><span class="line">      ...action,</span><br><span class="line">      depth,</span><br><span class="line">      <span class="attr">path</span>: <span class="title function_">buildNodePath</span>(node, targetNode),</span><br><span class="line">      <span class="attr">siblings</span>: node.<span class="property">children</span>?.<span class="property">length</span> || <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">onNodeAction</span>(contextualAction);</span><br><span class="line">  &#125;, [node, onNodeAction, depth]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">tree-node</span> <span class="attr">depth-</span>$&#123;<span class="attr">depth</span>&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NodeHeader</span> <span class="attr">node</span>=<span class="string">&#123;node&#125;</span> <span class="attr">onAction</span>=<span class="string">&#123;handleAction&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;node.children?.map(child =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">RecursiveTreeNode</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">key</span>=<span class="string">&#123;child.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">node</span>=<span class="string">&#123;child&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onNodeAction</span>=<span class="string">&#123;handleAction&#125;</span>  // <span class="attr">Pass</span> <span class="attr">stable</span> <span class="attr">callback</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">depth</span>=<span class="string">&#123;depth</span> + <span class="attr">1</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Real-world-Application-Scenario-Analysis"><a href="#Real-world-Application-Scenario-Analysis" class="headerlink" title="Real-world Application Scenario Analysis"></a>Real-world Application Scenario Analysis</h2><h3 id="Performance-Benchmarking"><a href="#Performance-Benchmarking" class="headerlink" title="Performance Benchmarking"></a>Performance Benchmarking</h3><p>Performance comparison between React Compiler vs manual <code>useCallback</code> in real projects:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Benchmark Test Setup</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">BenchmarkScenarios</span> = &#123;</span><br><span class="line">  <span class="attr">simpleComponents</span>: &#123;</span><br><span class="line">    <span class="attr">reactCompiler</span>: &#123; <span class="attr">renderTime</span>: <span class="string">&#x27;0.8ms&#x27;</span>, <span class="attr">optimizationRate</span>: <span class="string">&#x27;85%&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">manualUseCallback</span>: &#123; <span class="attr">renderTime</span>: <span class="string">&#x27;0.9ms&#x27;</span>, <span class="attr">optimizationRate</span>: <span class="string">&#x27;90%&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">conclusion</span>: <span class="string">&#x27;React Compiler slightly better&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="attr">complexDataProcessing</span>: &#123;</span><br><span class="line">    <span class="attr">reactCompiler</span>: &#123; <span class="attr">renderTime</span>: <span class="string">&#x27;15.2ms&#x27;</span>, <span class="attr">optimizationRate</span>: <span class="string">&#x27;20%&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">manualUseCallback</span>: &#123; <span class="attr">renderTime</span>: <span class="string">&#x27;8.4ms&#x27;</span>, <span class="attr">optimizationRate</span>: <span class="string">&#x27;75%&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">conclusion</span>: <span class="string">&#x27;Manual optimization significantly better&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="attr">thirdPartyIntegration</span>: &#123;</span><br><span class="line">    <span class="attr">reactCompiler</span>: &#123; <span class="attr">renderTime</span>: <span class="string">&#x27;12.1ms&#x27;</span>, <span class="attr">optimizationRate</span>: <span class="string">&#x27;10%&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">manualUseCallback</span>: &#123; <span class="attr">renderTime</span>: <span class="string">&#x27;6.8ms&#x27;</span>, <span class="attr">optimizationRate</span>: <span class="string">&#x27;80%&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">conclusion</span>: <span class="string">&#x27;Must use manual optimization&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Performance Test Component</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">PerformanceTestCase</span> = (<span class="params">&#123; scenario, dataSize &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [metrics, setMetrics] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Test React Compiler automatic optimization</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">testAutoOptimization</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> startTime = performance.<span class="title function_">now</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Let React Compiler handle automatically</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">processData</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> data.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title function_">expensiveComputation</span>(item));</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> result = <span class="title function_">processData</span>(<span class="title function_">generateTestData</span>(dataSize));</span><br><span class="line">    <span class="keyword">const</span> endTime = performance.<span class="title function_">now</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">time</span>: endTime - startTime, result &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Test manual useCallback optimization</span></span><br><span class="line">  <span class="keyword">const</span> testManualOptimization = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> startTime = performance.<span class="title function_">now</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> result = testData.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title function_">expensiveComputation</span>(item));</span><br><span class="line">    <span class="keyword">const</span> endTime = performance.<span class="title function_">now</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">time</span>: endTime - startTime, result &#125;;</span><br><span class="line">  &#125;, [testData]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Run comparison test</span></span><br><span class="line">  <span class="keyword">const</span> runBenchmark = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> autoResult = <span class="title function_">testAutoOptimization</span>();</span><br><span class="line">    <span class="keyword">const</span> manualResult = <span class="title function_">testManualOptimization</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">setMetrics</span>(&#123;</span><br><span class="line">      <span class="attr">auto</span>: autoResult.<span class="property">time</span>,</span><br><span class="line">      <span class="attr">manual</span>: manualResult.<span class="property">time</span>,</span><br><span class="line">      <span class="attr">improvement</span>: ((autoResult.<span class="property">time</span> - manualResult.<span class="property">time</span>) / autoResult.<span class="property">time</span> * <span class="number">100</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, [testManualOptimization]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Third-party-Library-Integration"><a href="#Third-party-Library-Integration" class="headerlink" title="Third-party Library Integration"></a>Third-party Library Integration</h3><p>Integration scenario analysis with popular third-party libraries:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React Hook Form Integration</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">FormWithHookForm</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; control, handleSubmit &#125; = <span class="title function_">useForm</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// React Hook Form requires stable render function references</span></span><br><span class="line">  <span class="keyword">const</span> renderCustomField = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">&#123; field, fieldState &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">CustomInput</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;<span class="attr">...field</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">error</span>=<span class="string">&#123;fieldState.error?.message&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onValidate</span>=<span class="string">&#123;(value)</span> =&gt;</span> validateField(value, field.name)&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;handleSubmit(onSubmit)&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Controller</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">name</span>=<span class="string">&quot;customField&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">control</span>=<span class="string">&#123;control&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">render</span>=<span class="string">&#123;renderCustomField&#125;</span>  // <span class="attr">Must</span> <span class="attr">maintain</span> <span class="attr">reference</span> <span class="attr">stability</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React Virtual Integration</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">VirtualizedList</span> = (<span class="params">&#123; items, onItemClick &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> parentRef = <span class="title function_">useRef</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// react-virtual requires stable itemRenderer</span></span><br><span class="line">  <span class="keyword">const</span> itemRenderer = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">&#123; index, style &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> item = items[index];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> onItemClick(item, index)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ComplexItemRenderer</span> <span class="attr">item</span>=<span class="string">&#123;item&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;, [items, onItemClick]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> rowVirtualizer = <span class="title function_">useVirtual</span>(&#123;</span><br><span class="line">    <span class="attr">size</span>: items.<span class="property">length</span>,</span><br><span class="line">    parentRef,</span><br><span class="line">    <span class="attr">estimateSize</span>: <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> <span class="number">50</span>, []),</span><br><span class="line">    <span class="attr">overscan</span>: <span class="number">5</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;parentRef&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> <span class="attr">400</span>, <span class="attr">overflow:</span> &#x27;<span class="attr">auto</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;rowVirtualizer.virtualItems.map(virtualRow =&gt; </span></span><br><span class="line"><span class="language-xml">        itemRenderer(&#123; </span></span><br><span class="line"><span class="language-xml">          index: virtualRow.index, </span></span><br><span class="line"><span class="language-xml">          style: &#123; </span></span><br><span class="line"><span class="language-xml">            height: virtualRow.size,</span></span><br><span class="line"><span class="language-xml">            transform: `translateY($&#123;virtualRow.start&#125;px)` </span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        &#125;)</span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Redux Toolkit Integration</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ConnectedComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line">  <span class="keyword">const</span> data = <span class="title function_">useSelector</span>(selectComplexData);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Redux action creators need stable references to avoid unnecessary re-subscriptions</span></span><br><span class="line">  <span class="keyword">const</span> handleComplexAction = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">complexAsyncAction</span>(&#123;</span><br><span class="line">      ...payload,</span><br><span class="line">      <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">      <span class="attr">metadata</span>: <span class="title function_">extractMetadata</span>(payload)</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;, [dispatch]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Complex selector result processing</span></span><br><span class="line">  <span class="keyword">const</span> processedData = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> (&#123;</span><br><span class="line">      ...item,</span><br><span class="line">      <span class="attr">computed</span>: <span class="title function_">computeExpensiveMetrics</span>(item)</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;, [data]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">DataProcessor</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">data</span>=<span class="string">&#123;processedData&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onAction</span>=<span class="string">&#123;handleComplexAction&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Migration-Strategy-from-React-18-to-19"><a href="#Migration-Strategy-from-React-18-to-19" class="headerlink" title="Migration Strategy from React 18 to 19+"></a>Migration Strategy from React 18 to 19+</h2><h3 id="Progressive-Optimization-Approach"><a href="#Progressive-Optimization-Approach" class="headerlink" title="Progressive Optimization Approach"></a>Progressive Optimization Approach</h3><p>Progressive transition from traditional manual optimization to the React Compiler era:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Phase 1: Identify useCallback that can be removed</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MigrationPhase1</span> = (<span class="params">&#123; data &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// ✅ Can safely remove: simple event handlers</span></span><br><span class="line">  <span class="comment">// const handleClick = useCallback(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   setCount(c =&gt; c + 1);</span></span><br><span class="line">  <span class="comment">// &#125;, []);</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>);  <span class="comment">// React Compiler automatically optimizes</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ✅ Can safely remove: simple data transformations</span></span><br><span class="line">  <span class="comment">// const transformedData = useMemo(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   return data.map(item =&gt; (&#123; ...item, formatted: true &#125;));</span></span><br><span class="line">  <span class="comment">// &#125;, [data]);</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> transformedData = data.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> (&#123; ...item, <span class="attr">formatted</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">SimpleComponent</span> <span class="attr">data</span>=<span class="string">&#123;transformedData&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Phase 2: Retain necessary manual optimizations</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MigrationPhase2</span> = (<span class="params">&#123; complexData, thirdPartyCallback &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// ❌ Cannot remove: complex business logic</span></span><br><span class="line">  <span class="keyword">const</span> processComplexData = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">rawData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rawData</span><br><span class="line">      .<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title function_">applyBusinessRules</span>(item))</span><br><span class="line">      .<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title function_">enrichWithContextualData</span>(item))</span><br><span class="line">      .<span class="title function_">sort</span>(complexSortingLogic);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ❌ Cannot remove: third-party library integration</span></span><br><span class="line">  <span class="keyword">const</span> handleThirdPartyEvent = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> processedEvent = <span class="title function_">normalizeEvent</span>(event);</span><br><span class="line">    <span class="title function_">thirdPartyCallback</span>(processedEvent);</span><br><span class="line">  &#125;, [thirdPartyCallback]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ComplexComponent</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">data</span>=<span class="string">&#123;processComplexData(complexData)&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onThirdPartyEvent</span>=<span class="string">&#123;handleThirdPartyEvent&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Phase 3: Hybrid optimization strategy</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MigrationPhase3</span> = (<span class="params">&#123; streamData, userPreferences &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// React Compiler handles simple logic</span></span><br><span class="line">  <span class="keyword">const</span> basicFiltering = streamData.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">active</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Manual optimization handles complex logic</span></span><br><span class="line">  <span class="keyword">const</span> advancedProcessing = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">filteredData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> filteredData.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> userSpecificTransform = userPreferences.<span class="property">transforms</span></span><br><span class="line">        .<span class="title function_">find</span>(<span class="function"><span class="params">t</span> =&gt;</span> t.<span class="title function_">applies</span>(item));</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> userSpecificTransform </span><br><span class="line">        ? userSpecificTransform.<span class="title function_">apply</span>(item)</span><br><span class="line">        : item;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, [userPreferences]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> finalData = <span class="title function_">advancedProcessing</span>(basicFiltering);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">HybridComponent</span> <span class="attr">data</span>=<span class="string">&#123;finalData&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Code-Review-Checklist"><a href="#Code-Review-Checklist" class="headerlink" title="Code Review Checklist"></a>Code Review Checklist</h3><p>Key code review points during migration:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Migration Checklist</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MigrationChecklist</span> = &#123;</span><br><span class="line">  <span class="comment">// 1. Cases where useCallback can be removed</span></span><br><span class="line">  <span class="attr">canRemoveUseCallback</span>: &#123;</span><br><span class="line">    <span class="attr">simpleEventHandlers</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">basicStateUpdates</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">simpleDataTransformations</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">internalComponentLogic</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. Cases where useCallback must be kept</span></span><br><span class="line">  <span class="attr">mustKeepUseCallback</span>: &#123;</span><br><span class="line">    <span class="attr">thirdPartyLibraryCallbacks</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">complexBusinessLogic</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">highFrequencyUpdates</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">recursiveComponents</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">performanceCriticalPaths</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. Cases requiring testing verification</span></span><br><span class="line">  <span class="attr">needsTestingVerification</span>: &#123;</span><br><span class="line">    <span class="attr">moderateComplexity</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">customHookIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">contextProviders</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">memoizedComponents</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Code review utility function</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">analyzeUseCallbackUsage</span>(<span class="params"><span class="attr">componentCode</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> analysis = &#123;</span><br><span class="line">    <span class="attr">totalUseCallbacks</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">canRemove</span>: [],</span><br><span class="line">    <span class="attr">mustKeep</span>: [],</span><br><span class="line">    <span class="attr">needsVerification</span>: []</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Simplified static analysis logic</span></span><br><span class="line">  <span class="keyword">const</span> useCallbackMatches = componentCode.<span class="title function_">match</span>(<span class="regexp">/useCallback\(/g</span>);</span><br><span class="line">  analysis.<span class="property">totalUseCallbacks</span> = useCallbackMatches?.<span class="property">length</span> || <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Actual projects require more complex AST analysis</span></span><br><span class="line">  <span class="keyword">return</span> analysis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Performance Impact Assessment</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PerformanceImpactAssessment</span> = &#123;</span><br><span class="line">  <span class="attr">lowRisk</span>: [<span class="string">&#x27;Simple event handling&#x27;</span>, <span class="string">&#x27;Basic state updates&#x27;</span>],</span><br><span class="line">  <span class="attr">mediumRisk</span>: [<span class="string">&#x27;Medium complexity data processing&#x27;</span>, <span class="string">&#x27;Custom Hook integration&#x27;</span>],</span><br><span class="line">  <span class="attr">highRisk</span>: [<span class="string">&#x27;Third-party library integration&#x27;</span>, <span class="string">&#x27;Performance critical paths&#x27;</span>, <span class="string">&#x27;High-frequency updates&#x27;</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Best-Practices-and-Decision-Framework"><a href="#Best-Practices-and-Decision-Framework" class="headerlink" title="Best Practices and Decision Framework"></a>Best Practices and Decision Framework</h2><h3 id="When-to-Use-useCallback"><a href="#When-to-Use-useCallback" class="headerlink" title="When to Use useCallback"></a>When to Use useCallback</h3><p>Based on the current state of React 19+ and React Compiler, establish a clear decision framework:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Decision Framework: useCallback Usage Guide</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UseCallbackDecisionFramework</span> = &#123;</span><br><span class="line">  <span class="comment">// Strongly Recommended to Use useCallback</span></span><br><span class="line">  <span class="attr">stronglyRecommended</span>: &#123;</span><br><span class="line">    <span class="attr">thirdPartyIntegration</span>: &#123;</span><br><span class="line">      <span class="attr">example</span>: <span class="string">&#x27;Chart libraries, Map components, Form libraries&#x27;</span>,</span><br><span class="line">      <span class="attr">reason</span>: <span class="string">&#x27;Third-party libraries often rely on reference equality&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">performanceCriticalPaths</span>: &#123;</span><br><span class="line">      <span class="attr">example</span>: <span class="string">&#x27;High-frequency animations, Real-time data processing&#x27;</span>,</span><br><span class="line">      <span class="attr">reason</span>: <span class="string">&#x27;Manual control needed for optimal performance&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">complexStateLogic</span>: &#123;</span><br><span class="line">      <span class="attr">example</span>: <span class="string">&#x27;Multi-step form validation, Complex reducers&#x27;</span>,</span><br><span class="line">      <span class="attr">reason</span>: <span class="string">&#x27;Stability required for consistent behavior&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">recursiveComponents</span>: &#123;</span><br><span class="line">      <span class="attr">example</span>: <span class="string">&#x27;Tree structures, Nested menus&#x27;</span>,</span><br><span class="line">      <span class="attr">reason</span>: <span class="string">&#x27;Prevent infinite re-rendering cascades&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional Usage (Requires Testing Validation)</span></span><br><span class="line">  <span class="attr">optional</span>: &#123;</span><br><span class="line">    <span class="attr">moderateComplexity</span>: &#123;</span><br><span class="line">      <span class="attr">example</span>: <span class="string">&#x27;Business logic with multiple dependencies&#x27;</span>,</span><br><span class="line">      <span class="attr">reason</span>: <span class="string">&#x27;React Compiler may or may not optimize effectively&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">customHooks</span>: &#123;</span><br><span class="line">      <span class="attr">example</span>: <span class="string">&#x27;Complex custom hooks with internal state&#x27;</span>,</span><br><span class="line">      <span class="attr">reason</span>: <span class="string">&#x27;Depends on hook complexity and usage patterns&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Not Recommended (Let React Compiler Handle)</span></span><br><span class="line">  <span class="attr">notRecommended</span>: &#123;</span><br><span class="line">    <span class="attr">simpleEventHandlers</span>: &#123;</span><br><span class="line">      <span class="attr">example</span>: <span class="string">&#x27;Basic onClick, onChange handlers&#x27;</span>,</span><br><span class="line">      <span class="attr">reason</span>: <span class="string">&#x27;React Compiler handles these well&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">basicDataTransformations</span>: &#123;</span><br><span class="line">      <span class="attr">example</span>: <span class="string">&#x27;Simple map, filter operations&#x27;</span>,</span><br><span class="line">      <span class="attr">reason</span>: <span class="string">&#x27;Automatic optimization is sufficient&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">internalLogic</span>: &#123;</span><br><span class="line">      <span class="attr">example</span>: <span class="string">&#x27;Internal component calculations&#x27;</span>,</span><br><span class="line">      <span class="attr">reason</span>: <span class="string">&#x27;No external API concerns&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Practical decision tool</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shouldUseUseCallback</span>(<span class="params"><span class="attr">scenario</span>: &#123;</span></span><br><span class="line"><span class="params">  hasThirdPartyIntegration: <span class="built_in">boolean</span>;</span></span><br><span class="line"><span class="params">  isPerformanceCritical: <span class="built_in">boolean</span>;</span></span><br><span class="line"><span class="params">  hasComplexDependencies: <span class="built_in">boolean</span>;</span></span><br><span class="line"><span class="params">  isRecursiveComponent: <span class="built_in">boolean</span>;</span></span><br><span class="line"><span class="params">  complexityLevel: <span class="string">&#x27;low&#x27;</span> | <span class="string">&#x27;medium&#x27;</span> | <span class="string">&#x27;high&#x27;</span>;</span></span><br><span class="line"><span class="params">&#125;</span>): <span class="string">&#x27;required&#x27;</span> | <span class="string">&#x27;optional&#x27;</span> | <span class="string">&#x27;avoid&#x27;</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    scenario.<span class="property">hasThirdPartyIntegration</span> ||</span><br><span class="line">    scenario.<span class="property">isPerformanceCritical</span> ||</span><br><span class="line">    scenario.<span class="property">isRecursiveComponent</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;required&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    scenario.<span class="property">complexityLevel</span> === <span class="string">&#x27;high&#x27;</span> ||</span><br><span class="line">    scenario.<span class="property">hasComplexDependencies</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;optional&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;avoid&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Practical application examples</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PracticalExample</span> = &#123;</span><br><span class="line">  <span class="comment">// ✅ Must use useCallback</span></span><br><span class="line">  <span class="attr">required</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    const ChartComponent = (&#123; data, onDataSelect &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="string">      const handleDataSelect = useCallback((selectedData) =&gt; &#123;</span></span><br><span class="line"><span class="string">        // Complex data selection logic</span></span><br><span class="line"><span class="string">        const enriched = enrichDataWithContext(selectedData);</span></span><br><span class="line"><span class="string">        onDataSelect(enriched);</span></span><br><span class="line"><span class="string">      &#125;, [onDataSelect]);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      return &lt;ThirdPartyChart data=&#123;data&#125; onSelect=&#123;handleDataSelect&#125; /&gt;;</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ⚡ Optional useCallback usage (requires testing)</span></span><br><span class="line">  <span class="attr">optional</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    const DataProcessor = (&#123; rawData, filters, transformRules &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="string">      const processData = useCallback((data) =&gt; &#123;</span></span><br><span class="line"><span class="string">        return data</span></span><br><span class="line"><span class="string">          .filter(item =&gt; applyFilters(item, filters))</span></span><br><span class="line"><span class="string">          .map(item =&gt; applyTransforms(item, transformRules));</span></span><br><span class="line"><span class="string">      &#125;, [filters, transformRules]);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      return &lt;DataVisualization data=&#123;processData(rawData)&#125; /&gt;;</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ❌ Avoid using useCallback (let React Compiler handle)</span></span><br><span class="line">  <span class="attr">avoid</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    const SimpleButton = (&#123; label, onClick &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="string">      // No need for useCallback</span></span><br><span class="line"><span class="string">      const handleClick = (event) =&gt; &#123;</span></span><br><span class="line"><span class="string">        event.preventDefault();</span></span><br><span class="line"><span class="string">        onClick();</span></span><br><span class="line"><span class="string">      &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      return &lt;button onClick=&#123;handleClick&#125;&gt;&#123;label&#125;&lt;/button&gt;;</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="When-to-Rely-on-React-Compiler"><a href="#When-to-Rely-on-React-Compiler" class="headerlink" title="When to Rely on React Compiler"></a>When to Rely on React Compiler</h3><p>Clear guidance on React Compiler applicable scenarios:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React Compiler Optimal Use Cases</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ReactCompilerOptimalScenarios</span> = &#123;</span><br><span class="line">  <span class="attr">excellentFor</span>: &#123;</span><br><span class="line">    <span class="attr">simpleComponents</span>: &#123;</span><br><span class="line">      <span class="attr">characteristics</span>: [<span class="string">&#x27;Single responsibility&#x27;</span>, <span class="string">&#x27;Simple state&#x27;</span>, <span class="string">&#x27;Basic interactions&#x27;</span>],</span><br><span class="line">      <span class="attr">example</span>: <span class="string">&#x27;Counter, Toggle, Simple Forms&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">standardPatterns</span>: &#123;</span><br><span class="line">      <span class="attr">characteristics</span>: [<span class="string">&#x27;Common React patterns&#x27;</span>, <span class="string">&#x27;Standard Hook usage&#x27;</span>, <span class="string">&#x27;Simple data flow&#x27;</span>],</span><br><span class="line">      <span class="attr">example</span>: <span class="string">&#x27;CRUD operations, Basic list rendering&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">limitedEffectiveness</span>: &#123;</span><br><span class="line">    <span class="attr">complexBusinessLogic</span>: &#123;</span><br><span class="line">      <span class="attr">characteristics</span>: [<span class="string">&#x27;Multi-step processing&#x27;</span>, <span class="string">&#x27;Complex conditional branches&#x27;</span>, <span class="string">&#x27;Many external dependencies&#x27;</span>],</span><br><span class="line">      <span class="attr">reason</span>: <span class="string">&#x27;Static analysis struggles with complex logic&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">dynamicBehavior</span>: &#123;</span><br><span class="line">      <span class="attr">characteristics</span>: [<span class="string">&#x27;Runtime-determined logic&#x27;</span>, <span class="string">&#x27;Dynamic imports&#x27;</span>, <span class="string">&#x27;Conditional Hooks&#x27;</span>],</span><br><span class="line">      <span class="attr">reason</span>: <span class="string">&#x27;Compile-time analysis cannot predict runtime behavior&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">poorFit</span>: &#123;</span><br><span class="line">    <span class="attr">thirdPartyIntegration</span>: &#123;</span><br><span class="line">      <span class="attr">characteristics</span>: [<span class="string">&#x27;External library callbacks&#x27;</span>, <span class="string">&#x27;Direct DOM manipulation&#x27;</span>, <span class="string">&#x27;WebAPI integration&#x27;</span>],</span><br><span class="line">      <span class="attr">reason</span>: <span class="string">&#x27;Compiler cannot analyze external dependencies&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">performanceHotspots</span>: &#123;</span><br><span class="line">      <span class="attr">characteristics</span>: [<span class="string">&#x27;High-frequency updates&#x27;</span>, <span class="string">&#x27;Large dataset processing&#x27;</span>, <span class="string">&#x27;Real-time computation&#x27;</span>],</span><br><span class="line">      <span class="attr">reason</span>: <span class="string">&#x27;Need manual fine-tuning for optimal performance&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hybrid Strategy: React Compiler + Manual Optimization</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HybridOptimizationStrategy</span> = &#123;</span><br><span class="line">  <span class="attr">approach</span>: <span class="string">&#x27;Use React Compiler for 80% of cases, manual optimization for critical 20%&#x27;</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="attr">implementation</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    const HybridComponent = (&#123; userData, realtimeData, chartConfig &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="string">      // ✅ React Compiler handles: Simple data preparation</span></span><br><span class="line"><span class="string">      const basicUserInfo = &#123;</span></span><br><span class="line"><span class="string">        name: userData.name,</span></span><br><span class="line"><span class="string">        avatar: userData.avatar,</span></span><br><span class="line"><span class="string">        isOnline: userData.status === &#x27;online&#x27;</span></span><br><span class="line"><span class="string">      &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      // ⚡ Manual optimization: Performance-critical real-time data processing</span></span><br><span class="line"><span class="string">      const processRealtimeData = useCallback((data) =&gt; &#123;</span></span><br><span class="line"><span class="string">        return data</span></span><br><span class="line"><span class="string">          .filter(item =&gt; item.timestamp &gt; Date.now() - 30000)</span></span><br><span class="line"><span class="string">          .map(item =&gt; computeMetrics(item))</span></span><br><span class="line"><span class="string">          .sort((a, b) =&gt; b.priority - a.priority);</span></span><br><span class="line"><span class="string">      &#125;, []);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      // ✅ React Compiler handles: simple state updates</span></span><br><span class="line"><span class="string">      const handleUserInteraction = (action) =&gt; &#123;</span></span><br><span class="line"><span class="string">        setUserActions(prev =&gt; [...prev, &#123; action, timestamp: Date.now() &#125;]);</span></span><br><span class="line"><span class="string">      &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      // ⚡ Manual optimization: third-party chart library integration</span></span><br><span class="line"><span class="string">      const handleChartEvents = useCallback((event) =&gt; &#123;</span></span><br><span class="line"><span class="string">        const normalizedEvent = normalizeChartEvent(event, chartConfig);</span></span><br><span class="line"><span class="string">        updateChartState(normalizedEvent);</span></span><br><span class="line"><span class="string">      &#125;, [chartConfig]);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      return (</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;UserProfile info=&#123;basicUserInfo&#125; onInteraction=&#123;handleUserInteraction&#125; /&gt;</span></span><br><span class="line"><span class="string">          &lt;RealtimeChart </span></span><br><span class="line"><span class="string">            data=&#123;processRealtimeData(realtimeData)&#125;</span></span><br><span class="line"><span class="string">            onChartEvent=&#123;handleChartEvents&#125;</span></span><br><span class="line"><span class="string">          /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      );</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Future-Outlook"><a href="#Future-Outlook" class="headerlink" title="Future Outlook"></a>Future Outlook</h2><h3 id="React-Ecosystem-Evolution"><a href="#React-Ecosystem-Evolution" class="headerlink" title="React Ecosystem Evolution"></a>React Ecosystem Evolution</h3><p>The roles of React Compiler and <code>useCallback</code> in the future React ecosystem:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Future Development Trend Predictions</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FutureTrends</span> = &#123;</span><br><span class="line">  <span class="attr">shortTerm</span>: &#123;</span><br><span class="line">    <span class="attr">timeline</span>: <span class="string">&#x27;2025-2026&#x27;</span>,</span><br><span class="line">    <span class="attr">reactCompilerAdoption</span>: <span class="string">&#x27;30-50%&#x27;</span>,</span><br><span class="line">    <span class="attr">useCallbackRelevance</span>: <span class="string">&#x27;High - still essential for complex cases&#x27;</span>,</span><br><span class="line">    <span class="attr">recommendations</span>: [</span><br><span class="line">      <span class="string">&#x27;Gradually introduce React Compiler&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Maintain manual optimization expertise&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Establish hybrid optimization strategies&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">mediumTerm</span>: &#123;</span><br><span class="line">    <span class="attr">timeline</span>: <span class="string">&#x27;2027-2028&#x27;</span>,</span><br><span class="line">    <span class="attr">reactCompilerAdoption</span>: <span class="string">&#x27;60-80%&#x27;</span>,</span><br><span class="line">    <span class="attr">useCallbackRelevance</span>: <span class="string">&#x27;Medium - specialized use cases&#x27;</span>,</span><br><span class="line">    <span class="attr">recommendations</span>: [</span><br><span class="line">      <span class="string">&#x27;React Compiler becomes primary strategy&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;useCallback focuses on edge cases&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Performance analysis tools become more important&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">longTerm</span>: &#123;</span><br><span class="line">    <span class="attr">timeline</span>: <span class="string">&#x27;2029+&#x27;</span>,</span><br><span class="line">    <span class="attr">reactCompilerAdoption</span>: <span class="string">&#x27;80-95%&#x27;</span>,</span><br><span class="line">    <span class="attr">useCallbackRelevance</span>: <span class="string">&#x27;Low - niche scenarios only&#x27;</span>,</span><br><span class="line">    <span class="attr">recommendations</span>: [</span><br><span class="line">      <span class="string">&#x27;React Compiler approaches comprehensive coverage&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Manual optimization becomes advanced skill&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Focus shifts to algorithm and architecture optimization&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Skill Development Recommendations</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">SkillDevelopmentRoadmap</span> = &#123;</span><br><span class="line">  <span class="attr">currentPriorities</span>: &#123;</span><br><span class="line">    <span class="attr">understanding</span>: [</span><br><span class="line">      <span class="string">&#x27;Deep understanding of useCallback working principles&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Master React Compiler capability boundaries&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Establish performance analysis skills&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    </span><br><span class="line">    <span class="attr">practical</span>: [</span><br><span class="line">      <span class="string">&#x27;Ability to identify optimization scenarios&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Third-party library integration experience&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Performance testing and benchmarking&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">futureSkills</span>: &#123;</span><br><span class="line">    <span class="attr">emerging</span>: [</span><br><span class="line">      <span class="string">&#x27;React Compiler configuration and tuning&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Static analysis tool usage&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Compile-time optimization strategies&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    </span><br><span class="line">    <span class="attr">enduring</span>: [</span><br><span class="line">      <span class="string">&#x27;Algorithm and data structure optimization&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;System architecture design&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;User experience performance perception&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Performance-Optimization-Pattern-Trends"><a href="#Performance-Optimization-Pattern-Trends" class="headerlink" title="Performance Optimization Pattern Trends"></a>Performance Optimization Pattern Trends</h3><p>The transition from manual memoization to intelligent compilers:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Performance Optimization Pattern Evolution</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">OptimizationPatternEvolution</span> = &#123;</span><br><span class="line">  <span class="attr">traditionalEra</span>: &#123;</span><br><span class="line">    <span class="attr">period</span>: <span class="string">&#x27;2019-2024&#x27;</span>,</span><br><span class="line">    <span class="attr">characteristics</span>: [</span><br><span class="line">      <span class="string">&#x27;Manual memoization is standard practice&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;useCallback/useMemo widely used&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Developers need deep understanding of render cycles&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    </span><br><span class="line">    <span class="attr">codePattern</span>: <span class="string">`</span></span><br><span class="line"><span class="string">      // Traditional pattern: Manual optimization everywhere</span></span><br><span class="line"><span class="string">      const TraditionalComponent = (&#123; data, filters, onUpdate &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="string">        const filteredData = useMemo(() =&gt; &#123;</span></span><br><span class="line"><span class="string">          return data.filter(item =&gt; applyFilters(item, filters));</span></span><br><span class="line"><span class="string">        &#125;, [data, filters]);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        const handleUpdate = useCallback((updatedItem) =&gt; &#123;</span></span><br><span class="line"><span class="string">          onUpdate(updatedItem);</span></span><br><span class="line"><span class="string">        &#125;, [onUpdate]);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        const processedData = useMemo(() =&gt; &#123;</span></span><br><span class="line"><span class="string">          return filteredData.map(item =&gt; processItem(item));</span></span><br><span class="line"><span class="string">        &#125;, [filteredData]);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        return &lt;DataList data=&#123;processedData&#125; onItemUpdate=&#123;handleUpdate&#125; /&gt;;</span></span><br><span class="line"><span class="string">      &#125;;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">transitionEra</span>: &#123;</span><br><span class="line">    <span class="attr">period</span>: <span class="string">&#x27;2024-2027&#x27;</span>,</span><br><span class="line">    <span class="attr">characteristics</span>: [</span><br><span class="line">      <span class="string">&#x27;React Compiler gradually adopted&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Hybrid optimization strategies become mainstream&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Performance analysis tools become more important&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    </span><br><span class="line">    <span class="attr">codePattern</span>: <span class="string">`</span></span><br><span class="line"><span class="string">      // Transition pattern: Intelligent optimization strategy selection</span></span><br><span class="line"><span class="string">      const TransitionComponent = (&#123; data, filters, onUpdate &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="string">        // React Compiler automatically optimizes simple logic</span></span><br><span class="line"><span class="string">        const basicFiltering = data.filter(item =&gt; item.active);</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        // Manual optimization for complex business logic</span></span><br><span class="line"><span class="string">        const complexProcessing = useCallback((filteredData) =&gt; &#123;</span></span><br><span class="line"><span class="string">          return filteredData.map(item =&gt; &#123;</span></span><br><span class="line"><span class="string">            return applyComplexBusinessRules(item, filters);</span></span><br><span class="line"><span class="string">          &#125;);</span></span><br><span class="line"><span class="string">        &#125;, [filters]);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        const finalData = complexProcessing(basicFiltering);</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        return &lt;SmartDataList data=&#123;finalData&#125; onUpdate=&#123;onUpdate&#125; /&gt;;</span></span><br><span class="line"><span class="string">      &#125;;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">futureEra</span>: &#123;</span><br><span class="line">    <span class="attr">period</span>: <span class="string">&#x27;2027+&#x27;</span>,</span><br><span class="line">    <span class="attr">characteristics</span>: [</span><br><span class="line">      <span class="string">&#x27;React Compiler handles most optimizations&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Developers focus on high-level architecture&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Performance issues mainly at algorithm level&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    </span><br><span class="line">    <span class="attr">codePattern</span>: <span class="string">`</span></span><br><span class="line"><span class="string">      // Future pattern: Compiler-driven optimization</span></span><br><span class="line"><span class="string">      const FutureComponent = (&#123; data, filters, onUpdate &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="string">        // React Compiler automatically handles all standard optimizations</span></span><br><span class="line"><span class="string">        const processedData = data</span></span><br><span class="line"><span class="string">          .filter(item =&gt; applyFilters(item, filters))</span></span><br><span class="line"><span class="string">          .map(item =&gt; processItem(item));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        const handleUpdate = (updatedItem) =&gt; &#123;</span></span><br><span class="line"><span class="string">          // React Compiler automatically stabilizes references</span></span><br><span class="line"><span class="string">          onUpdate(updatedItem);</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // Manual optimization only for extreme performance requirements</span></span><br><span class="line"><span class="string">        const criticalPathOptimization = useCallback((data) =&gt; &#123;</span></span><br><span class="line"><span class="string">          return highPerformanceAlgorithm(data);</span></span><br><span class="line"><span class="string">        &#125;, []);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        return (</span></span><br><span class="line"><span class="string">          &lt;NextGenDataList </span></span><br><span class="line"><span class="string">            data=&#123;processedData&#125; </span></span><br><span class="line"><span class="string">            onUpdate=&#123;handleUpdate&#125;</span></span><br><span class="line"><span class="string">            criticalProcessor=&#123;criticalPathOptimization&#125;</span></span><br><span class="line"><span class="string">          /&gt;</span></span><br><span class="line"><span class="string">        );</span></span><br><span class="line"><span class="string">      &#125;;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Developer Skill Transition Guide</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DeveloperTransitionGuide</span> = &#123;</span><br><span class="line">  <span class="attr">fromManualToAutomatic</span>: &#123;</span><br><span class="line">    <span class="attr">challenge</span>: <span class="string">&#x27;Learning when to trust the compiler vs manual control&#x27;</span>,</span><br><span class="line">    <span class="attr">skills</span>: [</span><br><span class="line">      <span class="string">&#x27;Understanding compiler analysis capability boundaries&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Identifying scenarios compiler cannot optimize&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Performance analysis and benchmarking skills&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">newCompetencies</span>: &#123;</span><br><span class="line">    <span class="attr">technical</span>: [</span><br><span class="line">      <span class="string">&#x27;React Compiler configuration and tuning&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Static analysis tool usage&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Compile-time optimization strategy design&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    </span><br><span class="line">    <span class="attr">conceptual</span>: [</span><br><span class="line">      <span class="string">&#x27;Shift from micro-optimization to macro-architecture&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;User-perceived performance vs technical performance&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Balance between maintainability and performance&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The introduction of React 19+ and React Compiler marks the beginning of a new era in React performance optimization. <code>useCallback</code> has evolved from an “essential performance tool” to a “fine-grained control professional tool.”</p><p><strong>Key Points:</strong></p><ol><li><strong>React Compiler Status</strong>: Can optimize simple scenarios, but has limited effectiveness for complex business logic and third-party library integration</li><li><strong>useCallback’s New Positioning</strong>: Focuses on third-party library integration, performance-critical paths, and complex state logic</li><li><strong>Best Strategy</strong>: Adopt a hybrid optimization approach, letting React Compiler handle 80% of standard cases while manually optimizing the critical 20%</li><li><strong>Future Trends</strong>: As React Compiler improves, manual optimization will become a specialized skill, but remains important for the next 3-5 years</li></ol><p><strong>Practical Recommendations:</strong></p><ul><li>Prioritize React Compiler in new projects while maintaining <code>useCallback</code> knowledge</li><li>Use progressive migration in existing projects, prioritizing removal of manual optimizations in simple scenarios</li><li>Establish performance testing systems to validate optimization effects</li><li>Monitor third-party library React Compiler compatibility developments</li></ul><p>The future of React performance optimization is the perfect combination of intelligent compilers and fine-grained manual control. Developers need to master automated tools while maintaining a deep understanding of underlying optimization principles.</p>]]></content>
    
    
    <summary type="html">An in-depth analysis of useCallback Hook evolution in React 19+, exploring performance optimization strategies and best practices in the React Compiler automatic optimization era.</summary>
    
    
    
    <category term="Programming" scheme="https://blog.baduncle.top/categories/Programming/"/>
    
    
    <category term="react-19" scheme="https://blog.baduncle.top/tags/react-19/"/>
    
    <category term="react" scheme="https://blog.baduncle.top/tags/react/"/>
    
    <category term="useCallback" scheme="https://blog.baduncle.top/tags/useCallback/"/>
    
    <category term="react-compiler" scheme="https://blog.baduncle.top/tags/react-compiler/"/>
    
    <category term="memoization" scheme="https://blog.baduncle.top/tags/memoization/"/>
    
    <category term="performance-optimization" scheme="https://blog.baduncle.top/tags/performance-optimization/"/>
    
    <category term="automatic-optimization" scheme="https://blog.baduncle.top/tags/automatic-optimization/"/>
    
    <category term="hooks" scheme="https://blog.baduncle.top/tags/hooks/"/>
    
    <category term="function-memoization" scheme="https://blog.baduncle.top/tags/function-memoization/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript/TypeScript &amp;&amp; vs &amp; Operators Complete Guide From Basics to Practice</title>
    <link href="https://blog.baduncle.top/2025/08/07/javascript-typescript-and-operators-complete-guide/"/>
    <id>https://blog.baduncle.top/2025/08/07/javascript-typescript-and-operators-complete-guide/</id>
    <published>2025-08-07T04:00:00.000Z</published>
    <updated>2025-08-07T16:34:49.381Z</updated>
    
    <content type="html"><![CDATA[<p>As a JavaScript developer, have you ever encountered scenarios like this in your code and felt confused?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// What&#x27;s the difference between these two lines?</span></span><br><span class="line"><span class="keyword">const</span> result1 = user.<span class="property">isActive</span> &amp;&amp; user.<span class="property">hasPermission</span>;</span><br><span class="line"><span class="keyword">const</span> result2 = permissions &amp; <span class="variable constant_">ADMIN_PERMISSION</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Or in TypeScript</span></span><br><span class="line">type <span class="title class_">AdminUser</span> = <span class="title class_">User</span> &amp; <span class="title class_">AdminPermissions</span>;</span><br></pre></td></tr></table></figure><p><code>&amp;&amp;</code> and <code>&amp;</code> look similar, but they serve completely different purposes. One is for logical operations, the other for bitwise operations and type operations. Confusing these two operators can lead to hard-to-debug bugs, and understanding their differences is crucial for writing clear, correct code.</p><span id="more"></span><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li><a href="#-logical-and-operator-deep-dive">&amp;&amp; Logical AND Operator Deep Dive</a><ul><li><a href="#basic-concepts-and-short-circuit-evaluation">Basic Concepts and Short-Circuit Evaluation</a></li><li><a href="#conditional-rendering-in-react">Conditional Rendering in React</a></li><li><a href="#advanced-usage-and-performance-optimization">Advanced Usage and Performance Optimization</a></li></ul></li><li><a href="#-bitwise-and-operator-deep-dive">&amp; Bitwise AND Operator Deep Dive</a><ul><li><a href="#binary-bitwise-operation-principles">Binary Bitwise Operation Principles</a></li><li><a href="#applications-in-permission-systems">Applications in Permission Systems</a></li><li><a href="#typescript-intersection-types">TypeScript Intersection Types</a></li></ul></li><li><a href="#key-differences-comparison-analysis">Key Differences Comparison Analysis</a></li><li><a href="#real-world-use-cases-and-best-practices">Real-World Use Cases and Best Practices</a></li><li><a href="#common-pitfalls-and-error-examples">Common Pitfalls and Error Examples</a></li><li><a href="#performance-considerations-and-optimization-tips">Performance Considerations and Optimization Tips</a></li><li><a href="#summary-and-practice-recommendations">Summary and Practice Recommendations</a></li></ul><h2 id="Logical-AND-Operator-Deep-Dive"><a href="#Logical-AND-Operator-Deep-Dive" class="headerlink" title="&amp;&amp; Logical AND Operator Deep Dive"></a>&amp;&amp; Logical AND Operator Deep Dive</h2><h3 id="Basic-Concepts-and-Short-Circuit-Evaluation"><a href="#Basic-Concepts-and-Short-Circuit-Evaluation" class="headerlink" title="Basic Concepts and Short-Circuit Evaluation"></a>Basic Concepts and Short-Circuit Evaluation</h3><p><code>&amp;&amp;</code> is the logical AND operator in JavaScript, featuring the important characteristic of <strong>short-circuit evaluation</strong>.</p><p><strong>Basic Syntax</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Basic logical evaluation</span></span><br><span class="line"><span class="keyword">const</span> isValid = condition1 &amp;&amp; condition2 &amp;&amp; condition3;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Short-circuit evaluation demonstration</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &amp;&amp; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Won&#x27;t execute&quot;</span>)); <span class="comment">// false, right side not executed</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &amp;&amp; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Will execute&quot;</span>));   <span class="comment">// executes right side, outputs &quot;Will execute&quot;</span></span><br></pre></td></tr></table></figure><p><strong>How it works</strong>:</p><ol><li>Evaluates expressions from left to right</li><li>If left side is <code>falsy</code>, immediately returns left side value without evaluating right side</li><li>If left side is <code>truthy</code>, returns right side value</li></ol><p><strong>Falsy values list</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Falsy values in JavaScript</span></span><br><span class="line"><span class="literal">false</span> &amp;&amp; <span class="string">&quot;Won&#x27;t execute&quot;</span>;     <span class="comment">// false</span></span><br><span class="line"><span class="number">0</span> &amp;&amp; <span class="string">&quot;Won&#x27;t execute&quot;</span>;         <span class="comment">// 0</span></span><br><span class="line"><span class="string">&quot;&quot;</span> &amp;&amp; <span class="string">&quot;Won&#x27;t execute&quot;</span>;        <span class="comment">// &quot;&quot;</span></span><br><span class="line"><span class="literal">null</span> &amp;&amp; <span class="string">&quot;Won&#x27;t execute&quot;</span>;      <span class="comment">// null</span></span><br><span class="line"><span class="literal">undefined</span> &amp;&amp; <span class="string">&quot;Won&#x27;t execute&quot;</span>; <span class="comment">// undefined</span></span><br><span class="line"><span class="title class_">NaN</span> &amp;&amp; <span class="string">&quot;Won&#x27;t execute&quot;</span>;       <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h3 id="Conditional-Rendering-in-React"><a href="#Conditional-Rendering-in-React" class="headerlink" title="Conditional Rendering in React"></a>Conditional Rendering in React</h3><p><code>&amp;&amp;</code> is most commonly used in React for conditional rendering, which is a concise pattern:</p><p><strong>Basic conditional rendering</strong>:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">UserProfile</span> = (<span class="params">&#123; user &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;/* Render name only when user exists */&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;user &amp;&amp; <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    &#123;/* Render image only when user has avatar */&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;user?.avatar &amp;&amp; <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;user.avatar&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;User Avatar&quot;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    &#123;/* Render list only when array has content */&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;user?.hobbies?.length &gt; 0 &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;user.hobbies.map(hobby =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;hobby&#125;</span>&gt;</span>&#123;hobby&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    )&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Complex conditional evaluation</strong>:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Dashboard</span> = (<span class="params">&#123; user, permissions, notifications &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;/* Multi-condition rendering */&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;user &amp;&amp; user.isActive &amp;&amp; permissions.canViewDashboard &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;dashboard&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome, &#123;user.name&#125;!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">        &#123;/* Nested conditions */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;user.isAdmin &amp;&amp; permissions.canManageUsers &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">AdminPanel</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">        &#123;/* Notification-related rendering */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;notifications &amp;&amp; notifications.length &gt; 0 &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NotificationList</span> <span class="attr">notifications</span>=<span class="string">&#123;notifications&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    )&#125;</span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    &#123;/* Error state rendering */&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;!user &amp;&amp; <span class="tag">&lt;<span class="name">LoginPrompt</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;user &amp;&amp; !user.isActive &amp;&amp; <span class="tag">&lt;<span class="name">AccountSuspendedMessage</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Conditional execution pattern</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleUserAction</span> = (<span class="params">user, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Conditional execution: only perform action if user passes validation</span></span><br><span class="line">  user &amp;&amp; </span><br><span class="line">  user.<span class="property">isActive</span> &amp;&amp; </span><br><span class="line">  user.<span class="title function_">hasPermission</span>(action) &amp;&amp; </span><br><span class="line">  <span class="title function_">performAction</span>(action);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Equivalent but more concise than if statement</span></span><br><span class="line">  <span class="comment">// if (user &amp;&amp; user.isActive &amp;&amp; user.hasPermission(action)) &#123;</span></span><br><span class="line">  <span class="comment">//   performAction(action);</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Advanced-Usage-and-Performance-Optimization"><a href="#Advanced-Usage-and-Performance-Optimization" class="headerlink" title="Advanced Usage and Performance Optimization"></a>Advanced Usage and Performance Optimization</h3><p><strong>Chain validation pattern</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">validateUserData</span> = (<span class="params">userData</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Chain validation, stops at first failure</span></span><br><span class="line">  <span class="keyword">return</span> userData &amp;&amp;</span><br><span class="line">         userData.<span class="property">email</span> &amp;&amp;</span><br><span class="line">         userData.<span class="property">email</span>.<span class="title function_">includes</span>(<span class="string">&#x27;@&#x27;</span>) &amp;&amp;</span><br><span class="line">         userData.<span class="property">password</span> &amp;&amp;</span><br><span class="line">         userData.<span class="property">password</span>.<span class="property">length</span> &gt;= <span class="number">8</span> &amp;&amp;</span><br><span class="line">         userData.<span class="property">confirmPassword</span> === userData.<span class="property">password</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Application in React Hook</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useValidatedForm</span> = (<span class="params">formData</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> isValid = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> </span><br><span class="line">    formData &amp;&amp;</span><br><span class="line">    formData.<span class="property">name</span>?.<span class="title function_">trim</span>() &amp;&amp;</span><br><span class="line">    formData.<span class="property">email</span>?.<span class="title function_">includes</span>(<span class="string">&#x27;@&#x27;</span>) &amp;&amp;</span><br><span class="line">    formData.<span class="property">phone</span>?.<span class="title function_">match</span>(<span class="regexp">/^\d&#123;10,&#125;$/</span>)</span><br><span class="line">  , [formData]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123; isValid, <span class="attr">canSubmit</span>: isValid &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Combining with Optional Chaining</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">UserActions</span> = (<span class="params">&#123; user &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> handleUserUpdate = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Combine optional chaining and logical AND</span></span><br><span class="line">    user?.<span class="property">isActive</span> &amp;&amp; </span><br><span class="line">    user?.<span class="property">permissions</span>?.<span class="property">canEdit</span> &amp;&amp; </span><br><span class="line">    <span class="title function_">updateUser</span>(user.<span class="property">id</span>);</span><br><span class="line">  &#125;, [user]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* Safe property access and conditional rendering */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;user?.profile?.bio &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;bio&quot;</span>&gt;</span>&#123;user.profile.bio&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">      &#123;user?.settings?.notifications &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">NotificationSettings</span> <span class="attr">settings</span>=<span class="string">&#123;user.settings.notifications&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Performance Optimization Tips</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">ExpensiveComponent</span> = (<span class="params">&#123; data, shouldRender, expensiveCondition &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Check simple conditions first, avoid unnecessary calculations</span></span><br><span class="line">  <span class="keyword">const</span> shouldShow = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> </span><br><span class="line">    shouldRender &amp;&amp; </span><br><span class="line">    data &amp;&amp; </span><br><span class="line">    data.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; </span><br><span class="line">    <span class="title function_">expensiveCondition</span>() <span class="comment">// Execute expensive calculation last</span></span><br><span class="line">  , [shouldRender, data, expensiveCondition]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> shouldShow &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">ComplexVisualization</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Bitwise-AND-Operator-Deep-Dive"><a href="#Bitwise-AND-Operator-Deep-Dive" class="headerlink" title="&amp; Bitwise AND Operator Deep Dive"></a>&amp; Bitwise AND Operator Deep Dive</h2><h3 id="Binary-Bitwise-Operation-Principles"><a href="#Binary-Bitwise-Operation-Principles" class="headerlink" title="Binary Bitwise Operation Principles"></a>Binary Bitwise Operation Principles</h3><p><code>&amp;</code> is the bitwise AND operator that performs bit-level AND operations on the binary representation of numbers.</p><p><strong>Basic working principle</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bitwise operation examples</span></span><br><span class="line"><span class="number">5</span> &amp; <span class="number">3</span>    <span class="comment">// Result: 1</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Breakdown:</span></span><br><span class="line"><span class="comment">5 in binary: 101</span></span><br><span class="line"><span class="comment">3 in binary: 011</span></span><br><span class="line"><span class="comment">Bitwise AND: 001  = 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="number">12</span> &amp; <span class="number">8</span>   <span class="comment">// Result: 8</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Breakdown:</span></span><br><span class="line"><span class="comment">12 in binary: 1100</span></span><br><span class="line"><span class="comment">8  in binary: 1000</span></span><br><span class="line"><span class="comment">Bitwise AND:  1000 = 8</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="number">15</span> &amp; <span class="number">7</span>   <span class="comment">// Result: 7</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Breakdown:</span></span><br><span class="line"><span class="comment">15 in binary: 1111</span></span><br><span class="line"><span class="comment">7  in binary: 0111</span></span><br><span class="line"><span class="comment">Bitwise AND:  0111 = 7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>Common bitwise operation tricks</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Check odd/even numbers (more efficient than % 2)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isEven</span> = (<span class="params">num</span>) =&gt; (num &amp; <span class="number">1</span>) === <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isOdd</span> = (<span class="params">num</span>) =&gt; (num &amp; <span class="number">1</span>) === <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEven</span>(<span class="number">4</span>)); <span class="comment">// true  (4 in binary: 100, last bit is 0)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEven</span>(<span class="number">5</span>)); <span class="comment">// false (5 in binary: 101, last bit is 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Check if number is power of 2</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isPowerOfTwo</span> = (<span class="params">num</span>) =&gt; num &gt; <span class="number">0</span> &amp;&amp; (num &amp; (num - <span class="number">1</span>)) === <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isPowerOfTwo</span>(<span class="number">8</span>));  <span class="comment">// true (8 = 2³)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isPowerOfTwo</span>(<span class="number">6</span>));  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Get lowest bit of a number</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getLowestBit</span> = (<span class="params">num</span>) =&gt; num &amp; (-num);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getLowestBit</span>(<span class="number">12</span>)); <span class="comment">// 4 (12 in binary 1100, lowest bit 1 at position 3, value 4)</span></span><br></pre></td></tr></table></figure><h3 id="Applications-in-Permission-Systems"><a href="#Applications-in-Permission-Systems" class="headerlink" title="Applications in Permission Systems"></a>Applications in Permission Systems</h3><p>Bitwise operations are particularly useful in permission management systems, allowing efficient storage and checking of multiple permissions:</p><p><strong>Permission system design</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Define permission constants (using bit masks)</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PERMISSIONS</span> = &#123;</span><br><span class="line">  <span class="attr">READ</span>: <span class="number">1</span>,      <span class="comment">// 001</span></span><br><span class="line">  <span class="attr">WRITE</span>: <span class="number">2</span>,     <span class="comment">// 010</span></span><br><span class="line">  <span class="attr">DELETE</span>: <span class="number">4</span>,    <span class="comment">// 100</span></span><br><span class="line">  <span class="attr">ADMIN</span>: <span class="number">8</span>,     <span class="comment">// 1000</span></span><br><span class="line">  <span class="attr">EXECUTE</span>: <span class="number">16</span>,  <span class="comment">// 10000</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Permission combinations</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">EDITOR_PERMISSIONS</span> = <span class="variable constant_">PERMISSIONS</span>.<span class="property">READ</span> | <span class="variable constant_">PERMISSIONS</span>.<span class="property">WRITE</span>; <span class="comment">// 3 (011)</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ADMIN_PERMISSIONS</span> = <span class="variable constant_">PERMISSIONS</span>.<span class="property">READ</span> | <span class="variable constant_">PERMISSIONS</span>.<span class="property">WRITE</span> | <span class="variable constant_">PERMISSIONS</span>.<span class="property">DELETE</span> | <span class="variable constant_">PERMISSIONS</span>.<span class="property">ADMIN</span>; <span class="comment">// 15 (1111)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Permission check function</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">hasPermission</span> = (<span class="params">userPermissions, requiredPermission</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (userPermissions &amp; requiredPermission) === requiredPermission;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Practical usage example</span></span><br><span class="line"><span class="keyword">const</span> currentUser = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  <span class="attr">permissions</span>: <span class="number">7</span>  <span class="comment">// 111 (READ + WRITE + DELETE)</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Permission checks</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hasPermission</span>(currentUser.<span class="property">permissions</span>, <span class="variable constant_">PERMISSIONS</span>.<span class="property">READ</span>));   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hasPermission</span>(currentUser.<span class="property">permissions</span>, <span class="variable constant_">PERMISSIONS</span>.<span class="property">WRITE</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hasPermission</span>(currentUser.<span class="property">permissions</span>, <span class="variable constant_">PERMISSIONS</span>.<span class="property">ADMIN</span>));  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Check multiple permissions</span></span><br><span class="line"><span class="keyword">const</span> canEditAndDelete = <span class="title function_">hasPermission</span>(</span><br><span class="line">  currentUser.<span class="property">permissions</span>, </span><br><span class="line">  <span class="variable constant_">PERMISSIONS</span>.<span class="property">WRITE</span> | <span class="variable constant_">PERMISSIONS</span>.<span class="property">DELETE</span></span><br><span class="line">); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>React Permission Control Components</strong>:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">PermissionGate</span> = (<span class="params">&#123; userPermissions, requiredPermissions, children, fallback = <span class="literal">null</span> &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> hasAccess = (userPermissions &amp; requiredPermissions) === requiredPermissions;</span><br><span class="line">  <span class="keyword">return</span> hasAccess ? children : fallback;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserManagement</span> = (<span class="params">&#123; user &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>User Management<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    &#123;/* Only users with READ permission can see the user list */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">PermissionGate</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">userPermissions</span>=<span class="string">&#123;user.permissions&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">requiredPermissions</span>=<span class="string">&#123;PERMISSIONS.READ&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">UserList</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">PermissionGate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    &#123;/* WRITE permission required to show edit button */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">PermissionGate</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">userPermissions</span>=<span class="string">&#123;user.permissions&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">requiredPermissions</span>=<span class="string">&#123;PERMISSIONS.WRITE&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">span</span>&gt;</span>You don&#x27;t have edit permissions<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">EditUserButton</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">PermissionGate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    &#123;/* ADMIN permission required to show admin panel */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">PermissionGate</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">userPermissions</span>=<span class="string">&#123;user.permissions&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">requiredPermissions</span>=<span class="string">&#123;PERMISSIONS.ADMIN&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">AdminPanel</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">PermissionGate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Permission Management Utility Functions</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PermissionManager</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">permissions = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">permissions</span> = permissions;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Grant permission</span></span><br><span class="line">  <span class="title function_">grant</span>(<span class="params">permission</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">permissions</span> |= permission;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Revoke permission</span></span><br><span class="line">  <span class="title function_">revoke</span>(<span class="params">permission</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">permissions</span> &amp;= ~permission;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Check permission</span></span><br><span class="line">  <span class="title function_">has</span>(<span class="params">permission</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="variable language_">this</span>.<span class="property">permissions</span> &amp; permission) === permission;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Get all permission list</span></span><br><span class="line">  <span class="title function_">getPermissionList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> permissionNames = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [name, value] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="variable constant_">PERMISSIONS</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">has</span>(value)) &#123;</span><br><span class="line">        permissionNames.<span class="title function_">push</span>(name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> permissionNames;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Toggle permission</span></span><br><span class="line">  <span class="title function_">toggle</span>(<span class="params">permission</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">permissions</span> ^= permission;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage example</span></span><br><span class="line"><span class="keyword">const</span> userPermissions = <span class="keyword">new</span> <span class="title class_">PermissionManager</span>()</span><br><span class="line">  .<span class="title function_">grant</span>(<span class="variable constant_">PERMISSIONS</span>.<span class="property">READ</span>)</span><br><span class="line">  .<span class="title function_">grant</span>(<span class="variable constant_">PERMISSIONS</span>.<span class="property">WRITE</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userPermissions.<span class="title function_">has</span>(<span class="variable constant_">PERMISSIONS</span>.<span class="property">READ</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userPermissions.<span class="title function_">getPermissionList</span>());   <span class="comment">// [&quot;READ&quot;, &quot;WRITE&quot;]</span></span><br><span class="line"></span><br><span class="line">userPermissions.<span class="title function_">grant</span>(<span class="variable constant_">PERMISSIONS</span>.<span class="property">DELETE</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userPermissions.<span class="title function_">getPermissionList</span>());   <span class="comment">// [&quot;READ&quot;, &quot;WRITE&quot;, &quot;DELETE&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="TypeScript-Intersection-Types"><a href="#TypeScript-Intersection-Types" class="headerlink" title="TypeScript Intersection Types"></a>TypeScript Intersection Types</h3><p>In TypeScript, <code>&amp;</code> is used to create intersection types, combining multiple types into one:</p><p><strong>Basic intersection types</strong>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Basic type definitions</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AdminPermissions</span> &#123;</span><br><span class="line">  <span class="attr">canManageUsers</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">canManageSystem</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Timestamps</span> &#123;</span><br><span class="line">  <span class="attr">createdAt</span>: <span class="title class_">Date</span>;</span><br><span class="line">  <span class="attr">updatedAt</span>: <span class="title class_">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use intersection types for combination</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AdminUser</span> = <span class="title class_">User</span> &amp; <span class="title class_">AdminPermissions</span> &amp; <span class="title class_">Timestamps</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AdminUser now contains all properties from all three interfaces</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">adminUser</span>: <span class="title class_">AdminUser</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&quot;alice@example.com&quot;</span>,</span><br><span class="line">  <span class="attr">canManageUsers</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">canManageSystem</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">createdAt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">  <span class="attr">updatedAt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Complex Business Scenario Applications</strong>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// API response base structure</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ApiResponse</span> &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PaginationInfo</span> &#123;</span><br><span class="line">  <span class="attr">page</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">limit</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">total</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">hasNext</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Different data types</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserData</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">OrderData</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">amount</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">productName</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Combine to create specific API response types</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserListResponse</span> = <span class="title class_">ApiResponse</span> &amp; &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="title class_">UserData</span>[];</span><br><span class="line">&#125; &amp; <span class="title class_">PaginationInfo</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OrderListResponse</span> = <span class="title class_">ApiResponse</span> &amp; &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="title class_">OrderData</span>[];</span><br><span class="line">&#125; &amp; <span class="title class_">PaginationInfo</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SingleUserResponse</span> = <span class="title class_">ApiResponse</span> &amp; &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="title class_">UserData</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage example</span></span><br><span class="line"><span class="keyword">const</span> fetchUsers = <span class="title function_">async</span> (<span class="attr">page</span>: <span class="built_in">number</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">UserListResponse</span>&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/users?page=<span class="subst">$&#123;page&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleUserData</span> = (<span class="params"><span class="attr">response</span>: <span class="title class_">UserListResponse</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// TypeScript now knows response has all properties from combined types</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Status: <span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Total users: <span class="subst">$&#123;response.total&#125;</span>`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`User list:`</span>, response.<span class="property">data</span>.<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">name</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>React Component Props Intersection Type Applications</strong>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Base component Props</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">BaseComponentProps</span> &#123;</span><br><span class="line">  <span class="attr">className</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">children</span>?: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  <span class="attr">testId</span>?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Specific functionality Props</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ClickableProps</span> &#123;</span><br><span class="line">  <span class="attr">onClick</span>: <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">React</span>.<span class="title class_">MouseEvent</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">disabled</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">LoadingProps</span> &#123;</span><br><span class="line">  <span class="attr">isLoading</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">loadingText</span>?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Combine to create specific component Props types</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ButtonProps</span> = <span class="title class_">BaseComponentProps</span> &amp; <span class="title class_">ClickableProps</span> &amp; <span class="title class_">LoadingProps</span> &amp; &#123;</span><br><span class="line">  <span class="attr">variant</span>: <span class="string">&#x27;primary&#x27;</span> | <span class="string">&#x27;secondary&#x27;</span> | <span class="string">&#x27;danger&#x27;</span>;</span><br><span class="line">  <span class="attr">size</span>: <span class="string">&#x27;small&#x27;</span> | <span class="string">&#x27;medium&#x27;</span> | <span class="string">&#x27;large&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LinkButtonProps</span> = <span class="title class_">BaseComponentProps</span> &amp; <span class="title class_">ClickableProps</span> &amp; &#123;</span><br><span class="line">  <span class="attr">href</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">target</span>?: <span class="string">&#x27;_blank&#x27;</span> | <span class="string">&#x27;_self&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Component implementation</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Button</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">ButtonProps</span>&gt; = <span class="function">(<span class="params">&#123; </span></span></span><br><span class="line"><span class="params"><span class="function">  className, </span></span></span><br><span class="line"><span class="params"><span class="function">  children, </span></span></span><br><span class="line"><span class="params"><span class="function">  onClick, </span></span></span><br><span class="line"><span class="params"><span class="function">  disabled = <span class="literal">false</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">  isLoading = <span class="literal">false</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">  loadingText = <span class="string">&quot;Loading...&quot;</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">  variant, </span></span></span><br><span class="line"><span class="params"><span class="function">  size,</span></span></span><br><span class="line"><span class="params"><span class="function">  testId</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">btn</span> <span class="attr">btn-</span>$&#123;<span class="attr">variant</span>&#125; <span class="attr">btn-</span>$&#123;<span class="attr">size</span>&#125; $&#123;<span class="attr">className</span> || &#x27;&#x27;&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">disabled</span>=<span class="string">&#123;disabled</span> || <span class="attr">isLoading</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">data-testid</span>=<span class="string">&#123;testId&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;isLoading ? loadingText : children&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LinkButton</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">LinkButtonProps</span>&gt; = <span class="function">(<span class="params">&#123; </span></span></span><br><span class="line"><span class="params"><span class="function">  className, </span></span></span><br><span class="line"><span class="params"><span class="function">  children, </span></span></span><br><span class="line"><span class="params"><span class="function">  onClick, </span></span></span><br><span class="line"><span class="params"><span class="function">  href, </span></span></span><br><span class="line"><span class="params"><span class="function">  target = <span class="string">&#x27;_self&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  testId</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">btn</span> <span class="attr">btn-link</span> $&#123;<span class="attr">className</span> || &#x27;&#x27;&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">href</span>=<span class="string">&#123;href&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">target</span>=<span class="string">&#123;target&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">data-testid</span>=<span class="string">&#123;testId&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Conditional Types Combined with Intersection Types</strong>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Conditional type utility</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequiredFields</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = T &amp; <span class="title class_">Required</span>&lt;<span class="title class_">Pick</span>&lt;T, K&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Base user type</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">BaseUser</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">phone</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">avatar</span>?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create user types with required fields</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RegisteredUser</span> = <span class="title class_">RequiredFields</span>&lt;<span class="title class_">BaseUser</span>, <span class="string">&#x27;email&#x27;</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">VerifiedUser</span> = <span class="title class_">RequiredFields</span>&lt;<span class="title class_">BaseUser</span>, <span class="string">&#x27;email&#x27;</span> | <span class="string">&#x27;phone&#x27;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage examples</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">processRegisteredUser</span> = (<span class="params"><span class="attr">user</span>: <span class="title class_">RegisteredUser</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// TypeScript ensures email field exists</span></span><br><span class="line">  <span class="title function_">sendWelcomeEmail</span>(user.<span class="property">email</span>); <span class="comment">// No type error</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">processVerifiedUser</span> = (<span class="params"><span class="attr">user</span>: <span class="title class_">VerifiedUser</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// TypeScript ensures both email and phone exist</span></span><br><span class="line">  <span class="title function_">sendSmsVerification</span>(user.<span class="property">phone</span>);</span><br><span class="line">  <span class="title function_">sendEmailVerification</span>(user.<span class="property">email</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Key-Differences-Comparison-Analysis"><a href="#Key-Differences-Comparison-Analysis" class="headerlink" title="Key Differences Comparison Analysis"></a>Key Differences Comparison Analysis</h2><table><thead><tr><th>Feature</th><th><code>&amp;&amp;</code> (Logical AND)</th><th><code>&amp;</code> (Bitwise AND)</th></tr></thead><tbody><tr><td><strong>Primary Purpose</strong></td><td>Logical evaluation, conditional execution</td><td>Bitwise operations, permission management</td></tr><tr><td><strong>TypeScript Purpose</strong></td><td>Logical operations</td><td>Intersection type definition</td></tr><tr><td><strong>Short-circuit Evaluation</strong></td><td>✅ Yes, doesn’t execute right side when left is falsy</td><td>❌ No, always evaluates both sides</td></tr><tr><td><strong>Operation Target</strong></td><td>Any JavaScript value</td><td>Numbers (converted to 32-bit integers)</td></tr><tr><td><strong>Return Value</strong></td><td>Original value (falsy or right side value)</td><td>32-bit integer</td></tr><tr><td><strong>Performance</strong></td><td>Potentially faster (short-circuit feature)</td><td>Bitwise operation, very fast</td></tr><tr><td><strong>Readability</strong></td><td>High (close to natural language)</td><td>Requires understanding binary</td></tr></tbody></table><p><strong>Comparison Examples</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Same input, different results</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a &amp;&amp; b);  <span class="comment">// 3 (logical AND, returns right side value)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a &amp; b);   <span class="comment">// 1 (bitwise AND, 101 &amp; 011 = 001)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Different short-circuit behavior</span></span><br><span class="line"><span class="keyword">let</span> sideEffect = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setSideEffect</span> = (<span class="params"></span>) =&gt; &#123; sideEffect = <span class="literal">true</span>; <span class="keyword">return</span> <span class="literal">true</span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logical AND: short-circuit evaluation</span></span><br><span class="line"><span class="literal">false</span> &amp;&amp; <span class="title function_">setSideEffect</span>(); <span class="comment">// doesn&#x27;t execute setSideEffect</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sideEffect);   <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Bitwise AND: no short-circuit</span></span><br><span class="line">sideEffect = <span class="literal">false</span>;</span><br><span class="line"><span class="number">0</span> &amp; <span class="title function_">setSideEffect</span>();      <span class="comment">// executes setSideEffect</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sideEffect);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>Type Handling Differences</strong>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Logical AND in conditional judgment</span></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> canVote = user &amp;&amp; user.<span class="property">age</span> &gt;= <span class="number">18</span>; <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Bitwise AND in permission system</span></span><br><span class="line"><span class="keyword">const</span> userPermissions = <span class="number">7</span>;  <span class="comment">// 111 (READ | WRITE | DELETE)</span></span><br><span class="line"><span class="keyword">const</span> hasReadAccess = (userPermissions &amp; <span class="variable constant_">PERMISSIONS</span>.<span class="property">READ</span>) !== <span class="number">0</span>; <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TypeScript intersection types</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserWithPermissions</span> = <span class="keyword">typeof</span> user &amp; &#123; <span class="attr">permissions</span>: <span class="built_in">number</span> &#125;;</span><br></pre></td></tr></table></figure><h2 id="Real-World-Use-Cases-and-Best-Practices"><a href="#Real-World-Use-Cases-and-Best-Practices" class="headerlink" title="Real-World Use Cases and Best Practices"></a>Real-World Use Cases and Best Practices</h2><h3 id="Best-Practice-Scenarios"><a href="#Best-Practice-Scenarios" class="headerlink" title="&amp;&amp; Best Practice Scenarios"></a>&amp;&amp; Best Practice Scenarios</h3><p><strong>1. React Conditional Rendering</strong>:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">BlogPost</span> = (<span class="params">&#123; post, user &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;post.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;content&quot;</span>&gt;</span>&#123;post.content&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    &#123;/* Show edit button when user is logged in and is the author */&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;user &amp;&amp; user.id === post.authorId &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> editPost(post.id)&#125;&gt;Edit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    )&#125;</span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    &#123;/* Show comments section when there are comments */&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;post.comments &amp;&amp; post.comments.length &gt; 0 &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">CommentSection</span> <span class="attr">comments</span>=<span class="string">&#123;post.comments&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    )&#125;</span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    &#123;/* Show comment form when user is logged in */&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;user &amp;&amp; <span class="tag">&lt;<span class="name">CommentForm</span> <span class="attr">postId</span>=<span class="string">&#123;post.id&#125;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>2. Pre-API Call Validation</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">useApiCall</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> callApi = <span class="title function_">useCallback</span>(<span class="title function_">async</span> (endpoint, data) =&gt; &#123;</span><br><span class="line">    <span class="comment">// Multiple validations, don&#x27;t make request if any condition fails</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="title function_">getAuthToken</span>();</span><br><span class="line">    <span class="keyword">const</span> isOnline = navigator.<span class="property">onLine</span>;</span><br><span class="line">    </span><br><span class="line">    token &amp;&amp; </span><br><span class="line">    isOnline &amp;&amp; </span><br><span class="line">    endpoint &amp;&amp; </span><br><span class="line">    <span class="title function_">validateData</span>(data) &amp;&amp; </span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">fetch</span>(endpoint, &#123;</span><br><span class="line">      <span class="attr">headers</span>: &#123; <span class="title class_">Authorization</span>: <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span> &#125;,</span><br><span class="line">      <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> callApi;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>3. Form Validation Chain</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">useFormValidation</span> = (<span class="params">formData</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> validationRules = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">email</span>: formData.<span class="property">email</span> &amp;&amp; </span><br><span class="line">           formData.<span class="property">email</span>.<span class="title function_">includes</span>(<span class="string">&#x27;@&#x27;</span>) &amp;&amp; </span><br><span class="line">           formData.<span class="property">email</span>.<span class="property">length</span> &gt; <span class="number">5</span>,</span><br><span class="line">           </span><br><span class="line">    <span class="attr">password</span>: formData.<span class="property">password</span> &amp;&amp; </span><br><span class="line">              formData.<span class="property">password</span>.<span class="property">length</span> &gt;= <span class="number">8</span> &amp;&amp; </span><br><span class="line">              <span class="regexp">/[A-Z]/</span>.<span class="title function_">test</span>(formData.<span class="property">password</span>) &amp;&amp; </span><br><span class="line">              <span class="regexp">/[0-9]/</span>.<span class="title function_">test</span>(formData.<span class="property">password</span>),</span><br><span class="line">              </span><br><span class="line">    <span class="attr">confirmPassword</span>: formData.<span class="property">confirmPassword</span> &amp;&amp; </span><br><span class="line">                     formData.<span class="property">confirmPassword</span> === formData.<span class="property">password</span></span><br><span class="line">  &#125;), [formData]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> isFormValid = validationRules.<span class="property">email</span> &amp;&amp; </span><br><span class="line">                      validationRules.<span class="property">password</span> &amp;&amp; </span><br><span class="line">                      validationRules.<span class="property">confirmPassword</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123; validationRules, isFormValid &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Best-Practice-Scenarios-1"><a href="#Best-Practice-Scenarios-1" class="headerlink" title="&amp; Best Practice Scenarios"></a>&amp; Best Practice Scenarios</h3><p><strong>1. Feature Flag System</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">FEATURES</span> = &#123;</span><br><span class="line">  <span class="attr">DARK_MODE</span>: <span class="number">1</span>,        <span class="comment">// 0001</span></span><br><span class="line">  <span class="attr">NOTIFICATIONS</span>: <span class="number">2</span>,    <span class="comment">// 0010</span></span><br><span class="line">  <span class="attr">ANALYTICS</span>: <span class="number">4</span>,        <span class="comment">// 0100</span></span><br><span class="line">  <span class="attr">PREMIUM_CONTENT</span>: <span class="number">8</span>,  <span class="comment">// 1000</span></span><br><span class="line">  <span class="attr">BETA_FEATURES</span>: <span class="number">16</span>    <span class="comment">// 10000</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FeatureManager</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">enabledFeatures = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">features</span> = enabledFeatures;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">enable</span>(<span class="params">feature</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">features</span> |= feature;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">disable</span>(<span class="params">feature</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">features</span> &amp;= ~feature;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">isEnabled</span>(<span class="params">feature</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="variable language_">this</span>.<span class="property">features</span> &amp; feature) !== <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Check if multiple features are enabled</span></span><br><span class="line">  <span class="title function_">hasAllFeatures</span>(<span class="params">...features</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> combinedFeatures = features.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, feature</span>) =&gt;</span> acc | feature, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> (<span class="variable language_">this</span>.<span class="property">features</span> &amp; combinedFeatures) === combinedFeatures;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage example</span></span><br><span class="line"><span class="keyword">const</span> userFeatures = <span class="keyword">new</span> <span class="title class_">FeatureManager</span>()</span><br><span class="line">  .<span class="title function_">enable</span>(<span class="variable constant_">FEATURES</span>.<span class="property">DARK_MODE</span>)</span><br><span class="line">  .<span class="title function_">enable</span>(<span class="variable constant_">FEATURES</span>.<span class="property">NOTIFICATIONS</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage in React components</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">FeatureToggle</span> = (<span class="params">&#123; feature, children &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> featureManager = <span class="title function_">useContext</span>(<span class="title class_">FeatureContext</span>);</span><br><span class="line">  <span class="keyword">return</span> featureManager.<span class="title function_">isEnabled</span>(feature) ? children : <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">FeatureToggle</span> <span class="attr">feature</span>=<span class="string">&#123;FEATURES.DARK_MODE&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">DarkModeToggle</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">FeatureToggle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">FeatureToggle</span> <span class="attr">feature</span>=<span class="string">&#123;FEATURES.PREMIUM_CONTENT&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">PremiumSection</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">FeatureToggle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>2. State Flag Management</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">STATUS_FLAGS</span> = &#123;</span><br><span class="line">  <span class="attr">LOADING</span>: <span class="number">1</span>,     <span class="comment">// 0001</span></span><br><span class="line">  <span class="attr">ERROR</span>: <span class="number">2</span>,       <span class="comment">// 0010</span></span><br><span class="line">  <span class="attr">SUCCESS</span>: <span class="number">4</span>,     <span class="comment">// 0100</span></span><br><span class="line">  <span class="attr">DIRTY</span>: <span class="number">8</span>,       <span class="comment">// 1000</span></span><br><span class="line">  <span class="attr">VALIDATED</span>: <span class="number">16</span>   <span class="comment">// 10000</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useAsyncState</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [flags, setFlags] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> setFlag = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">flag</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setFlags</span>(<span class="function"><span class="params">prev</span> =&gt;</span> prev | flag);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> clearFlag = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">flag</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setFlags</span>(<span class="function"><span class="params">prev</span> =&gt;</span> prev &amp; ~flag);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> hasFlag = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">flag</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (flags &amp; flag) !== <span class="number">0</span>;</span><br><span class="line">  &#125;, [flags]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">isLoading</span>: <span class="title function_">hasFlag</span>(<span class="variable constant_">STATUS_FLAGS</span>.<span class="property">LOADING</span>),</span><br><span class="line">    <span class="attr">hasError</span>: <span class="title function_">hasFlag</span>(<span class="variable constant_">STATUS_FLAGS</span>.<span class="property">ERROR</span>),</span><br><span class="line">    <span class="attr">isSuccess</span>: <span class="title function_">hasFlag</span>(<span class="variable constant_">STATUS_FLAGS</span>.<span class="property">SUCCESS</span>),</span><br><span class="line">    <span class="attr">isDirty</span>: <span class="title function_">hasFlag</span>(<span class="variable constant_">STATUS_FLAGS</span>.<span class="property">DIRTY</span>),</span><br><span class="line">    <span class="attr">isValidated</span>: <span class="title function_">hasFlag</span>(<span class="variable constant_">STATUS_FLAGS</span>.<span class="property">VALIDATED</span>),</span><br><span class="line">    setFlag,</span><br><span class="line">    clearFlag,</span><br><span class="line">    <span class="attr">reset</span>: <span class="function">() =&gt;</span> <span class="title function_">setFlags</span>(<span class="number">0</span>)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>3. TypeScript Complex Type Combinations</strong>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Build complex business object types</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">DatabaseEntity</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">createdAt</span>: <span class="title class_">Date</span>;</span><br><span class="line">  <span class="attr">updatedAt</span>: <span class="title class_">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Auditable</span> &#123;</span><br><span class="line">  <span class="attr">createdBy</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">updatedBy</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">version</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SoftDeletable</span> &#123;</span><br><span class="line">  <span class="attr">deletedAt</span>?: <span class="title class_">Date</span>;</span><br><span class="line">  <span class="attr">deletedBy</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">isDeleted</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Combine to create complete entity types</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">BaseEntity</span> = <span class="title class_">DatabaseEntity</span> &amp; <span class="title class_">Auditable</span> &amp; <span class="title class_">SoftDeletable</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Specific business entities</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserEntity</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">role</span>: <span class="string">&#x27;admin&#x27;</span> | <span class="string">&#x27;user&#x27;</span> | <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">OrderEntity</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">totalAmount</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&#x27;pending&#x27;</span> | <span class="string">&#x27;paid&#x27;</span> | <span class="string">&#x27;shipped&#x27;</span> | <span class="string">&#x27;completed&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Factory function to create entities with base fields</span></span><br><span class="line"><span class="keyword">const</span> createEntity = &lt;T&gt;(<span class="attr">data</span>: T): T &amp; <span class="function"><span class="params">BaseEntity</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">const</span> currentUser = <span class="title function_">getCurrentUser</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...data,</span><br><span class="line">    <span class="attr">id</span>: <span class="title function_">generateId</span>(),</span><br><span class="line">    <span class="attr">createdAt</span>: now,</span><br><span class="line">    <span class="attr">updatedAt</span>: now,</span><br><span class="line">    <span class="attr">createdBy</span>: currentUser.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">updatedBy</span>: currentUser.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">version</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">isDeleted</span>: <span class="literal">false</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Common-Pitfalls-and-Error-Examples"><a href="#Common-Pitfalls-and-Error-Examples" class="headerlink" title="Common Pitfalls and Error Examples"></a>Common Pitfalls and Error Examples</h2><h3 id="Common-Pitfalls-of-Operator"><a href="#Common-Pitfalls-of-Operator" class="headerlink" title="Common Pitfalls of &amp;&amp; Operator"></a>Common Pitfalls of &amp;&amp; Operator</h3><p><strong>1. The Number 0 Trap</strong>:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ Error: renders number 0 when items.length is 0</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ItemList</span> = (<span class="params">&#123; items &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;items.length &amp;&amp; <span class="tag">&lt;<span class="name">div</span>&gt;</span>Found &#123;items.length&#125; items<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;/* When items.length is 0, &quot;0&quot; will be displayed on the page */&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ Correct: explicitly check greater than 0</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ItemList</span> = (<span class="params">&#123; items &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;items.length &gt; 0 &amp;&amp; <span class="tag">&lt;<span class="name">div</span>&gt;</span>Found &#123;items.length&#125; items<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ Or convert to boolean</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ItemList</span> = (<span class="params">&#123; items &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;Boolean(items.length) &amp;&amp; <span class="tag">&lt;<span class="name">div</span>&gt;</span>Found &#123;items.length&#125; items<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>2. Empty String Problem</strong>:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ Error: empty string causes unexpected rendering behavior</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserProfile</span> = (<span class="params">&#123; user &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;user.bio &amp;&amp; <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;bio&quot;</span>&gt;</span>&#123;user.bio&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;/* If user.bio is empty string &quot;&quot;, it won&#x27;t render, which might not be expected */&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ Correct: explicitly check non-empty string</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserProfile</span> = (<span class="params">&#123; user &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;user.bio &amp;&amp; user.bio.trim() &amp;&amp; <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;bio&quot;</span>&gt;</span>&#123;user.bio&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ Or provide default value</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserProfile</span> = (<span class="params">&#123; user &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;(user.bio || &quot;No bio available&quot;) &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;bio&quot;</span>&gt;</span>&#123;user.bio || &quot;No bio available&quot;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    )&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>3. Unexpected Side Effect Execution</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ Dangerous: may cause unexpected side effects</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">incrementCount</span> = (<span class="params"></span>) =&gt; ++count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = someCondition &amp;&amp; <span class="title function_">incrementCount</span>();</span><br><span class="line"><span class="comment">// If someCondition is truthy, count will be incremented</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ Safe: use explicit conditional statement</span></span><br><span class="line"><span class="keyword">if</span> (someCondition) &#123;</span><br><span class="line">  count = <span class="title function_">incrementCount</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Common-Errors-with-Operator"><a href="#Common-Errors-with-Operator" class="headerlink" title="Common Errors with &amp; Operator"></a>Common Errors with &amp; Operator</h3><p><strong>1. Misusing Bitwise Operations in Logical Judgments</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ Error: misusing bitwise operation for logical judgment</span></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">isActive</span>: <span class="literal">true</span>, <span class="attr">hasPermission</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (user.<span class="property">isActive</span> &amp; user.<span class="property">hasPermission</span>) &#123;  <span class="comment">// Error!</span></span><br><span class="line">  <span class="comment">// Boolean values are converted to numbers for bitwise operation</span></span><br><span class="line">  <span class="comment">// true &amp; true becomes 1 &amp; 1 = 1, result is truthy, appears &quot;correct&quot;</span></span><br><span class="line">  <span class="comment">// But false &amp; true becomes 0 &amp; 1 = 0, result is falsy</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;User can access&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ Correct: use logical operator</span></span><br><span class="line"><span class="keyword">if</span> (user.<span class="property">isActive</span> &amp;&amp; user.<span class="property">hasPermission</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;User can access&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. Performance Misconceptions</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ Misconception: thinking bitwise operations are always faster</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">checkMultipleConditions</span> = (<span class="params">a, b, c, d</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Bitwise operations don&#x27;t short-circuit, even if a is 0, b(), c(), d() will still be calculated</span></span><br><span class="line">  <span class="keyword">return</span> a &amp; <span class="title function_">b</span>() &amp; <span class="title function_">c</span>() &amp; <span class="title function_">d</span>();  <span class="comment">// All functions will execute</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ Correct: use short-circuit feature of logical operators in logical judgments</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">checkMultipleConditions</span> = (<span class="params">a, b, c, d</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> a &amp;&amp; <span class="title function_">b</span>() &amp;&amp; <span class="title function_">c</span>() &amp;&amp; <span class="title function_">d</span>();  <span class="comment">// If a is falsy, subsequent functions won&#x27;t execute</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>3. TypeScript Intersection Type Conflicts</strong>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ Problem: intersection type with property conflicts</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TypeA</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TypeB</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">number</span>;  <span class="comment">// Conflicts with value type in TypeA</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ConflictType</span> = <span class="title class_">TypeA</span> &amp; <span class="title class_">TypeB</span>;</span><br><span class="line"><span class="comment">// ConflictType.value type is string &amp; number, which is actually never</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ Solution 1: rename properties</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TypeA</span> &#123;</span><br><span class="line">  <span class="attr">stringValue</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TypeB</span> &#123;</span><br><span class="line">  <span class="attr">numberValue</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ClearType</span> = <span class="title class_">TypeA</span> &amp; <span class="title class_">TypeB</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ Solution 2: use union types</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">FlexibleType</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Performance-Considerations-and-Optimization-Tips"><a href="#Performance-Considerations-and-Optimization-Tips" class="headerlink" title="Performance Considerations and Optimization Tips"></a>Performance Considerations and Optimization Tips</h2><h3 id="Performance-Optimization-for-Logical-Operators"><a href="#Performance-Optimization-for-Logical-Operators" class="headerlink" title="Performance Optimization for Logical Operators"></a>Performance Optimization for Logical Operators</h3><p><strong>1. Utilize Short-Circuit Evaluation for Performance Optimization</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✅ Good practice: put simple conditions first</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">expensiveOperation</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Simulate expensive calculation</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">someComplexCalculation</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check simple conditions first, avoid unnecessary expensive calculations</span></span><br><span class="line"><span class="keyword">const</span> result = isEnabled &amp;&amp; </span><br><span class="line">               hasPermission &amp;&amp; </span><br><span class="line">               <span class="title function_">expensiveOperation</span>() &amp;&amp; </span><br><span class="line">               <span class="title function_">anotherExpensiveCheck</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ❌ Avoid: expensive operations first</span></span><br><span class="line"><span class="keyword">const</span> badResult = <span class="title function_">expensiveOperation</span>() &amp;&amp; </span><br><span class="line">                  isEnabled &amp;&amp; </span><br><span class="line">                  hasPermission;</span><br></pre></td></tr></table></figure><p><strong>2. Conditional Rendering Optimization in React</strong>:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">OptimizedComponent</span> = (<span class="params">&#123; user, data, shouldRender &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Use useMemo to avoid recalculation on every render</span></span><br><span class="line">  <span class="keyword">const</span> canRenderExpensiveComponent = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> </span><br><span class="line">    shouldRender &amp;&amp; </span><br><span class="line">    user &amp;&amp; </span><br><span class="line">    user.<span class="property">isActive</span> &amp;&amp; </span><br><span class="line">    data &amp;&amp; </span><br><span class="line">    data.<span class="property">length</span> &gt; <span class="number">0</span></span><br><span class="line">  , [shouldRender, user?.<span class="property">isActive</span>, data?.<span class="property">length</span>]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* Simple conditional rendering */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;user &amp;&amp; <span class="tag">&lt;<span class="name">UserAvatar</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">      &#123;/* Complex conditions, using pre-calculated value */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;canRenderExpensiveComponent &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ExpensiveDataVisualization</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Performance-Characteristics-of-Bitwise-Operations"><a href="#Performance-Characteristics-of-Bitwise-Operations" class="headerlink" title="Performance Characteristics of Bitwise Operations"></a>Performance Characteristics of Bitwise Operations</h3><p><strong>1. Efficient Permission Checking Implementation</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HighPerformancePermissionChecker</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">userPermissions</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">permissions</span> = userPermissions;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Bitwise check, very fast</span></span><br><span class="line">  <span class="title function_">hasPermission</span>(<span class="params">permission</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="variable language_">this</span>.<span class="property">permissions</span> &amp; permission) !== <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Check multiple permissions, single bitwise operation</span></span><br><span class="line">  <span class="title function_">hasAllPermissions</span>(<span class="params">permissionMask</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="variable language_">this</span>.<span class="property">permissions</span> &amp; permissionMask) === permissionMask;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Check if has any permission</span></span><br><span class="line">  <span class="title function_">hasAnyPermission</span>(<span class="params">permissionMask</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="variable language_">this</span>.<span class="property">permissions</span> &amp; permissionMask) !== <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage example</span></span><br><span class="line"><span class="keyword">const</span> checker = <span class="keyword">new</span> <span class="title class_">HighPerformancePermissionChecker</span>(userPermissions);</span><br><span class="line"></span><br><span class="line"><span class="comment">// All these operations are O(1) time complexity</span></span><br><span class="line"><span class="keyword">const</span> canRead = checker.<span class="title function_">hasPermission</span>(<span class="variable constant_">PERMISSIONS</span>.<span class="property">READ</span>);</span><br><span class="line"><span class="keyword">const</span> canEdit = checker.<span class="title function_">hasAllPermissions</span>(<span class="variable constant_">PERMISSIONS</span>.<span class="property">READ</span> | <span class="variable constant_">PERMISSIONS</span>.<span class="property">WRITE</span>);</span><br><span class="line"><span class="keyword">const</span> hasBasicAccess = checker.<span class="title function_">hasAnyPermission</span>(<span class="variable constant_">PERMISSIONS</span>.<span class="property">READ</span> | <span class="variable constant_">PERMISSIONS</span>.<span class="property">WRITE</span>);</span><br></pre></td></tr></table></figure><p><strong>2. Batch Processing of Feature Flags</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Efficient batch enable/disable of features</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FeatureFlagManager</span> = &#123;</span><br><span class="line">  <span class="comment">// Efficient method to enable multiple features</span></span><br><span class="line">  <span class="attr">enableMultiple</span>: <span class="function">(<span class="params">currentFlags, ...features</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> combinedFeatures = features.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, feature</span>) =&gt;</span> acc | feature, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> currentFlags | combinedFeatures;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Disable multiple features</span></span><br><span class="line">  <span class="attr">disableMultiple</span>: <span class="function">(<span class="params">currentFlags, ...features</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> combinedFeatures = features.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, feature</span>) =&gt;</span> acc | feature, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> currentFlags &amp; ~combinedFeatures;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Toggle multiple features</span></span><br><span class="line">  <span class="attr">toggleMultiple</span>: <span class="function">(<span class="params">currentFlags, ...features</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> combinedFeatures = features.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, feature</span>) =&gt;</span> acc | feature, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> currentFlags ^ combinedFeatures;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Summary-and-Practice-Recommendations"><a href="#Summary-and-Practice-Recommendations" class="headerlink" title="Summary and Practice Recommendations"></a>Summary and Practice Recommendations</h2><h3 id="Quick-Decision-Guide"><a href="#Quick-Decision-Guide" class="headerlink" title="Quick Decision Guide"></a>Quick Decision Guide</h3><p><strong>When to use <code>&amp;&amp;</code></strong>:</p><ul><li>✅ Conditional rendering (React components)</li><li>✅ Conditional execution (validation before function calls)</li><li>✅ Form validation chains</li><li>✅ Multiple checks before API calls</li><li>✅ Scenarios requiring short-circuit evaluation</li></ul><p><strong>When to use <code>&amp;</code></strong>:</p><ul><li>✅ Permission management systems</li><li>✅ Feature flags</li><li>✅ State flag management</li><li>✅ Bitwise operations in mathematical calculations</li><li>✅ TypeScript type combinations</li></ul><h3 id="Best-Practices-Summary"><a href="#Best-Practices-Summary" class="headerlink" title="Best Practices Summary"></a>Best Practices Summary</h3><p><strong>Logical Operator Best Practices</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✅ Recommended patterns</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SafeComponent</span> = (<span class="params">&#123; data, user, loading &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;/* Explicit condition checks */&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;data &amp;&amp; data.length &gt; 0 &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">DataList</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    )&#125;</span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    &#123;/* Avoid falsy value traps */&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;user?.name?.trim() &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome, &#123;user.name&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    )&#125;</span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    &#123;/* Complex condition pre-calculation */&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;!loading &amp;&amp; user &amp;&amp; user.isActive &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ActiveUserContent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    )&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Bitwise Operation Best Practices</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✅ Clear bitwise operation design</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PERMISSIONS</span> = &#123;</span><br><span class="line">  <span class="attr">READ</span>: <span class="number">1</span> &lt;&lt; <span class="number">0</span>,    <span class="comment">// 1</span></span><br><span class="line">  <span class="attr">WRITE</span>: <span class="number">1</span> &lt;&lt; <span class="number">1</span>,   <span class="comment">// 2  </span></span><br><span class="line">  <span class="attr">DELETE</span>: <span class="number">1</span> &lt;&lt; <span class="number">2</span>,  <span class="comment">// 4</span></span><br><span class="line">  <span class="attr">ADMIN</span>: <span class="number">1</span> &lt;&lt; <span class="number">3</span>    <span class="comment">// 8</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PermissionSystem</span> = &#123;</span><br><span class="line">  <span class="attr">check</span>: <span class="function">(<span class="params">userPerms, requiredPerm</span>) =&gt;</span> (userPerms &amp; requiredPerm) !== <span class="number">0</span>,</span><br><span class="line">  <span class="attr">grant</span>: <span class="function">(<span class="params">userPerms, newPerm</span>) =&gt;</span> userPerms | newPerm,</span><br><span class="line">  <span class="attr">revoke</span>: <span class="function">(<span class="params">userPerms, removePerm</span>) =&gt;</span> userPerms &amp; ~removePerm</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>TypeScript Type Best Practices</strong>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✅ Clear intersection type design</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">BaseProps</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">className</span>?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ClickableProps</span> &#123;</span><br><span class="line">  <span class="attr">onClick</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">LoadingProps</span> &#123;</span><br><span class="line">  <span class="attr">isLoading</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Maintain clarity when combining</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">InteractiveButtonProps</span> = <span class="title class_">BaseProps</span> &amp; <span class="title class_">ClickableProps</span> &amp; <span class="title class_">LoadingProps</span>;</span><br></pre></td></tr></table></figure><h3 id="Debugging-Tips"><a href="#Debugging-Tips" class="headerlink" title="Debugging Tips"></a>Debugging Tips</h3><p><strong>Logical Operator Debugging</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add intermediate variables for easy debugging</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">debugConditionCheck</span> = (<span class="params">user, permissions, feature</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> hasUser = !!user;</span><br><span class="line">  <span class="keyword">const</span> hasPermissions = !!permissions;</span><br><span class="line">  <span class="keyword">const</span> featureEnabled = !!feature?.<span class="property">enabled</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Debug info:&#x27;</span>, &#123; hasUser, hasPermissions, featureEnabled &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> hasUser &amp;&amp; hasPermissions &amp;&amp; featureEnabled;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Bitwise Operation Debugging</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bitwise operation debugging helper function</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">debugBitwise</span> = (<span class="params">value, label</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;label&#125;</span>: <span class="subst">$&#123;value&#125;</span> (binary: <span class="subst">$&#123;value.toString(<span class="number">2</span>).padStart(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>)`</span>);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">checkPermission</span> = (<span class="params">userPerms, required</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">debugBitwise</span>(userPerms, <span class="string">&#x27;User permissions&#x27;</span>);</span><br><span class="line">  <span class="title function_">debugBitwise</span>(required, <span class="string">&#x27;Required permissions&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> result = userPerms &amp; required;</span><br><span class="line">  <span class="title function_">debugBitwise</span>(result, <span class="string">&#x27;Operation result&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> result !== <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Memory-Aids"><a href="#Memory-Aids" class="headerlink" title="Memory Aids"></a>Memory Aids</h3><ul><li><strong><code>&amp;&amp;</code></strong>: <strong>“Logical AND, short-circuit strong, conditional rendering where it belongs”</strong></li><li><strong><code>&amp;</code></strong>: <strong>“Bitwise AND, permission king, TypeScript intersection bring”</strong></li></ul><p>Remember this simple distinction:</p><ul><li><code>&amp;&amp;</code> is for <strong>evaluation</strong> (logical)</li><li><code>&amp;</code> is for <strong>calculation</strong> (bitwise) and <strong>combination</strong> (types)</li></ul><p>Mastering the correct usage of these two operators will make your JavaScript and TypeScript code clearer, more efficient, and more maintainable!</p>]]></content>
    
    
    <summary type="html">Deep dive into the differences between &amp;&amp; and &amp; operators in JavaScript/TypeScript, covering logical operations, bitwise operations, conditional rendering, type intersections and practical applications</summary>
    
    
    
    <category term="Programming" scheme="https://blog.baduncle.top/categories/Programming/"/>
    
    
    <category term="typescript" scheme="https://blog.baduncle.top/tags/typescript/"/>
    
    <category term="javascript" scheme="https://blog.baduncle.top/tags/javascript/"/>
    
    <category term="operators" scheme="https://blog.baduncle.top/tags/operators/"/>
    
    <category term="logical-operators" scheme="https://blog.baduncle.top/tags/logical-operators/"/>
    
    <category term="bitwise-operators" scheme="https://blog.baduncle.top/tags/bitwise-operators/"/>
    
    <category term="conditional-rendering" scheme="https://blog.baduncle.top/tags/conditional-rendering/"/>
    
    <category term="type-intersections" scheme="https://blog.baduncle.top/tags/type-intersections/"/>
    
    <category term="react-patterns" scheme="https://blog.baduncle.top/tags/react-patterns/"/>
    
  </entry>
  
  <entry>
    <title>From Clojure to JavaScript - Evolution of Higher-Order Functions in Modern Frontend Frameworks</title>
    <link href="https://blog.baduncle.top/2025/08/07/clojure-to-javascript-higher-order-functions-evolution/"/>
    <id>https://blog.baduncle.top/2025/08/07/clojure-to-javascript-higher-order-functions-evolution/</id>
    <published>2025-08-07T03:00:00.000Z</published>
    <updated>2025-08-07T16:02:06.927Z</updated>
    
    <content type="html"><![CDATA[<p>Do you feel a sense of déjà vu when you first see data processing pipelines like this in modern frontend code?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Data processing in React components</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserList</span> = (<span class="params">&#123; users, searchTerm &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> filteredUsers = users</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">name</span>.<span class="title function_">includes</span>(searchTerm))</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> (&#123; ...user, <span class="attr">displayName</span>: user.<span class="property">name</span>.<span class="title function_">toUpperCase</span>() &#125;))</span><br><span class="line">    .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">displayName</span>.<span class="title function_">localeCompare</span>(b.<span class="property">displayName</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;filteredUsers.map(user =&gt; </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span>&gt;</span>&#123;user.displayName&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>If you have a background in Clojure or other functional programming languages, this pattern of method chaining and data transformation might remind you of familiar functional programming concepts. This similarity is no coincidence—modern JavaScript and frontend frameworks heavily borrow from core functional programming ideas.</p><span id="more"></span><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li><a href="#core-concept-comparison-consistency-of-ideas-behind-syntax">Core Concept Comparison: Consistency of Ideas Behind Syntax</a><ul><li><a href="#map-core-of-data-transformation">map: Core of Data Transformation</a></li><li><a href="#filter-declarative-approach-to-conditional-filtering">filter: Declarative Approach to Conditional Filtering</a></li><li><a href="#reduce-powerful-tool-for-data-aggregation">reduce: Powerful Tool for Data Aggregation</a></li></ul></li><li><a href="#functional-programming-practices-in-react">Functional Programming Practices in React</a><ul><li><a href="#array-methods-in-list-rendering">Array Methods in List Rendering</a></li><li><a href="#functional-characteristics-of-react-hooks">Functional Characteristics of React Hooks</a></li><li><a href="#component-composition-patterns">Component Composition Patterns</a></li></ul></li><li><a href="#functional-data-processing-in-tanstack-series">Functional Data Processing in TanStack Series</a><ul><li><a href="#declarative-data-fetching-in-tanstack-query">Declarative Data Fetching in TanStack Query</a></li><li><a href="#data-processing-pipeline-in-tanstack-table">Data Processing Pipeline in TanStack Table</a></li><li><a href="#functional-route-handling-in-tanstack-router">Functional Route Handling in TanStack Router</a></li></ul></li><li><a href="#common-pattern-analysis">Common Pattern Analysis</a><ul><li><a href="#data-transformation-pipelines">Data Transformation Pipelines</a></li><li><a href="#compositional-design">Compositional Design</a></li><li><a href="#declarative-vs-imperative">Declarative vs Imperative</a></li></ul></li><li><a href="#practical-case-study-building-complete-data-processing-pipeline">Practical Case Study: Building Complete Data Processing Pipeline</a></li><li><a href="#best-practices-and-summary">Best Practices and Summary</a></li></ul><h2 id="Core-Concept-Comparison-Consistency-of-Ideas-Behind-Syntax"><a href="#Core-Concept-Comparison-Consistency-of-Ideas-Behind-Syntax" class="headerlink" title="Core Concept Comparison: Consistency of Ideas Behind Syntax"></a>Core Concept Comparison: Consistency of Ideas Behind Syntax</h2><h3 id="map-Core-of-Data-Transformation"><a href="#map-Core-of-Data-Transformation" class="headerlink" title="map: Core of Data Transformation"></a>map: Core of Data Transformation</h3><p>The core philosophy of functional programming is to transform data through functions rather than modifying existing data. The <code>map</code> function embodies the essence of this philosophy.</p><p><strong>map in Clojure</strong>:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; Basic transformation</span></span><br><span class="line">(<span class="name"><span class="built_in">map</span></span> #(<span class="name"><span class="built_in">*</span></span> % <span class="number">2</span>) [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>])  <span class="comment">; =&gt; (2 4 6 8)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; Complex object transformation</span></span><br><span class="line">(<span class="name"><span class="built_in">map</span></span> #(<span class="name"><span class="built_in">assoc</span></span> % <span class="symbol">:display-name</span> (<span class="name"><span class="built_in">str</span></span> (<span class="symbol">:first-name</span> %) <span class="string">&quot; &quot;</span> (<span class="symbol">:last-name</span> %)))</span><br><span class="line">     [&#123;<span class="symbol">:first-name</span> <span class="string">&quot;John&quot;</span> <span class="symbol">:last-name</span> <span class="string">&quot;Doe&quot;</span>&#125;</span><br><span class="line">      &#123;<span class="symbol">:first-name</span> <span class="string">&quot;Jane&quot;</span> <span class="symbol">:last-name</span> <span class="string">&quot;Smith&quot;</span>&#125;])</span><br></pre></td></tr></table></figure><p><strong>Corresponding implementation in JavaScript</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Basic transformation</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>)  <span class="comment">// [2, 4, 6, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Complex object transformation</span></span><br><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">lastName</span>: <span class="string">&quot;Doe&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">firstName</span>: <span class="string">&quot;Jane&quot;</span>, <span class="attr">lastName</span>: <span class="string">&quot;Smith&quot;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">users.<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> (&#123;</span><br><span class="line">  ...user,</span><br><span class="line">  <span class="attr">displayName</span>: <span class="string">`<span class="subst">$&#123;user.firstName&#125;</span> <span class="subst">$&#123;user.lastName&#125;</span>`</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p><strong>Key Insight</strong>: Both languages emphasize <strong>immutability</strong>—the original array&#x2F;sequence remains unchanged, returning new data structures.</p><h3 id="filter-Declarative-Approach-to-Conditional-Filtering"><a href="#filter-Declarative-Approach-to-Conditional-Filtering" class="headerlink" title="filter: Declarative Approach to Conditional Filtering"></a>filter: Declarative Approach to Conditional Filtering</h3><p><strong>filter in Clojure</strong>:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; Simple conditional filtering</span></span><br><span class="line">(<span class="name"><span class="built_in">filter</span></span> even? [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>])  <span class="comment">; =&gt; (2 4 6)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; Complex conditional filtering</span></span><br><span class="line">(<span class="name"><span class="built_in">filter</span></span> #(<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">&gt;</span></span> (<span class="symbol">:age</span> %) <span class="number">18</span>) (<span class="name"><span class="built_in">=</span></span> (<span class="symbol">:status</span> %) <span class="symbol">:active</span>)) users)</span><br></pre></td></tr></table></figure><p><strong>Corresponding implementation in JavaScript</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Simple conditional filtering</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span>)  <span class="comment">// [2, 4, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Complex conditional filtering</span></span><br><span class="line">users.<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">age</span> &gt; <span class="number">18</span> &amp;&amp; user.<span class="property">status</span> === <span class="string">&#x27;active&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>Functional Programming Advantage</strong>: Code reads like natural language description—“filter out elements that satisfy the condition”.</p><h3 id="reduce-Powerful-Tool-for-Data-Aggregation"><a href="#reduce-Powerful-Tool-for-Data-Aggregation" class="headerlink" title="reduce: Powerful Tool for Data Aggregation"></a>reduce: Powerful Tool for Data Aggregation</h3><p><strong>reduce in Clojure</strong>:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; Basic aggregation</span></span><br><span class="line">(<span class="name"><span class="built_in">reduce</span></span> + [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>])  <span class="comment">; =&gt; 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; Complex data structure construction</span></span><br><span class="line">(<span class="name"><span class="built_in">reduce</span></span> (<span class="name"><span class="built_in">fn</span></span> [acc user]</span><br><span class="line">          (<span class="name"><span class="built_in">assoc</span></span> acc (<span class="symbol">:id</span> user) user))</span><br><span class="line">        &#123;&#125;</span><br><span class="line">        users)  <span class="comment">; =&gt; &#123;1 &#123;...&#125;, 2 &#123;...&#125;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Corresponding implementation in JavaScript</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Basic aggregation</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, x</span>) =&gt;</span> sum + x, <span class="number">0</span>)  <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Complex data structure construction</span></span><br><span class="line">users.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, user</span>) =&gt;</span> (&#123;</span><br><span class="line">  ...acc,</span><br><span class="line">  [user.<span class="property">id</span>]: user</span><br><span class="line">&#125;), &#123;&#125;)  <span class="comment">// &#123;1: &#123;...&#125;, 2: &#123;...&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Statistical calculations</span></span><br><span class="line"><span class="keyword">const</span> stats = orders.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, order</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">totalOrders</span>: acc.<span class="property">totalOrders</span> + <span class="number">1</span>,</span><br><span class="line">  <span class="attr">totalRevenue</span>: acc.<span class="property">totalRevenue</span> + order.<span class="property">amount</span>,</span><br><span class="line">  <span class="attr">averageOrder</span>: (acc.<span class="property">totalRevenue</span> + order.<span class="property">amount</span>) / (acc.<span class="property">totalOrders</span> + <span class="number">1</span>)</span><br><span class="line">&#125;), &#123; <span class="attr">totalOrders</span>: <span class="number">0</span>, <span class="attr">totalRevenue</span>: <span class="number">0</span>, <span class="attr">averageOrder</span>: <span class="number">0</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="Functional-Programming-Practices-in-React"><a href="#Functional-Programming-Practices-in-React" class="headerlink" title="Functional Programming Practices in React"></a>Functional Programming Practices in React</h2><h3 id="Array-Methods-in-List-Rendering"><a href="#Array-Methods-in-List-Rendering" class="headerlink" title="Array Methods in List Rendering"></a>Array Methods in List Rendering</h3><p>React’s JSX naturally supports functional programming style, making array methods the preferred tool for building dynamic UIs.</p><p><strong>Basic list rendering</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">TodoList</span> = (<span class="params">&#123; todos &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;todos.map(todo =&gt; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span> <span class="attr">className</span>=<span class="string">&#123;todo.completed</span> ? &#x27;<span class="attr">completed</span>&#x27; <span class="attr">:</span> &#x27;&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;todo.text&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ))&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Combining multiple array methods</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">FilterableProductTable</span> = (<span class="params">&#123; products, searchTerm, inStock &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> filteredProducts = products</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function"><span class="params">product</span> =&gt;</span> </span><br><span class="line">      product.<span class="property">name</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">includes</span>(searchTerm.<span class="title function_">toLowerCase</span>())</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function"><span class="params">product</span> =&gt;</span> inStock ? product.<span class="property">stocked</span> : <span class="literal">true</span>)</span><br><span class="line">    .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">name</span>.<span class="title function_">localeCompare</span>(b.<span class="property">name</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Product List (&#123;filteredProducts.length&#125;)<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;filteredProducts.map(product =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ProductRow</span> <span class="attr">key</span>=<span class="string">&#123;product.id&#125;</span> <span class="attr">product</span>=<span class="string">&#123;product&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Conditional rendering combined with array methods</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">UserDashboard</span> = (<span class="params">&#123; users &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> activeUsers = users.<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">isActive</span>);</span><br><span class="line">  <span class="keyword">const</span> premiumUsers = users.<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">subscription</span> === <span class="string">&#x27;premium&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;activeUsers.length &gt; 0 &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Active Users (&#123;activeUsers.length&#125;)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;activeUsers.map(user =&gt; <span class="tag">&lt;<span class="name">UserCard</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">      &#123;premiumUsers.length &gt; 0 &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Premium Users<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;premiumUsers.map(user =&gt; <span class="tag">&lt;<span class="name">PremiumUserCard</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Functional-Characteristics-of-React-Hooks"><a href="#Functional-Characteristics-of-React-Hooks" class="headerlink" title="Functional Characteristics of React Hooks"></a>Functional Characteristics of React Hooks</h3><p>React Hooks embody the composability and pure function philosophy of functional programming.</p><p><strong>useMemo as a memoized higher-order function</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">ExpensiveComponent</span> = (<span class="params">&#123; items, searchTerm &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Memoizing expensive computations</span></span><br><span class="line">  <span class="keyword">const</span> filteredAndSortedItems = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> </span><br><span class="line">    items</span><br><span class="line">      .<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">name</span>.<span class="title function_">includes</span>(searchTerm))</span><br><span class="line">      .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">priority</span> - b.<span class="property">priority</span>)</span><br><span class="line">      .<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> (&#123; ...item, <span class="attr">displayText</span>: <span class="string">`<span class="subst">$&#123;item.name&#125;</span> (<span class="subst">$&#123;item.category&#125;</span>)`</span> &#125;))</span><br><span class="line">  , [items, searchTerm]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;filteredAndSortedItems.map(item =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ItemCard</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span> <span class="attr">item</span>=<span class="string">&#123;item&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Function composition with custom hooks</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Composing hooks for data fetching and transformation</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useTransformedData</span> = (<span class="params">url, transformer</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>([]);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetchData</span>(url)</span><br><span class="line">      .<span class="title function_">then</span>(transformer)</span><br><span class="line">      .<span class="title function_">then</span>(setData)</span><br><span class="line">      .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> <span class="title function_">setLoading</span>(<span class="literal">false</span>));</span><br><span class="line">  &#125;, [url, transformer]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123; data, loading &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using the composed hook</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: users, loading &#125; = <span class="title function_">useTransformedData</span>(</span><br><span class="line">    <span class="string">&#x27;/api/users&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="params">data</span> =&gt;</span> data</span><br><span class="line">      .<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">isActive</span>)</span><br><span class="line">      .<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> (&#123; ...user, <span class="attr">fullName</span>: <span class="string">`<span class="subst">$&#123;user.firstName&#125;</span> <span class="subst">$&#123;user.lastName&#125;</span>`</span> &#125;))</span><br><span class="line">      .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">fullName</span>.<span class="title function_">localeCompare</span>(b.<span class="property">fullName</span>))</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loading) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">LoadingSpinner</span> /&gt;</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;users.map(user =&gt; <span class="tag">&lt;<span class="name">UserCard</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>useCallback’s higher-order function characteristics</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">SearchableList</span> = (<span class="params">&#123; items &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [searchTerm, setSearchTerm] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Creating a memoized search function</span></span><br><span class="line">  <span class="keyword">const</span> searchFunction = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">term</span>) =&gt;</span> <span class="function">(<span class="params">item</span>) =&gt;</span> </span><br><span class="line">    item.<span class="property">name</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">includes</span>(term.<span class="title function_">toLowerCase</span>()) ||</span><br><span class="line">    item.<span class="property">description</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">includes</span>(term.<span class="title function_">toLowerCase</span>())</span><br><span class="line">  , []);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> filteredItems = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> </span><br><span class="line">    items.<span class="title function_">filter</span>(<span class="title function_">searchFunction</span>(searchTerm))</span><br><span class="line">  , [items, searchTerm, searchFunction]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;searchTerm&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;e</span> =&gt;</span> setSearchTerm(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">        placeholder=&quot;Search...&quot;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      &#123;filteredItems.map(item =&gt; <span class="tag">&lt;<span class="name">ItemCard</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span> <span class="attr">item</span>=<span class="string">&#123;item&#125;</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Component-Composition-Patterns"><a href="#Component-Composition-Patterns" class="headerlink" title="Component Composition Patterns"></a>Component Composition Patterns</h3><p><strong>Children as function pattern (Render Props)</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Generic data fetching component</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DataFetcher</span> = (<span class="params">&#123; url, children &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> [error, setError] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(url)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(setData)</span><br><span class="line">      .<span class="title function_">catch</span>(setError)</span><br><span class="line">      .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> <span class="title function_">setLoading</span>(<span class="literal">false</span>));</span><br><span class="line">  &#125;, [url]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">children</span>(&#123; data, loading, error &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using render props pattern</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserProfile</span> = (<span class="params">&#123; userId &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">DataFetcher</span> <span class="attr">url</span>=<span class="string">&#123;</span>`/<span class="attr">api</span>/<span class="attr">users</span>/$&#123;<span class="attr">userId</span>&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;(&#123; data: user, loading, error &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">      if (loading) return <span class="tag">&lt;<span class="name">LoadingSpinner</span> /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      if (error) return <span class="tag">&lt;<span class="name">ErrorMessage</span> <span class="attr">error</span>=<span class="string">&#123;error&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      if (!user) return <span class="tag">&lt;<span class="name">NotFound</span> /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">      return (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;user.email&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;user.hobbies.map(hobby =&gt; <span class="tag">&lt;<span class="name">Tag</span> <span class="attr">key</span>=<span class="string">&#123;hobby&#125;</span> <span class="attr">text</span>=<span class="string">&#123;hobby&#125;</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      );</span></span><br><span class="line"><span class="language-xml">    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">DataFetcher</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Functional implementation of Higher-Order Components</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Creating an HOC that adds data fetching capability</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">withDataFetching</span> = (<span class="params">url, propName = <span class="string">&#x27;data&#x27;</span></span>) =&gt; <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">WithDataFetching</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">fetch</span>(url)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">        .<span class="title function_">then</span>(setData)</span><br><span class="line">        .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> <span class="title function_">setLoading</span>(<span class="literal">false</span>));</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> enhancedProps = &#123; ...props, [propName]: data, loading &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...enhancedProps</span>&#125; /&gt;</span></span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using HOC</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserList</span> = (<span class="params">&#123; users, loading &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (loading) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">LoadingSpinner</span> /&gt;</span></span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;users?.map(user =&gt; <span class="tag">&lt;<span class="name">UserCard</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">EnhancedUserList</span> = <span class="title function_">withDataFetching</span>(<span class="string">&#x27;/api/users&#x27;</span>, <span class="string">&#x27;users&#x27;</span>)(<span class="title class_">UserList</span>);</span><br></pre></td></tr></table></figure><h2 id="Functional-Data-Processing-in-TanStack-Series"><a href="#Functional-Data-Processing-in-TanStack-Series" class="headerlink" title="Functional Data Processing in TanStack Series"></a>Functional Data Processing in TanStack Series</h2><h3 id="Declarative-Data-Fetching-in-TanStack-Query"><a href="#Declarative-Data-Fetching-in-TanStack-Query" class="headerlink" title="Declarative Data Fetching in TanStack Query"></a>Declarative Data Fetching in TanStack Query</h3><p>TanStack Query abstracts data fetching as declarative configuration, embodying the declarative philosophy of functional programming.</p><p><strong>Basic query with data transformation</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useQuery &#125; <span class="keyword">from</span> <span class="string">&#x27;@tanstack/react-query&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declarative data fetching and transformation</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useUserData</span> = (<span class="params">userId</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&#x27;user&#x27;</span>, userId],</span><br><span class="line">    <span class="attr">queryFn</span>: <span class="function">() =&gt;</span> <span class="title function_">fetchUser</span>(userId),</span><br><span class="line">    <span class="comment">// select function embodies the map philosophy</span></span><br><span class="line">    <span class="attr">select</span>: <span class="function">(<span class="params">userData</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...userData,</span><br><span class="line">      <span class="attr">fullName</span>: <span class="string">`<span class="subst">$&#123;userData.firstName&#125;</span> <span class="subst">$&#123;userData.lastName&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">isActive</span>: userData.<span class="property">status</span> === <span class="string">&#x27;active&#x27;</span> &amp;&amp; userData.<span class="property">lastLogin</span> &gt; <span class="title class_">Date</span>.<span class="title function_">now</span>() - <span class="number">30</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">enabled</span>: !!userId</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserProfile</span> = (<span class="params">&#123; userId &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: user, isLoading, error &#125; = <span class="title function_">useUserData</span>(userId);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (isLoading) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">LoadingSpinner</span> /&gt;</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ErrorMessage</span> <span class="attr">error</span>=<span class="string">&#123;error&#125;</span> /&gt;</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;user.fullName&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">StatusBadge</span> <span class="attr">active</span>=<span class="string">&#123;user.isActive&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Query composition and data aggregation</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Composing multiple queries</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useDashboardData</span> = (<span class="params">userId</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> userQuery = <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&#x27;user&#x27;</span>, userId],</span><br><span class="line">    <span class="attr">queryFn</span>: <span class="function">() =&gt;</span> <span class="title function_">fetchUser</span>(userId)</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> ordersQuery = <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&#x27;orders&#x27;</span>, userId],</span><br><span class="line">    <span class="attr">queryFn</span>: <span class="function">() =&gt;</span> <span class="title function_">fetchUserOrders</span>(userId),</span><br><span class="line">    <span class="attr">enabled</span>: !!userQuery.<span class="property">data</span>,</span><br><span class="line">    <span class="attr">select</span>: <span class="function">(<span class="params">orders</span>) =&gt;</span> orders</span><br><span class="line">      .<span class="title function_">filter</span>(<span class="function"><span class="params">order</span> =&gt;</span> order.<span class="property">status</span> === <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">      .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="keyword">new</span> <span class="title class_">Date</span>(b.<span class="property">createdAt</span>) - <span class="keyword">new</span> <span class="title class_">Date</span>(a.<span class="property">createdAt</span>))</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> statsQuery = <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&#x27;userStats&#x27;</span>, userId],</span><br><span class="line">    <span class="attr">queryFn</span>: <span class="function">() =&gt;</span> <span class="title function_">fetchUserStats</span>(userId),</span><br><span class="line">    <span class="attr">enabled</span>: !!ordersQuery.<span class="property">data</span>,</span><br><span class="line">    <span class="attr">select</span>: <span class="function">(<span class="params">stats</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...stats,</span><br><span class="line">      <span class="attr">averageOrderValue</span>: ordersQuery.<span class="property">data</span>?.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, order</span>) =&gt;</span> sum + order.<span class="property">amount</span>, <span class="number">0</span>) / (ordersQuery.<span class="property">data</span>?.<span class="property">length</span> || <span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">user</span>: userQuery.<span class="property">data</span>,</span><br><span class="line">    <span class="attr">orders</span>: ordersQuery.<span class="property">data</span>,</span><br><span class="line">    <span class="attr">stats</span>: statsQuery.<span class="property">data</span>,</span><br><span class="line">    <span class="attr">loading</span>: userQuery.<span class="property">isLoading</span> || ordersQuery.<span class="property">isLoading</span> || statsQuery.<span class="property">isLoading</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Functional processing in infinite queries</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">useInfiniteUserList</span> = (<span class="params">filters</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useInfiniteQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&#x27;users&#x27;</span>, <span class="string">&#x27;infinite&#x27;</span>, filters],</span><br><span class="line">    <span class="attr">queryFn</span>: <span class="function">(<span class="params">&#123; pageParam = <span class="number">0</span> &#125;</span>) =&gt;</span> <span class="title function_">fetchUsers</span>(&#123; ...filters, <span class="attr">page</span>: pageParam &#125;),</span><br><span class="line">    <span class="attr">select</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">pages</span>: data.<span class="property">pages</span>,</span><br><span class="line">      <span class="comment">// Flatten all page data</span></span><br><span class="line">      <span class="attr">allUsers</span>: data.<span class="property">pages</span>.<span class="title function_">flatMap</span>(<span class="function"><span class="params">page</span> =&gt;</span> page.<span class="property">users</span>),</span><br><span class="line">      <span class="comment">// Apply client-side filtering and sorting</span></span><br><span class="line">      <span class="attr">filteredUsers</span>: data.<span class="property">pages</span></span><br><span class="line">        .<span class="title function_">flatMap</span>(<span class="function"><span class="params">page</span> =&gt;</span> page.<span class="property">users</span>)</span><br><span class="line">        .<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">isActive</span>)</span><br><span class="line">        .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">name</span>.<span class="title function_">localeCompare</span>(b.<span class="property">name</span>))</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">getNextPageParam</span>: <span class="function">(<span class="params">lastPage</span>) =&gt;</span> lastPage.<span class="property">hasNextPage</span> ? lastPage.<span class="property">nextPage</span> : <span class="literal">undefined</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Data-Processing-Pipeline-in-TanStack-Table"><a href="#Data-Processing-Pipeline-in-TanStack-Table" class="headerlink" title="Data Processing Pipeline in TanStack Table"></a>Data Processing Pipeline in TanStack Table</h3><p>TanStack Table provides powerful table functionality through functional column definitions and data processing pipelines.</p><p><strong>Functional data access in column definitions</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createColumnHelper &#125; <span class="keyword">from</span> <span class="string">&#x27;@tanstack/react-table&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> columnHelper = <span class="title function_">createColumnHelper</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> columns = [</span><br><span class="line">  columnHelper.<span class="title function_">accessor</span>(<span class="string">&#x27;firstName&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">header</span>: <span class="string">&#x27;Name&#x27;</span>,</span><br><span class="line">    <span class="comment">// Functional data transformation</span></span><br><span class="line">    <span class="attr">cell</span>: <span class="function">(<span class="params">info</span>) =&gt;</span> info.<span class="title function_">getValue</span>(),</span><br><span class="line">  &#125;),</span><br><span class="line">  columnHelper.<span class="title function_">accessor</span>(</span><br><span class="line">    <span class="comment">// Functional data access</span></span><br><span class="line">    <span class="function">(<span class="params">row</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;row.firstName&#125;</span> <span class="subst">$&#123;row.lastName&#125;</span>`</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;fullName&#x27;</span>,</span><br><span class="line">      <span class="attr">header</span>: <span class="string">&#x27;Full Name&#x27;</span>,</span><br><span class="line">      <span class="attr">cell</span>: <span class="function">(<span class="params">info</span>) =&gt;</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;info.getValue()&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">      ),</span><br><span class="line">    &#125;</span><br><span class="line">  ),</span><br><span class="line">  columnHelper.<span class="title function_">accessor</span>(<span class="string">&#x27;orders&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">header</span>: <span class="string">&#x27;Order Statistics&#x27;</span>,</span><br><span class="line">    <span class="comment">// Complex data processing</span></span><br><span class="line">    <span class="attr">cell</span>: <span class="function">(<span class="params">info</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> orders = info.<span class="title function_">getValue</span>() || [];</span><br><span class="line">      <span class="keyword">const</span> totalOrders = orders.<span class="property">length</span>;</span><br><span class="line">      <span class="keyword">const</span> totalAmount = orders.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, order</span>) =&gt;</span> sum + order.<span class="property">amount</span>, <span class="number">0</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>Orders: &#123;totalOrders&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>Total: $&#123;totalAmount.toFixed(2)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><strong>Advanced filtering and sorting</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">UserTable</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [data] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> [...defaultData]);</span><br><span class="line">  <span class="keyword">const</span> [globalFilter, setGlobalFilter] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> table = <span class="title function_">useReactTable</span>(&#123;</span><br><span class="line">    data,</span><br><span class="line">    columns,</span><br><span class="line">    <span class="comment">// Functional global filtering</span></span><br><span class="line">    <span class="attr">globalFilterFn</span>: <span class="function">(<span class="params">row, columnId, value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> search = value.<span class="title function_">toLowerCase</span>();</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(row.<span class="property">original</span>)</span><br><span class="line">        .<span class="title function_">some</span>(<span class="function"><span class="params">field</span> =&gt;</span> </span><br><span class="line">          <span class="title class_">String</span>(field).<span class="title function_">toLowerCase</span>().<span class="title function_">includes</span>(search)</span><br><span class="line">        );</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">      globalFilter,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onGlobalFilterChange</span>: setGlobalFilter,</span><br><span class="line">    <span class="attr">getCoreRowModel</span>: <span class="title function_">getCoreRowModel</span>(),</span><br><span class="line">    <span class="attr">getFilteredRowModel</span>: <span class="title function_">getFilteredRowModel</span>(),</span><br><span class="line">    <span class="attr">getSortedRowModel</span>: <span class="title function_">getSortedRowModel</span>(),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* Search input */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;globalFilter</span> ?? &#x27;&#x27;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setGlobalFilter(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">        placeholder=&quot;Search all columns...&quot;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">      &#123;/* Table rendering */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;table.getHeaderGroups().map(headerGroup =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">key</span>=<span class="string">&#123;headerGroup.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;headerGroup.headers.map(header =&gt; (</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">th</span> <span class="attr">key</span>=<span class="string">&#123;header.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  &#123;header.isPlaceholder ? null : (</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                      <span class="attr">className</span>=<span class="string">&#123;header.column.getCanSort()</span> ? &#x27;<span class="attr">cursor-pointer</span>&#x27; <span class="attr">:</span> &#x27;&#x27;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                      <span class="attr">onClick</span>=<span class="string">&#123;header.column.getToggleSortingHandler()&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    &gt;</span></span></span><br><span class="line"><span class="language-xml">                      &#123;flexRender(header.column.columnDef.header, header.getContext())&#125;</span></span><br><span class="line"><span class="language-xml">                      &#123;/* Sort indicator */&#125;</span></span><br><span class="line"><span class="language-xml">                      &#123;&#123;</span></span><br><span class="line"><span class="language-xml">                        asc: &#x27; 🔼&#x27;,</span></span><br><span class="line"><span class="language-xml">                        desc: &#x27; 🔽&#x27;,</span></span><br><span class="line"><span class="language-xml">                      &#125;[header.column.getIsSorted() as string] ?? null&#125;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  )&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              ))&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;table.getRowModel().rows.map(row =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">key</span>=<span class="string">&#123;row.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;row.getVisibleCells().map(cell =&gt; (</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">key</span>=<span class="string">&#123;cell.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  &#123;flexRender(cell.column.columnDef.cell, cell.getContext())&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              ))&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Functional-Route-Handling-in-TanStack-Router"><a href="#Functional-Route-Handling-in-TanStack-Router" class="headerlink" title="Functional Route Handling in TanStack Router"></a>Functional Route Handling in TanStack Router</h3><p>TanStack Router provides type-safe route management through functional route configuration.</p><p><strong>Declarative route configuration</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createFileRoute &#125; <span class="keyword">from</span> <span class="string">&#x27;@tanstack/react-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Functional definition of route data preloading</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Route</span> = <span class="title function_">createFileRoute</span>(<span class="string">&#x27;/users/$userId&#x27;</span>)(&#123;</span><br><span class="line">  <span class="comment">// Data preloading function</span></span><br><span class="line">  <span class="attr">loader</span>: <span class="title function_">async</span> (&#123; <span class="attr">params</span>: &#123; userId &#125; &#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [user, orders] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">      <span class="title function_">fetchUser</span>(userId),</span><br><span class="line">      <span class="title function_">fetchUserOrders</span>(userId)</span><br><span class="line">    ]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Functional data processing</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      user,</span><br><span class="line">      <span class="attr">orders</span>: orders</span><br><span class="line">        .<span class="title function_">filter</span>(<span class="function"><span class="params">order</span> =&gt;</span> order.<span class="property">status</span> === <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">        .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="keyword">new</span> <span class="title class_">Date</span>(b.<span class="property">createdAt</span>) - <span class="keyword">new</span> <span class="title class_">Date</span>(a.<span class="property">createdAt</span>)),</span><br><span class="line">      <span class="attr">stats</span>: &#123;</span><br><span class="line">        <span class="attr">totalOrders</span>: orders.<span class="property">length</span>,</span><br><span class="line">        <span class="attr">totalAmount</span>: orders.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, order</span>) =&gt;</span> sum + order.<span class="property">amount</span>, <span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Component definition</span></span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">UserDetail</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UserDetail</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; user, orders, stats &#125; = <span class="title class_">Route</span>.<span class="title function_">useLoaderData</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Total Orders: &#123;stats.totalOrders&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Total Amount: $&#123;stats.totalAmount&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Order History<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;orders.map(order =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">OrderCard</span> <span class="attr">key</span>=<span class="string">&#123;order.id&#125;</span> <span class="attr">order</span>=<span class="string">&#123;order&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Functional processing of route search parameters</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; z &#125; <span class="keyword">from</span> <span class="string">&#x27;zod&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Functional validation and transformation of search parameters</span></span><br><span class="line"><span class="keyword">const</span> userListSearchSchema = z.<span class="title function_">object</span>(&#123;</span><br><span class="line">  <span class="attr">search</span>: z.<span class="title function_">string</span>().<span class="title function_">optional</span>(),</span><br><span class="line">  <span class="attr">status</span>: z.<span class="title function_">enum</span>([<span class="string">&#x27;active&#x27;</span>, <span class="string">&#x27;inactive&#x27;</span>, <span class="string">&#x27;all&#x27;</span>]).<span class="title function_">optional</span>().<span class="title function_">default</span>(<span class="string">&#x27;all&#x27;</span>),</span><br><span class="line">  <span class="attr">page</span>: z.<span class="title function_">number</span>().<span class="title function_">min</span>(<span class="number">1</span>).<span class="title function_">optional</span>().<span class="title function_">default</span>(<span class="number">1</span>),</span><br><span class="line">  <span class="attr">pageSize</span>: z.<span class="title function_">number</span>().<span class="title function_">min</span>(<span class="number">10</span>).<span class="title function_">max</span>(<span class="number">100</span>).<span class="title function_">optional</span>().<span class="title function_">default</span>(<span class="number">20</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Route</span> = <span class="title function_">createFileRoute</span>(<span class="string">&#x27;/users/&#x27;</span>)(&#123;</span><br><span class="line">  <span class="attr">validateSearch</span>: userListSearchSchema,</span><br><span class="line">  <span class="attr">loader</span>: <span class="title function_">async</span> (&#123; search &#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="title function_">fetchUsers</span>(&#123;</span><br><span class="line">      <span class="attr">search</span>: search.<span class="property">search</span>,</span><br><span class="line">      <span class="attr">status</span>: search.<span class="property">status</span> === <span class="string">&#x27;all&#x27;</span> ? <span class="literal">undefined</span> : search.<span class="property">status</span>,</span><br><span class="line">      <span class="attr">page</span>: search.<span class="property">page</span>,</span><br><span class="line">      <span class="attr">pageSize</span>: search.<span class="property">pageSize</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Client-side data processing</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">users</span>: users.<span class="property">data</span>,</span><br><span class="line">      <span class="attr">pagination</span>: users.<span class="property">pagination</span>,</span><br><span class="line">      <span class="comment">// Functional statistical calculation</span></span><br><span class="line">      <span class="attr">stats</span>: users.<span class="property">data</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, user</span>) =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">totalUsers</span>: acc.<span class="property">totalUsers</span> + <span class="number">1</span>,</span><br><span class="line">        <span class="attr">activeUsers</span>: acc.<span class="property">activeUsers</span> + (user.<span class="property">isActive</span> ? <span class="number">1</span> : <span class="number">0</span>),</span><br><span class="line">        <span class="attr">premiumUsers</span>: acc.<span class="property">premiumUsers</span> + (user.<span class="property">subscription</span> === <span class="string">&#x27;premium&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>)</span><br><span class="line">      &#125;), &#123; <span class="attr">totalUsers</span>: <span class="number">0</span>, <span class="attr">activeUsers</span>: <span class="number">0</span>, <span class="attr">premiumUsers</span>: <span class="number">0</span> &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">UserList</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UserList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; users, stats &#125; = <span class="title class_">Route</span>.<span class="title function_">useLoaderData</span>();</span><br><span class="line">  <span class="keyword">const</span> navigate = <span class="title class_">Route</span>.<span class="title function_">useNavigate</span>();</span><br><span class="line">  <span class="keyword">const</span> search = <span class="title class_">Route</span>.<span class="title function_">useSearch</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSearchChange</span> = (<span class="params">newSearch</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">navigate</span>(&#123; </span><br><span class="line">      <span class="attr">search</span>: &#123; ...search, <span class="attr">search</span>: newSearch, <span class="attr">page</span>: <span class="number">1</span> &#125; </span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Total Users: &#123;stats.totalUsers&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Active: &#123;stats.activeUsers&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Premium: &#123;stats.premiumUsers&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;search.search</span> ?? &#x27;&#x27;&#125; </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> handleSearchChange(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">        placeholder=&quot;Search users...&quot;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">      &#123;users.map(user =&gt; <span class="tag">&lt;<span class="name">UserCard</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Common-Pattern-Analysis"><a href="#Common-Pattern-Analysis" class="headerlink" title="Common Pattern Analysis"></a>Common Pattern Analysis</h2><h3 id="Data-Transformation-Pipelines"><a href="#Data-Transformation-Pipelines" class="headerlink" title="Data Transformation Pipelines"></a>Data Transformation Pipelines</h3><p><strong>From Clojure’s threading macros to JavaScript method chaining</strong>:</p><p>Clojure’s threading macro (<code>-&gt;</code>) provides an elegant data processing pipeline:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">-&gt;&gt;</span></span> users</span><br><span class="line">     (<span class="name"><span class="built_in">filter</span></span> #(<span class="name"><span class="built_in">&gt;</span></span> (<span class="symbol">:age</span> %) <span class="number">18</span>))</span><br><span class="line">     (<span class="name"><span class="built_in">map</span></span> #(<span class="name"><span class="built_in">assoc</span></span> % <span class="symbol">:display-name</span> (<span class="name"><span class="built_in">str</span></span> (<span class="symbol">:first-name</span> %) <span class="string">&quot; &quot;</span> (<span class="symbol">:last-name</span> %))))</span><br><span class="line">     (<span class="name"><span class="built_in">sort-by</span></span> <span class="symbol">:display-name</span>)</span><br><span class="line">     (<span class="name"><span class="built_in">take</span></span> <span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>JavaScript achieves similar effects through method chaining:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">users</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">age</span> &gt; <span class="number">18</span>)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> (&#123;</span><br><span class="line">    ...user,</span><br><span class="line">    <span class="attr">displayName</span>: <span class="string">`<span class="subst">$&#123;user.firstName&#125;</span> <span class="subst">$&#123;user.lastName&#125;</span>`</span></span><br><span class="line">  &#125;))</span><br><span class="line">  .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">displayName</span>.<span class="title function_">localeCompare</span>(b.<span class="property">displayName</span>))</span><br><span class="line">  .<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><strong>Asynchronous data processing pipelines</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Processing asynchronous data using Promise chains</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">processUserData</span> = <span class="keyword">async</span> (<span class="params">userId</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">fetchUser</span>(userId)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">user</span> =&gt;</span> (&#123; ...user, <span class="attr">fullName</span>: <span class="string">`<span class="subst">$&#123;user.firstName&#125;</span> <span class="subst">$&#123;user.lastName&#125;</span>`</span> &#125;))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title function_">async</span> (user) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> orders = <span class="keyword">await</span> <span class="title function_">fetchUserOrders</span>(user.<span class="property">id</span>);</span><br><span class="line">      <span class="keyword">return</span> &#123; </span><br><span class="line">        ...user, </span><br><span class="line">        <span class="attr">orderCount</span>: orders.<span class="property">length</span>,</span><br><span class="line">        <span class="attr">totalSpent</span>: orders.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, order</span>) =&gt;</span> sum + order.<span class="property">amount</span>, <span class="number">0</span>)</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Add user tier</span></span><br><span class="line">      <span class="keyword">const</span> tier = user.<span class="property">totalSpent</span> &gt; <span class="number">1000</span> ? <span class="string">&#x27;premium&#x27;</span> : </span><br><span class="line">                   user.<span class="property">totalSpent</span> &gt; <span class="number">500</span> ? <span class="string">&#x27;gold&#x27;</span> : <span class="string">&#x27;standard&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...user, tier &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using in React components</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserProfile</span> = (<span class="params">&#123; userId &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [userData, setUserData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">processUserData</span>(userId)</span><br><span class="line">      .<span class="title function_">then</span>(setUserData)</span><br><span class="line">      .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> <span class="title function_">setLoading</span>(<span class="literal">false</span>));</span><br><span class="line">  &#125;, [userId]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (loading) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">LoadingSpinner</span> /&gt;</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;userData.fullName&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Badge</span> <span class="attr">tier</span>=<span class="string">&#123;userData.tier&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Orders: &#123;userData.orderCount&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Total Spent: $&#123;userData.totalSpent&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Compositional-Design"><a href="#Compositional-Design" class="headerlink" title="Compositional Design"></a>Compositional Design</h3><p><strong>Composing small functions for large functionality</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Define small, reusable data processing functions</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isActive</span> = (<span class="params">user</span>) =&gt; user.<span class="property">status</span> === <span class="string">&#x27;active&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isPremium</span> = (<span class="params">user</span>) =&gt; user.<span class="property">subscription</span> === <span class="string">&#x27;premium&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getFullName</span> = (<span class="params">user</span>) =&gt; <span class="string">`<span class="subst">$&#123;user.firstName&#125;</span> <span class="subst">$&#123;user.lastName&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sortByName</span> = (<span class="params">a, b</span>) =&gt; <span class="title function_">getFullName</span>(a).<span class="title function_">localeCompare</span>(<span class="title function_">getFullName</span>(b));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Compose functions to create data processing pipelines</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createUserProcessor</span> = (<span class="params">filters = &#123;&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> processors = [];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (filters.<span class="property">activeOnly</span>) processors.<span class="title function_">push</span>(<span class="function"><span class="params">users</span> =&gt;</span> users.<span class="title function_">filter</span>(isActive));</span><br><span class="line">  <span class="keyword">if</span> (filters.<span class="property">premiumOnly</span>) processors.<span class="title function_">push</span>(<span class="function"><span class="params">users</span> =&gt;</span> users.<span class="title function_">filter</span>(isPremium));</span><br><span class="line">  <span class="keyword">if</span> (filters.<span class="property">sortByName</span>) processors.<span class="title function_">push</span>(<span class="function"><span class="params">users</span> =&gt;</span> [...users].<span class="title function_">sort</span>(sortByName));</span><br><span class="line">  <span class="keyword">if</span> (filters.<span class="property">addFullName</span>) processors.<span class="title function_">push</span>(<span class="function"><span class="params">users</span> =&gt;</span> users.<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> (&#123; ...user, <span class="attr">fullName</span>: <span class="title function_">getFullName</span>(user) &#125;)));</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">users</span>) =&gt;</span> processors.<span class="title function_">reduce</span>(<span class="function">(<span class="params">result, processor</span>) =&gt;</span> <span class="title function_">processor</span>(result), users);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using composed processors</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserList</span> = (<span class="params">&#123; users, filters &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> processUsers = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="title function_">createUserProcessor</span>(filters), [filters]);</span><br><span class="line">  <span class="keyword">const</span> processedUsers = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="title function_">processUsers</span>(users), [users, processUsers]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;processedUsers.map(user =&gt; <span class="tag">&lt;<span class="name">UserCard</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Compositional interface design</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Design composable hooks</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useDataFetching</span> = (<span class="params">url</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> [error, setError] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(url)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(setData)</span><br><span class="line">      .<span class="title function_">catch</span>(setError)</span><br><span class="line">      .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> <span class="title function_">setLoading</span>(<span class="literal">false</span>));</span><br><span class="line">  &#125;, [url]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123; data, loading, error &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useDataTransform</span> = (<span class="params">data, transformer</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> data ? <span class="title function_">transformer</span>(data) : <span class="literal">null</span>, [data, transformer]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useDataFilter</span> = (<span class="params">data, predicate</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> data ? data.<span class="title function_">filter</span>(predicate) : [], [data, predicate]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Composing multiple hooks</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserManagement</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: rawUsers, loading, error &#125; = <span class="title function_">useDataFetching</span>(<span class="string">&#x27;/api/users&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> activeUsers = <span class="title function_">useDataFilter</span>(rawUsers, isActive);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> enhancedUsers = <span class="title function_">useDataTransform</span>(activeUsers, <span class="function"><span class="params">users</span> =&gt;</span></span><br><span class="line">    users.<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> (&#123;</span><br><span class="line">      ...user,</span><br><span class="line">      <span class="attr">fullName</span>: <span class="title function_">getFullName</span>(user),</span><br><span class="line">      <span class="attr">membershipDuration</span>: <span class="title function_">calculateMembershipDuration</span>(user.<span class="property">createdAt</span>)</span><br><span class="line">    &#125;))</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (loading) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">LoadingSpinner</span> /&gt;</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ErrorMessage</span> <span class="attr">error</span>=<span class="string">&#123;error&#125;</span> /&gt;</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;enhancedUsers?.map(user =&gt; <span class="tag">&lt;<span class="name">UserCard</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Declarative-vs-Imperative"><a href="#Declarative-vs-Imperative" class="headerlink" title="Declarative vs Imperative"></a>Declarative vs Imperative</h3><p><strong>Imperative code (avoid this approach)</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Imperative: tell the computer HOW to do</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processUsersImperative</span>(<span class="params">users, searchTerm</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Manual loop filtering</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; users.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (users[i].<span class="property">name</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">includes</span>(searchTerm.<span class="title function_">toLowerCase</span>())) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(users[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Manual transformation</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; result.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    result[i] = &#123;</span><br><span class="line">      ...result[i],</span><br><span class="line">      <span class="attr">displayName</span>: result[i].<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + result[i].<span class="property">lastName</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Manual sorting</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; result.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; result.<span class="property">length</span> - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (result[j].<span class="property">displayName</span> &gt; result[j + <span class="number">1</span>].<span class="property">displayName</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = result[j];</span><br><span class="line">        result[j] = result[j + <span class="number">1</span>];</span><br><span class="line">        result[j + <span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Declarative code (recommended approach)</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declarative: tell the computer WHAT you want</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">processUsersDeclarative</span> = (<span class="params">users, searchTerm</span>) =&gt;</span><br><span class="line">  users</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span> </span><br><span class="line">      user.<span class="property">name</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">includes</span>(searchTerm.<span class="title function_">toLowerCase</span>())</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> (&#123;</span><br><span class="line">      ...user,</span><br><span class="line">      <span class="attr">displayName</span>: <span class="string">`<span class="subst">$&#123;user.firstName&#125;</span> <span class="subst">$&#123;user.lastName&#125;</span>`</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">displayName</span>.<span class="title function_">localeCompare</span>(b.<span class="property">displayName</span>));</span><br></pre></td></tr></table></figure><p><strong>Declarative UI in React</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declarative UI description</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserInterface</span> = (<span class="params">&#123; users, searchTerm &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">SearchInput</span> <span class="attr">value</span>=<span class="string">&#123;searchTerm&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;setSearchTerm&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">UserStats</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">total</span>=<span class="string">&#123;users.length&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">filtered</span>=<span class="string">&#123;processUsersDeclarative(users,</span> <span class="attr">searchTerm</span>)<span class="attr">.length</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">UserGrid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;processUsersDeclarative(users, searchTerm).map(user =&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">UserCard</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">UserGrid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Practical-Case-Study-Building-Complete-Data-Processing-Pipeline"><a href="#Practical-Case-Study-Building-Complete-Data-Processing-Pipeline" class="headerlink" title="Practical Case Study: Building Complete Data Processing Pipeline"></a>Practical Case Study: Building Complete Data Processing Pipeline</h2><p>Let’s build a complete user management interface to demonstrate the practical application of functional programming concepts in real projects.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useMemo, useCallback &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useQuery, useMutation, useQueryClient &#125; <span class="keyword">from</span> <span class="string">&#x27;@tanstack/react-query&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Data fetching and transformation</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useUsers</span> = (<span class="params">filters = &#123;&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&#x27;users&#x27;</span>, filters],</span><br><span class="line">    <span class="attr">queryFn</span>: <span class="function">() =&gt;</span> <span class="title function_">fetchUsers</span>(filters),</span><br><span class="line">    <span class="attr">select</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">users</span>: data.<span class="property">users</span>.<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> (&#123;</span><br><span class="line">        ...user,</span><br><span class="line">        <span class="attr">fullName</span>: <span class="string">`<span class="subst">$&#123;user.firstName&#125;</span> <span class="subst">$&#123;user.lastName&#125;</span>`</span>,</span><br><span class="line">        <span class="attr">membershipDuration</span>: <span class="title function_">calculateMembershipDuration</span>(user.<span class="property">createdAt</span>),</span><br><span class="line">        <span class="attr">orderStats</span>: &#123;</span><br><span class="line">          <span class="attr">totalOrders</span>: user.<span class="property">orders</span>?.<span class="property">length</span> || <span class="number">0</span>,</span><br><span class="line">          <span class="attr">totalSpent</span>: user.<span class="property">orders</span>?.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, order</span>) =&gt;</span> sum + order.<span class="property">amount</span>, <span class="number">0</span>) || <span class="number">0</span>,</span><br><span class="line">          <span class="attr">averageOrder</span>: user.<span class="property">orders</span>?.<span class="property">length</span> &gt; <span class="number">0</span> </span><br><span class="line">            ? user.<span class="property">orders</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, order</span>) =&gt;</span> sum + order.<span class="property">amount</span>, <span class="number">0</span>) / user.<span class="property">orders</span>.<span class="property">length</span> </span><br><span class="line">            : <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)),</span><br><span class="line">      <span class="attr">pagination</span>: data.<span class="property">pagination</span>,</span><br><span class="line">      <span class="attr">summary</span>: &#123;</span><br><span class="line">        <span class="attr">totalUsers</span>: data.<span class="property">users</span>.<span class="property">length</span>,</span><br><span class="line">        <span class="attr">activeUsers</span>: data.<span class="property">users</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">isActive</span>).<span class="property">length</span>,</span><br><span class="line">        <span class="attr">premiumUsers</span>: data.<span class="property">users</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">subscription</span> === <span class="string">&#x27;premium&#x27;</span>).<span class="property">length</span>,</span><br><span class="line">        <span class="attr">totalRevenue</span>: data.<span class="property">users</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, user</span>) =&gt;</span> </span><br><span class="line">          sum + (user.<span class="property">orders</span>?.<span class="title function_">reduce</span>(<span class="function">(<span class="params">orderSum, order</span>) =&gt;</span> orderSum + order.<span class="property">amount</span>, <span class="number">0</span>) || <span class="number">0</span>), <span class="number">0</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">staleTime</span>: <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>, <span class="comment">// 5-minute cache</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// User update mutation</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useUpdateUser</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> queryClient = <span class="title function_">useQueryClient</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useMutation</span>(&#123;</span><br><span class="line">    <span class="attr">mutationFn</span>: <span class="function">(<span class="params">&#123; userId, updates &#125;</span>) =&gt;</span> <span class="title function_">updateUser</span>(userId, updates),</span><br><span class="line">    <span class="attr">onSuccess</span>: <span class="function">(<span class="params">updatedUser</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Optimistic update: functionally update cache</span></span><br><span class="line">      queryClient.<span class="title function_">setQueryData</span>([<span class="string">&#x27;users&#x27;</span>], <span class="function">(<span class="params">oldData</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!oldData) <span class="keyword">return</span> oldData;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          ...oldData,</span><br><span class="line">          <span class="attr">users</span>: oldData.<span class="property">users</span>.<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span></span><br><span class="line">            user.<span class="property">id</span> === updatedUser.<span class="property">id</span> </span><br><span class="line">              ? &#123; ...user, ...updatedUser &#125;</span><br><span class="line">              : user</span><br><span class="line">          )</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Filtering and sorting logic</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createUserFilters</span> = (<span class="params">searchTerm, statusFilter, subscriptionFilter, sortBy</span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">search</span>: <span class="function">(<span class="params">users</span>) =&gt;</span> !searchTerm ? users : users.<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span></span><br><span class="line">    user.<span class="property">fullName</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">includes</span>(searchTerm.<span class="title function_">toLowerCase</span>()) ||</span><br><span class="line">    user.<span class="property">email</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">includes</span>(searchTerm.<span class="title function_">toLowerCase</span>())</span><br><span class="line">  ),</span><br><span class="line">  </span><br><span class="line">  <span class="attr">status</span>: <span class="function">(<span class="params">users</span>) =&gt;</span> statusFilter === <span class="string">&#x27;all&#x27;</span> ? users : users.<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span></span><br><span class="line">    statusFilter === <span class="string">&#x27;active&#x27;</span> ? user.<span class="property">isActive</span> : !user.<span class="property">isActive</span></span><br><span class="line">  ),</span><br><span class="line">  </span><br><span class="line">  <span class="attr">subscription</span>: <span class="function">(<span class="params">users</span>) =&gt;</span> subscriptionFilter === <span class="string">&#x27;all&#x27;</span> ? users : users.<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span></span><br><span class="line">    user.<span class="property">subscription</span> === subscriptionFilter</span><br><span class="line">  ),</span><br><span class="line">  </span><br><span class="line">  <span class="attr">sort</span>: <span class="function">(<span class="params">users</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> sortFunctions = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">fullName</span>.<span class="title function_">localeCompare</span>(b.<span class="property">fullName</span>),</span><br><span class="line">      <span class="attr">email</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">email</span>.<span class="title function_">localeCompare</span>(b.<span class="property">email</span>),</span><br><span class="line">      <span class="attr">orders</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> b.<span class="property">orderStats</span>.<span class="property">totalOrders</span> - a.<span class="property">orderStats</span>.<span class="property">totalOrders</span>,</span><br><span class="line">      <span class="attr">spent</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> b.<span class="property">orderStats</span>.<span class="property">totalSpent</span> - a.<span class="property">orderStats</span>.<span class="property">totalSpent</span>,</span><br><span class="line">      <span class="attr">joined</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="keyword">new</span> <span class="title class_">Date</span>(b.<span class="property">createdAt</span>) - <span class="keyword">new</span> <span class="title class_">Date</span>(a.<span class="property">createdAt</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [...users].<span class="title function_">sort</span>(sortFunctions[sortBy] || sortFunctions.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Main component</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserManagementDashboard</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// UI state</span></span><br><span class="line">  <span class="keyword">const</span> [searchTerm, setSearchTerm] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [statusFilter, setStatusFilter] = <span class="title function_">useState</span>(<span class="string">&#x27;all&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [subscriptionFilter, setSubscriptionFilter] = <span class="title function_">useState</span>(<span class="string">&#x27;all&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [sortBy, setSortBy] = <span class="title function_">useState</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [selectedUsers, setSelectedUsers] = <span class="title function_">useState</span>([]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Data fetching</span></span><br><span class="line">  <span class="keyword">const</span> &#123; data, isLoading, error &#125; = <span class="title function_">useUsers</span>();</span><br><span class="line">  <span class="keyword">const</span> updateUserMutation = <span class="title function_">useUpdateUser</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Data processing pipeline</span></span><br><span class="line">  <span class="keyword">const</span> processedData = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!data?.<span class="property">users</span>) <span class="keyword">return</span> &#123; <span class="attr">users</span>: [], <span class="attr">stats</span>: <span class="literal">null</span> &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> filters = <span class="title function_">createUserFilters</span>(searchTerm, statusFilter, subscriptionFilter, sortBy);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Apply all filters in functional pipeline</span></span><br><span class="line">    <span class="keyword">const</span> filteredUsers = [filters.<span class="property">search</span>, filters.<span class="property">status</span>, filters.<span class="property">subscription</span>, filters.<span class="property">sort</span>]</span><br><span class="line">      .<span class="title function_">reduce</span>(<span class="function">(<span class="params">users, filterFn</span>) =&gt;</span> <span class="title function_">filterFn</span>(users), data.<span class="property">users</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Calculate filtered statistics</span></span><br><span class="line">    <span class="keyword">const</span> filteredStats = &#123;</span><br><span class="line">      <span class="attr">showing</span>: filteredUsers.<span class="property">length</span>,</span><br><span class="line">      <span class="attr">total</span>: data.<span class="property">users</span>.<span class="property">length</span>,</span><br><span class="line">      <span class="attr">avgOrderValue</span>: filteredUsers.<span class="property">length</span> &gt; <span class="number">0</span> </span><br><span class="line">        ? filteredUsers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, user</span>) =&gt;</span> sum + user.<span class="property">orderStats</span>.<span class="property">averageOrder</span>, <span class="number">0</span>) / filteredUsers.<span class="property">length</span> </span><br><span class="line">        : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">totalFiltered</span>: filteredUsers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, user</span>) =&gt;</span> sum + user.<span class="property">orderStats</span>.<span class="property">totalSpent</span>, <span class="number">0</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">users</span>: filteredUsers, <span class="attr">stats</span>: filteredStats, <span class="attr">summary</span>: data.<span class="property">summary</span> &#125;;</span><br><span class="line">  &#125;, [data, searchTerm, statusFilter, subscriptionFilter, sortBy]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Event handlers</span></span><br><span class="line">  <span class="keyword">const</span> handleUserToggle = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">    updateUserMutation.<span class="title function_">mutate</span>(&#123;</span><br><span class="line">      <span class="attr">userId</span>: user.<span class="property">id</span>,</span><br><span class="line">      <span class="attr">updates</span>: &#123; <span class="attr">isActive</span>: !user.<span class="property">isActive</span> &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, [updateUserMutation]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleBulkAction = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">    selectedUsers.<span class="title function_">forEach</span>(<span class="function"><span class="params">userId</span> =&gt;</span> &#123;</span><br><span class="line">      updateUserMutation.<span class="title function_">mutate</span>(&#123;</span><br><span class="line">        userId,</span><br><span class="line">        <span class="attr">updates</span>: action === <span class="string">&#x27;activate&#x27;</span> ? &#123; <span class="attr">isActive</span>: <span class="literal">true</span> &#125; : &#123; <span class="attr">isActive</span>: <span class="literal">false</span> &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">setSelectedUsers</span>([]);</span><br><span class="line">  &#125;, [selectedUsers, updateUserMutation]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleSelectUser = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">userId, selected</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setSelectedUsers</span>(<span class="function"><span class="params">prev</span> =&gt;</span> </span><br><span class="line">      selected </span><br><span class="line">        ? [...prev, userId]</span><br><span class="line">        : prev.<span class="title function_">filter</span>(<span class="function"><span class="params">id</span> =&gt;</span> id !== userId)</span><br><span class="line">    );</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Render</span></span><br><span class="line">  <span class="keyword">if</span> (isLoading) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">LoadingSpinner</span> /&gt;</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ErrorMessage</span> <span class="attr">error</span>=<span class="string">&#123;error&#125;</span> /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;user-management-dashboard&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* Statistics panel */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;stats-panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">StatCard</span> <span class="attr">title</span>=<span class="string">&quot;Total Users&quot;</span> <span class="attr">value</span>=<span class="string">&#123;processedData.summary?.totalUsers</span> || <span class="attr">0</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">StatCard</span> <span class="attr">title</span>=<span class="string">&quot;Active Users&quot;</span> <span class="attr">value</span>=<span class="string">&#123;processedData.summary?.activeUsers</span> || <span class="attr">0</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">StatCard</span> <span class="attr">title</span>=<span class="string">&quot;Premium Users&quot;</span> <span class="attr">value</span>=<span class="string">&#123;processedData.summary?.premiumUsers</span> || <span class="attr">0</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">StatCard</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">title</span>=<span class="string">&quot;Total Revenue&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;</span>`$$&#123;(<span class="attr">processedData.summary</span>?<span class="attr">.totalRevenue</span> || <span class="attr">0</span>)<span class="attr">.toFixed</span>(<span class="attr">2</span>)&#125;`&#125; </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;/* Filter controls */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;filter-controls&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SearchInput</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;searchTerm&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;setSearchTerm&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">placeholder</span>=<span class="string">&quot;Search username or email...&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">FilterSelect</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label</span>=<span class="string">&quot;Status&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;statusFilter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;setStatusFilter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">options</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123; <span class="attr">value:</span> &#x27;<span class="attr">all</span>&#x27;, <span class="attr">label:</span> &#x27;<span class="attr">All</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123; <span class="attr">value:</span> &#x27;<span class="attr">active</span>&#x27;, <span class="attr">label:</span> &#x27;<span class="attr">Active</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123; <span class="attr">value:</span> &#x27;<span class="attr">inactive</span>&#x27;, <span class="attr">label:</span> &#x27;<span class="attr">Inactive</span>&#x27; &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">FilterSelect</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label</span>=<span class="string">&quot;Subscription&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;subscriptionFilter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;setSubscriptionFilter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">options</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123; <span class="attr">value:</span> &#x27;<span class="attr">all</span>&#x27;, <span class="attr">label:</span> &#x27;<span class="attr">All</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123; <span class="attr">value:</span> &#x27;<span class="attr">premium</span>&#x27;, <span class="attr">label:</span> &#x27;<span class="attr">Premium</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123; <span class="attr">value:</span> &#x27;<span class="attr">standard</span>&#x27;, <span class="attr">label:</span> &#x27;<span class="attr">Standard</span>&#x27; &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SortSelect</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;sortBy&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;setSortBy&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">options</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123; <span class="attr">value:</span> &#x27;<span class="attr">name</span>&#x27;, <span class="attr">label:</span> &#x27;<span class="attr">Name</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123; <span class="attr">value:</span> &#x27;<span class="attr">email</span>&#x27;, <span class="attr">label:</span> &#x27;<span class="attr">Email</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123; <span class="attr">value:</span> &#x27;<span class="attr">orders</span>&#x27;, <span class="attr">label:</span> &#x27;<span class="attr">Order</span> <span class="attr">Count</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123; <span class="attr">value:</span> &#x27;<span class="attr">spent</span>&#x27;, <span class="attr">label:</span> &#x27;<span class="attr">Amount</span> <span class="attr">Spent</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123; <span class="attr">value:</span> &#x27;<span class="attr">joined</span>&#x27;, <span class="attr">label:</span> &#x27;<span class="attr">Join</span> <span class="attr">Date</span>&#x27; &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;/* Bulk actions */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;selectedUsers.length &gt; 0 &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;bulk-actions&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected &#123;selectedUsers.length&#125; users<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> handleBulkAction(&#x27;activate&#x27;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">            Bulk Activate</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> handleBulkAction(&#x27;deactivate&#x27;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">            Bulk Deactivate</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;/* Result statistics */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;result-stats&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Showing &#123;processedData.stats?.showing&#125; / &#123;processedData.stats?.total&#125; users<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Average Order Value: $&#123;processedData.stats?.avgOrderValue?.toFixed(2)&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Filtered Total: $&#123;processedData.stats?.totalFiltered?.toFixed(2)&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;/* User list */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;user-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;processedData.users.map(user =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">UserCard</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">user</span>=<span class="string">&#123;user&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">selected</span>=<span class="string">&#123;selectedUsers.includes(user.id)&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onSelect</span>=<span class="string">&#123;(selected)</span> =&gt;</span> handleSelectUser(user.id, selected)&#125;</span></span><br><span class="line"><span class="language-xml">            onToggleActive=&#123;() =&gt; handleUserToggle(user)&#125;</span></span><br><span class="line"><span class="language-xml">            loading=&#123;updateUserMutation.isLoading&#125;</span></span><br><span class="line"><span class="language-xml">          /&gt;</span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;/* Pagination */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;processedData.users.length === 0 &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;empty-state&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>No matching users found<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Try adjusting search terms or filters<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sub-component example</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserCard</span> = (<span class="params">&#123; user, selected, onSelect, onToggleActive, loading &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">user-card</span> $&#123;<span class="attr">user.isActive</span> ? &#x27;<span class="attr">active</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">inactive</span>&#x27;&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">checked</span>=<span class="string">&#123;selected&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> onSelect(e.target.checked)&#125;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;user-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;user.fullName&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;user.email&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;membership&quot;</span>&gt;</span>Member for &#123;user.membershipDuration&#125; days<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;user-stats&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Orders: &#123;user.orderStats.totalOrders&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Spent: $&#123;user.orderStats.totalSpent.toFixed(2)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Average: $&#123;user.orderStats.averageOrder.toFixed(2)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;user-actions&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">StatusBadge</span> <span class="attr">active</span>=<span class="string">&#123;user.isActive&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SubscriptionBadge</span> <span class="attr">type</span>=<span class="string">&#123;user.subscription&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;onToggleActive&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">disabled</span>=<span class="string">&#123;loading&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&#123;user.isActive</span> ? &#x27;<span class="attr">deactivate</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">activate</span>&#x27;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;loading ? &#x27;Processing...&#x27; : (user.isActive ? &#x27;Deactivate&#x27; : &#x27;Activate&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">UserManagementDashboard</span>;</span><br></pre></td></tr></table></figure><h2 id="Best-Practices-and-Summary"><a href="#Best-Practices-and-Summary" class="headerlink" title="Best Practices and Summary"></a>Best Practices and Summary</h2><h3 id="When-to-Use-Functional-Methods"><a href="#When-to-Use-Functional-Methods" class="headerlink" title="When to Use Functional Methods"></a>When to Use Functional Methods</h3><p><strong>Recommended use cases</strong>:</p><ol><li><strong>Data transformation and filtering</strong>: Use <code>map</code>, <code>filter</code>, <code>reduce</code> for processing list data</li><li><strong>UI list rendering</strong>: Rendering dynamic lists in React</li><li><strong>State calculation</strong>: Computing derived state from existing state</li><li><strong>API response processing</strong>: Transforming and normalizing server data</li><li><strong>Form validation</strong>: Composing multiple validation rules</li></ol><p><strong>Use with caution</strong>:</p><ol><li><strong>Performance-sensitive scenarios</strong>: Frequent operations on large datasets</li><li><strong>Loops requiring early exit</strong>: Traditional loops might be more efficient</li><li><strong>Complex conditional logic</strong>: Might reduce code readability</li></ol><h3 id="Performance-Considerations-and-Trade-offs"><a href="#Performance-Considerations-and-Trade-offs" class="headerlink" title="Performance Considerations and Trade-offs"></a>Performance Considerations and Trade-offs</h3><p><strong>Memory usage</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ Avoid: Creating multiple intermediate arrays</span></span><br><span class="line"><span class="keyword">const</span> result = users</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">isActive</span>)      <span class="comment">// Creates new array 1</span></span><br><span class="line">  .<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> (&#123; ...user, <span class="attr">id</span>: user.<span class="property">id</span> &#125;))  <span class="comment">// Creates new array 2</span></span><br><span class="line">  .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">name</span>.<span class="title function_">localeCompare</span>(b.<span class="property">name</span>)); <span class="comment">// Creates new array 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ Recommended: Use for loops in appropriate scenarios</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">processUsersEfficiently</span> = (<span class="params">users</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> user <span class="keyword">of</span> users) &#123;</span><br><span class="line">    <span class="keyword">if</span> (user.<span class="property">isActive</span>) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(&#123;</span><br><span class="line">        ...user,</span><br><span class="line">        <span class="attr">fullName</span>: <span class="string">`<span class="subst">$&#123;user.firstName&#125;</span> <span class="subst">$&#123;user.lastName&#125;</span>`</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">name</span>.<span class="title function_">localeCompare</span>(b.<span class="property">name</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ Or use memoization to avoid repeated calculations</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ProcessedUserList</span> = (<span class="params">&#123; users, filters &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> processedUsers = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> </span><br><span class="line">    users</span><br><span class="line">      .<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">isActive</span>)</span><br><span class="line">      .<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> (&#123; ...user, <span class="attr">fullName</span>: <span class="title function_">getFullName</span>(user) &#125;))</span><br><span class="line">      .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">name</span>.<span class="title function_">localeCompare</span>(b.<span class="property">name</span>))</span><br><span class="line">  , [users, filters]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;processedUsers.map(user =&gt; <span class="tag">&lt;<span class="name">UserCard</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Avoid over-nesting</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ Avoid: Overly complex nesting</span></span><br><span class="line"><span class="keyword">const</span> complexProcessing = users.<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> (&#123;</span><br><span class="line">  ...user,</span><br><span class="line">  <span class="attr">orders</span>: user.<span class="property">orders</span></span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function"><span class="params">order</span> =&gt;</span> order.<span class="property">status</span> === <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">order</span> =&gt;</span> (&#123;</span><br><span class="line">      ...order,</span><br><span class="line">      <span class="attr">items</span>: order.<span class="property">items</span></span><br><span class="line">        .<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">quantity</span> &gt; <span class="number">0</span>)</span><br><span class="line">        .<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> (&#123; ...item, <span class="attr">total</span>: item.<span class="property">price</span> * item.<span class="property">quantity</span> &#125;))</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b.<span class="property">total</span> - a.<span class="property">total</span>)</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ Recommended: Break down into small functions</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">processOrderItems</span> = (<span class="params">items</span>) =&gt; </span><br><span class="line">  items</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">quantity</span> &gt; <span class="number">0</span>)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> (&#123; ...item, <span class="attr">total</span>: item.<span class="property">price</span> * item.<span class="property">quantity</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">processUserOrders</span> = (<span class="params">orders</span>) =&gt;</span><br><span class="line">  orders</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function"><span class="params">order</span> =&gt;</span> order.<span class="property">status</span> === <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">order</span> =&gt;</span> (&#123;</span><br><span class="line">      ...order,</span><br><span class="line">      <span class="attr">items</span>: <span class="title function_">processOrderItems</span>(order.<span class="property">items</span>)</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b.<span class="property">total</span> - a.<span class="property">total</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">processUsers</span> = (<span class="params">users</span>) =&gt;</span><br><span class="line">  users.<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> (&#123;</span><br><span class="line">    ...user,</span><br><span class="line">    <span class="attr">orders</span>: <span class="title function_">processUserOrders</span>(user.<span class="property">orders</span>)</span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure><h3 id="Team-Collaboration-and-Code-Readability"><a href="#Team-Collaboration-and-Code-Readability" class="headerlink" title="Team Collaboration and Code Readability"></a>Team Collaboration and Code Readability</h3><p><strong>Writing readable functional code</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✅ Use meaningful variable names</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getActiveUsers</span> = (<span class="params">users</span>) =&gt; users.<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">isActive</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">enhanceWithFullName</span> = (<span class="params">users</span>) =&gt; users.<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> (&#123;</span><br><span class="line">  ...user,</span><br><span class="line">  <span class="attr">fullName</span>: <span class="string">`<span class="subst">$&#123;user.firstName&#125;</span> <span class="subst">$&#123;user.lastName&#125;</span>`</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sortByName</span> = (<span class="params">users</span>) =&gt; users.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">fullName</span>.<span class="title function_">localeCompare</span>(b.<span class="property">fullName</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ Compose into clear processing flow</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">processUserList</span> = (<span class="params">users</span>) =&gt; </span><br><span class="line">  <span class="title function_">sortByName</span>(<span class="title function_">enhanceWithFullName</span>(<span class="title function_">getActiveUsers</span>(users)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ Or use pipeline function</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">pipe</span> = (<span class="params">...fns</span>) =&gt; <span class="function">(<span class="params">value</span>) =&gt;</span> fns.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, fn</span>) =&gt;</span> <span class="title function_">fn</span>(acc), value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> processUserListPipe = <span class="title function_">pipe</span>(</span><br><span class="line">  getActiveUsers,</span><br><span class="line">  enhanceWithFullName,</span><br><span class="line">  sortByName</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Documentation and type definitions</strong>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">lastName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">isActive</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">orders</span>: <span class="title class_">Order</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ProcessedUser</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">fullName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">orderStats</span>: &#123;</span><br><span class="line">    <span class="attr">totalOrders</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">totalSpent</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">averageOrder</span>: <span class="built_in">number</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process user data, adding computed fields and filtering active users</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> users Raw user data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> Processed user data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> processUsers = (<span class="attr">users</span>: <span class="title class_">User</span>[]): <span class="title class_">ProcessedUser</span>[] =&gt; </span><br><span class="line">  users</span><br><span class="line">    .<span class="title function_">filter</span>((user): user is <span class="title class_">User</span> =&gt; user.<span class="property">isActive</span>)</span><br><span class="line">    .<span class="title function_">map</span>((user): <span class="function"><span class="params">ProcessedUser</span> =&gt;</span> (&#123;</span><br><span class="line">      ...user,</span><br><span class="line">      <span class="attr">fullName</span>: <span class="string">`<span class="subst">$&#123;user.firstName&#125;</span> <span class="subst">$&#123;user.lastName&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">orderStats</span>: <span class="title function_">calculateOrderStats</span>(user.<span class="property">orders</span>)</span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure><h3 id="Future-Development-Trends"><a href="#Future-Development-Trends" class="headerlink" title="Future Development Trends"></a>Future Development Trends</h3><p><strong>JavaScript Pipeline Operator proposal</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Possible future syntax (proposal stage)</span></span><br><span class="line"><span class="keyword">const</span> result = users</span><br><span class="line">  |&gt; <span class="title function_">filter</span>(%, <span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">isActive</span>)</span><br><span class="line">  |&gt; <span class="title function_">map</span>(%, <span class="function"><span class="params">user</span> =&gt;</span> (&#123; ...user, <span class="attr">fullName</span>: <span class="title function_">getFullName</span>(user) &#125;))</span><br><span class="line">  |&gt; <span class="title function_">sort</span>(%, <span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">fullName</span>.<span class="title function_">localeCompare</span>(b.<span class="property">fullName</span>));</span><br></pre></td></tr></table></figure><p><strong>Evolution of functional programming libraries</strong>:</p><ul><li><strong>Immutable.js</strong> and <strong>Immer</strong>: Better immutable data handling</li><li><strong>Ramda</strong> and <strong>Lodash&#x2F;fp</strong>: More functional utility functions</li><li><strong>fp-ts</strong>: Functional programming in TypeScript</li></ul><p><strong>Framework-level functional support</strong>:</p><ul><li>React’s Concurrent Features</li><li>Solid.js’s fine-grained reactivity</li><li>Svelte’s compile-time optimizations</li></ul><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>From Clojure to JavaScript, from academic functional programming to practical frontend development, we’ve witnessed the successful application of functional programming concepts in modern web development.</p><p><strong>Core Insights</strong>:</p><ol><li><strong>Consistency of ideas</strong>: Regardless of syntax changes, the core concepts of <code>map</code>, <code>filter</code>, <code>reduce</code> remain consistent</li><li><strong>Declarative advantages</strong>: Telling the computer “what you want” rather than “how to do it” improves code readability and maintainability</li><li><strong>Power of composition</strong>: Small functions compose into large functionality, creating reusable, testable code</li><li><strong>Value of immutability</strong>: Avoiding side effects makes code more predictable</li><li><strong>Framework integration</strong>: Modern frontend frameworks naturally support functional programming patterns</li></ol><p><strong>Practical recommendations</strong>:</p><ul><li>Prioritize array methods in data processing</li><li>Use React Hooks to create composable logical units</li><li>Leverage functional configuration in TanStack series</li><li>Balance functional purity with practical performance needs</li><li>Write clear, readable functional code</li></ul><p>Functional programming is not a silver bullet, but it provides an elegant and powerful way of thinking for modern frontend development. By understanding its core principles and applying them in appropriate scenarios, we can write cleaner, more maintainable, and more scalable code.</p><p>Whether you’re transitioning from Clojure to frontend development or hoping to apply functional programming concepts in JavaScript, the key lies in understanding the consistency behind these concepts and continuously refining your functional programming skills through practice.</p>]]></content>
    
    
    <summary type="html">In-depth analysis of similarities between JavaScript higher-order functions and Clojure functional programming, exploring practical applications of functional programming concepts in React and TanStack frameworks</summary>
    
    
    
    <category term="Programming" scheme="https://blog.baduncle.top/categories/Programming/"/>
    
    
    <category term="functional-programming" scheme="https://blog.baduncle.top/tags/functional-programming/"/>
    
    <category term="clojure-to-javascript" scheme="https://blog.baduncle.top/tags/clojure-to-javascript/"/>
    
    <category term="react" scheme="https://blog.baduncle.top/tags/react/"/>
    
    <category term="tanstack" scheme="https://blog.baduncle.top/tags/tanstack/"/>
    
    <category term="higher-order-functions" scheme="https://blog.baduncle.top/tags/higher-order-functions/"/>
    
    <category term="data-transformation" scheme="https://blog.baduncle.top/tags/data-transformation/"/>
    
    <category term="declarative-programming" scheme="https://blog.baduncle.top/tags/declarative-programming/"/>
    
    <category term="immutability" scheme="https://blog.baduncle.top/tags/immutability/"/>
    
  </entry>
  
  <entry>
    <title>Complete TypeScript JavaScript Symbols Guide From Basics to Advanced Usage</title>
    <link href="https://blog.baduncle.top/2025/08/07/typescript-javascript-symbols-guide/"/>
    <id>https://blog.baduncle.top/2025/08/07/typescript-javascript-symbols-guide/</id>
    <published>2025-08-07T02:00:00.000Z</published>
    <updated>2025-08-07T15:54:15.153Z</updated>
    
    <content type="html"><![CDATA[<p>In TypeScript and JavaScript development, various punctuation symbols are not only components of syntax, but also important tools for expressing complex logic. This article will provide a detailed introduction to each symbol’s usage from basic to advanced levels, combined with practical application scenarios in the React and TanStack ecosystem.</p><span id="more"></span><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li><a href="#basic-assignment-and-string-symbols">Basic Assignment and String Symbols</a><ul><li><a href="#equal-sign---the-art-of-assignment">Equal Sign &#x3D; - The Art of Assignment</a></li><li><a href="#quote-family-three-realms-of-strings">Quote Family Three Realms of Strings</a></li></ul></li><li><a href="#object-and-type-system-symbols">Object and Type System Symbols</a><ul><li><a href="#colon---bridge-between-types-and-values">Colon - Bridge Between Types and Values</a></li><li><a href="#semicolon---elegant-statement-termination">Semicolon - Elegant Statement Termination</a></li></ul></li><li><a href="#bracket-family---structure-and-logic">Bracket Family - Structure and Logic</a><ul><li><a href="#parentheses---container-for-functions-and-expressions">Parentheses - Container for Functions and Expressions</a></li><li><a href="#square-brackets---arrays-and-dynamic-access">Square Brackets - Arrays and Dynamic Access</a></li><li><a href="#curly-braces---objects-and-code-blocks">Curly Braces - Objects and Code Blocks</a></li></ul></li><li><a href="#advanced-operators-and-type-symbols">Advanced Operators and Type Symbols</a><ul><li><a href="#question-mark---the-power-of-optional">Question Mark - The Power of Optional</a></li><li><a href="#exclamation-mark---assertion-and-negation">Exclamation Mark - Assertion and Negation</a></li><li><a href="#pipe---the-wisdom-of-union">Pipe - The Wisdom of Union</a></li><li><a href="#ampersand---the-power-of-intersection">Ampersand - The Power of Intersection</a></li><li><a href="#arrow---modern-function-syntax">Arrow - Modern Function Syntax</a></li></ul></li><li><a href="#modern-javascript-typescript-advanced-symbols">Modern JavaScript TypeScript Advanced Symbols</a><ul><li><a href="#spread-operator---expand-and-collect">Spread Operator - Expand and Collect</a></li><li><a href="#nullish-coalescing-and-logical-assignment">Nullish Coalescing and Logical Assignment</a></li></ul></li><li><a href="#special-symbols-and-modern-syntax">Special Symbols and Modern Syntax</a><ul><li><a href="#template-literal-tags">Template Literal Tags</a></li><li><a href="#private-fields-">Private Fields</a></li></ul></li><li><a href="#comprehensive-applications-in-real-projects">Comprehensive Applications in Real Projects</a><ul><li><a href="#react-tanstack-query-complete-example">React TanStack Query Complete Example</a></li></ul></li><li><a href="#best-practices-summary">Best Practices Summary</a><ul><li><a href="#code-style-recommendations">Code Style Recommendations</a></li><li><a href="#performance-considerations">Performance Considerations</a></li><li><a href="#error-handling">Error Handling</a></li></ul></li><li><a href="#conclusion">Conclusion</a></li></ul><h2 id="Basic-Assignment-and-String-Symbols"><a href="#Basic-Assignment-and-String-Symbols" class="headerlink" title="Basic Assignment and String Symbols"></a>Basic Assignment and String Symbols</h2><h3 id="Equal-Sign-The-Art-of-Assignment"><a href="#Equal-Sign-The-Art-of-Assignment" class="headerlink" title="Equal Sign = - The Art of Assignment"></a>Equal Sign <code>=</code> - The Art of Assignment</h3><p><strong>Basic Usage</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Simple assignment</span></span><br><span class="line"><span class="keyword">let</span> userName = <span class="string">&quot;Alice&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Destructuring assignment</span></span><br><span class="line"><span class="keyword">const</span> &#123; data, error &#125; = <span class="title function_">useQuery</span>();</span><br><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><strong>Advanced Applications in React</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useState state updates</span></span><br><span class="line"><span class="keyword">const</span> [user, setUser] = useState&lt;<span class="title class_">User</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// useReducer action handling</span></span><br><span class="line"><span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Component props destructuring</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MyComponent</span> = (<span class="params">&#123; title, onSubmit, children &#125;: <span class="title class_">Props</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The above component props destructuring is equivalent to:</span></span><br><span class="line"><span class="comment">// const MyComponent = (props: Props) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//    const &#123; title, onSubmit, children &#125; = props;</span></span><br><span class="line"><span class="comment">//    return &lt;div&gt;&#123;title&#125;&lt;/div&gt;;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Applications in TanStack Query</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Query result destructuring</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">data</span>: users, isLoading, error &#125; = <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">  <span class="attr">queryKey</span>: [<span class="string">&#x27;users&#x27;</span>],</span><br><span class="line">  <span class="attr">queryFn</span>: fetchUsers,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mutation operations</span></span><br><span class="line"><span class="keyword">const</span> mutation = <span class="title function_">useMutation</span>(&#123;</span><br><span class="line">  <span class="attr">mutationFn</span>: updateUser,</span><br><span class="line">  <span class="attr">onSuccess</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// data is the returned result</span></span><br><span class="line">    <span class="title function_">setUser</span>(data);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Quote-Family-Three-Realms-of-Strings"><a href="#Quote-Family-Three-Realms-of-Strings" class="headerlink" title="Quote Family: &quot; &#39; ` - Three Realms of Strings"></a>Quote Family: <code>&quot;</code> <code>&#39;</code> <code>`</code> - Three Realms of Strings</h3><p><strong>Double Quotes <code>&quot;</code> and Single Quotes <code>&#39;</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Basic strings</span></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;React Developer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage in JSX attributes</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn-primary&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  Submit</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON data (must use double quotes)</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="string">&quot;apiUrl&quot;</span>: <span class="string">&quot;https://api.example.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;timeout&quot;</span>: <span class="number">5000</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Backticks <code>`</code> - Powerful Template Strings</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Basic template strings</span></span><br><span class="line"><span class="keyword">const</span> greeting = <span class="string">`Hello, <span class="subst">$&#123;userName&#125;</span>!`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Multi-line strings</span></span><br><span class="line"><span class="keyword">const</span> sqlQuery = <span class="string">`</span></span><br><span class="line"><span class="string">  SELECT id, name, email </span></span><br><span class="line"><span class="string">  FROM users </span></span><br><span class="line"><span class="string">  WHERE active = true</span></span><br><span class="line"><span class="string">  ORDER BY created_at DESC</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dynamic styles in React</span></span><br><span class="line"><span class="keyword">const</span> containerStyle = &#123;</span><br><span class="line">  <span class="attr">backgroundColor</span>: <span class="string">`hsl(<span class="subst">$&#123;hue&#125;</span>, 70%, 50%)`</span>,</span><br><span class="line">  <span class="attr">transform</span>: <span class="string">`translateX(<span class="subst">$&#123;offset&#125;</span>px)`</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dynamic query keys in TanStack Query</span></span><br><span class="line"><span class="keyword">const</span> queryKey = [<span class="string">&#x27;user&#x27;</span>, userId, <span class="string">`profile-<span class="subst">$&#123;version&#125;</span>`</span>];</span><br></pre></td></tr></table></figure><p><strong>Advanced Template String Usage</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Tagged template strings (for styling libraries like styled-components)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledButton</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">  background: <span class="subst">$&#123;props =&gt; props.primary ? <span class="string">&#x27;blue&#x27;</span> : <span class="string">&#x27;white&#x27;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">  color: <span class="subst">$&#123;props =&gt; props.primary ? <span class="string">&#x27;white&#x27;</span> : <span class="string">&#x27;blue&#x27;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">  padding: <span class="subst">$&#123;(&#123; size &#125;) =&gt; size === <span class="string">&#x27;large&#x27;</span> ? <span class="string">&#x27;12px 24px&#x27;</span> : <span class="string">&#x27;8px 16px&#x27;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GraphQL queries (common in TanStack projects)</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">GET_USERS</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">query</span> GetUsers<span class="punctuation">(</span><span class="variable">$limit</span>: Int<span class="punctuation">!</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-graphql">    users<span class="punctuation">(</span><span class="symbol">limit</span><span class="punctuation">:</span> <span class="variable">$limit</span>) <span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-graphql">      id</span></span><br><span class="line"><span class="language-graphql">      name</span></span><br><span class="line"><span class="language-graphql">      email</span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-graphql">`</span>;</span><br></pre></td></tr></table></figure><h2 id="Object-and-Type-System-Symbols"><a href="#Object-and-Type-System-Symbols" class="headerlink" title="Object and Type System Symbols"></a>Object and Type System Symbols</h2><h3 id="Colon-Bridge-Between-Types-and-Values"><a href="#Colon-Bridge-Between-Types-and-Values" class="headerlink" title="Colon : - Bridge Between Types and Values"></a>Colon <code>:</code> - Bridge Between Types and Values</h3><p><strong>Object Property Definition</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">hobbies</span>: [<span class="string">&quot;reading&quot;</span>, <span class="string">&quot;coding&quot;</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>TypeScript Type Annotations</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Basic type annotations</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">count</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">message</span>: <span class="built_in">string</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">isActive</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function type annotations</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateTotal</span>(<span class="params"><span class="attr">price</span>: <span class="built_in">number</span>, <span class="attr">tax</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> price * (<span class="number">1</span> + tax);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React component Props types</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ButtonProps</span> &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  <span class="attr">variant</span>: <span class="string">&#x27;primary&#x27;</span> | <span class="string">&#x27;secondary&#x27;</span>;</span><br><span class="line">  <span class="attr">onClick</span>: <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">React</span>.<span class="title class_">MouseEvent</span>&lt;<span class="title class_">HTMLButtonElement</span>&gt;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Button</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">ButtonProps</span>&gt; = <span class="function">(<span class="params">&#123; children, variant, onClick &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">btn-</span>$&#123;<span class="attr">variant</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Complex Type Applications in TanStack</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TanStack Query type definitions</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UseUserQueryOptions</span> &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">enabled</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">staleTime</span>?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useUserQuery</span> = (<span class="params">&#123; userId, enabled = <span class="literal">true</span>, staleTime = <span class="number">5000</span> &#125;: <span class="title class_">UseUserQueryOptions</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&#x27;user&#x27;</span>, userId],</span><br><span class="line">    <span class="attr">queryFn</span>: (): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt; =&gt; <span class="title function_">fetchUser</span>(userId),</span><br><span class="line">    enabled,</span><br><span class="line">    staleTime,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TanStack Table column definitions</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">columns</span>: <span class="title class_">ColumnDef</span>&lt;<span class="title class_">User</span>&gt;[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">accessorKey</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">    <span class="attr">header</span>: <span class="string">&#x27;Name&#x27;</span>,</span><br><span class="line">    <span class="attr">cell</span>: <span class="function">(<span class="params">&#123; row &#125;: &#123; row: Row&lt;User&gt; &#125;</span>) =&gt;</span> row.<span class="title function_">getValue</span>(<span class="string">&#x27;name&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="Semicolon-Elegant-Statement-Termination"><a href="#Semicolon-Elegant-Statement-Termination" class="headerlink" title="Semicolon ; - Elegant Statement Termination"></a>Semicolon <code>;</code> - Elegant Statement Termination</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Recommend always using semicolons</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;React&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> version = <span class="string">&quot;18.0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Avoid ASI (Automatic Semicolon Insertion) issues</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">calculate</span>()</span><br><span class="line">;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">forEach</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// Without semicolon will cause errors</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// React Hook calls</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">fetchData</span>();</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// TanStack Query configuration</span></span><br><span class="line"><span class="keyword">const</span> queryClient = <span class="keyword">new</span> <span class="title class_">QueryClient</span>(&#123;</span><br><span class="line">  <span class="attr">defaultOptions</span>: &#123;</span><br><span class="line">    <span class="attr">queries</span>: &#123;</span><br><span class="line">      <span class="attr">staleTime</span>: <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Bracket-Family-Structure-and-Logic"><a href="#Bracket-Family-Structure-and-Logic" class="headerlink" title="Bracket Family - Structure and Logic"></a>Bracket Family - Structure and Logic</h2><h3 id="Parentheses-Container-for-Functions-and-Expressions"><a href="#Parentheses-Container-for-Functions-and-Expressions" class="headerlink" title="Parentheses () - Container for Functions and Expressions"></a>Parentheses <code>()</code> - Container for Functions and Expressions</h3><p><strong>Function Calls and Definitions</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Function calls</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// React function components</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Header</span> = (<span class="params"><span class="attr">props</span>: <span class="title class_">HeaderProps</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;props.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Higher-order components</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">withAuth</span> = (<span class="params"><span class="title class_">WrappedComponent</span>: <span class="title class_">React</span>.<span class="title class_">ComponentType</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params"><span class="attr">props</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; isAuthenticated &#125; = <span class="title function_">useAuth</span>();</span><br><span class="line">    <span class="keyword">return</span> isAuthenticated ? <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>IIFE (Immediately Invoked Function Expression)</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create private scope</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable language_">module</span> = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> privateVar = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="function">() =&gt;</span> ++privateVar,</span><br><span class="line">    <span class="attr">getCount</span>: <span class="function">() =&gt;</span> privateVar,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Conditional rendering in React</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ConditionalComponent</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;(() =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">      if (loading) return <span class="tag">&lt;<span class="name">LoadingSpinner</span> /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      if (error) return <span class="tag">&lt;<span class="name">ErrorMessage</span> <span class="attr">error</span>=<span class="string">&#123;error&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      return <span class="tag">&lt;<span class="name">DataList</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">    &#125;)()&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Square-Brackets-Arrays-and-Dynamic-Access"><a href="#Square-Brackets-Arrays-and-Dynamic-Access" class="headerlink" title="Square Brackets [] - Arrays and Dynamic Access"></a>Square Brackets <code>[]</code> - Arrays and Dynamic Access</h3><p><strong>Array Literals</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> frameworks = [<span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>, <span class="string">&#x27;Angular&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// List rendering in React</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">TodoList</span> = (<span class="params">&#123; todos &#125;: &#123; todos: Todo[] &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;todos.map((todo, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;todo.id</span> || <span class="attr">index</span>&#125;&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ))&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Dynamic Property Access</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dynamic property names</span></span><br><span class="line"><span class="keyword">const</span> property = <span class="string">&#x27;userName&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> value = user[property];</span><br><span class="line"></span><br><span class="line"><span class="comment">// React form handling</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleInputChange</span> = (<span class="params"><span class="attr">event</span>: <span class="title class_">React</span>.<span class="title class_">ChangeEvent</span>&lt;<span class="title class_">HTMLInputElement</span>&gt;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, value &#125; = event.<span class="property">target</span>;</span><br><span class="line">  <span class="title function_">setFormData</span>(<span class="function"><span class="params">prev</span> =&gt;</span> (&#123;</span><br><span class="line">    ...prev,</span><br><span class="line">    [name]: value  <span class="comment">// Computed property name</span></span><br><span class="line">  &#125;));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dynamic query keys in TanStack Query</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getDynamicQuery</span> = (<span class="params"><span class="attr">filters</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> queryKey = [<span class="string">&#x27;data&#x27;</span>, ...<span class="title class_">Object</span>.<span class="title function_">entries</span>(filters).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;value&#125;</span>`</span>)];</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    queryKey,</span><br><span class="line">    <span class="attr">queryFn</span>: <span class="function">() =&gt;</span> <span class="title function_">fetchData</span>(filters),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Index Signatures and Mapped Types in TypeScript</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Index signatures</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StringDictionary</span> &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mapped types</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Required</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]-?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Partial updates of React Props</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserFormProps</span> &#123;</span><br><span class="line">  <span class="attr">user</span>: <span class="title class_">User</span>;</span><br><span class="line">  <span class="attr">onUpdate</span>: <span class="function">(<span class="params"><span class="attr">updates</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">User</span>&gt;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Curly-Braces-Objects-and-Code-Blocks"><a href="#Curly-Braces-Objects-and-Code-Blocks" class="headerlink" title="Curly Braces {} - Objects and Code Blocks"></a>Curly Braces <code>&#123;&#125;</code> - Objects and Code Blocks</h3><p><strong>Object Literals and Destructuring</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object literals</span></span><br><span class="line"><span class="keyword">const</span> apiConfig = &#123;</span><br><span class="line">  <span class="attr">baseUrl</span>: <span class="string">&#x27;https://api.example.com&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Destructuring assignment</span></span><br><span class="line"><span class="keyword">const</span> &#123; baseUrl, timeout, headers &#125; = apiConfig;</span><br><span class="line"><span class="keyword">const</span> &#123; data, error, isLoading &#125; = <span class="title function_">useQuery</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nested destructuring</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="attr">user</span>: &#123; name, email &#125;,</span><br><span class="line">  <span class="attr">preferences</span>: &#123; theme &#125;</span><br><span class="line">&#125; = userProfile;</span><br></pre></td></tr></table></figure><p><strong>Expressions in JSX</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">UserCard</span> = (<span class="params">&#123; user, showEmail = <span class="literal">false</span> &#125;: <span class="title class_">UserCardProps</span></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;user-card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;showEmail &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;user.email&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">backgroundColor:</span> <span class="attr">user.isActive</span> ? &#x27;<span class="attr">green</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">gray</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">padding:</span> &#x27;<span class="attr">10px</span>&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      Status: &#123;user.isActive ? &#x27;Active&#x27; : &#x27;Inactive&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Applications in TanStack Router</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Route configuration</span></span><br><span class="line"><span class="keyword">const</span> routeTree = <span class="title function_">createRootRoute</span>(&#123;</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span>&#123;/* Navigation component */&#125;<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  ),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dynamic route parameters</span></span><br><span class="line"><span class="keyword">const</span> userRoute = <span class="title function_">createRoute</span>(&#123;</span><br><span class="line">  <span class="attr">getParentRoute</span>: <span class="function">() =&gt;</span> rootRoute,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/users/$userId&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">(<span class="params">&#123; params &#125;: &#123; params: &#123; userId: <span class="built_in">string</span> &#125; &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">data</span>: user &#125; = <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">      <span class="attr">queryKey</span>: [<span class="string">&#x27;user&#x27;</span>, params.<span class="property">userId</span>],</span><br><span class="line">      <span class="attr">queryFn</span>: <span class="function">() =&gt;</span> <span class="title function_">fetchUser</span>(params.<span class="property">userId</span>),</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> user ? <span class="language-xml"><span class="tag">&lt;<span class="name">UserProfile</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> /&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Advanced-Operators-and-Type-Symbols"><a href="#Advanced-Operators-and-Type-Symbols" class="headerlink" title="Advanced Operators and Type Symbols"></a>Advanced Operators and Type Symbols</h2><h3 id="Question-Mark-The-Power-of-Optional"><a href="#Question-Mark-The-Power-of-Optional" class="headerlink" title="Question Mark ? - The Power of Optional"></a>Question Mark <code>?</code> - The Power of Optional</h3><p><strong>Optional Properties and Parameters</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Optional properties in interfaces</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>?: <span class="built_in">string</span>;  <span class="comment">// Optional</span></span><br><span class="line">  <span class="attr">avatar</span>?: <span class="built_in">string</span>; <span class="comment">// Optional</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optional function parameters</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createUser</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">email</span>?: <span class="built_in">string</span></span>): <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="title function_">generateId</span>(),</span><br><span class="line">    name,</span><br><span class="line">    ...(email &amp;&amp; &#123; email &#125;),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optional Props in React components</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ButtonProps</span> &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  <span class="attr">variant</span>?: <span class="string">&#x27;primary&#x27;</span> | <span class="string">&#x27;secondary&#x27;</span>;</span><br><span class="line">  <span class="attr">disabled</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Button</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">ButtonProps</span>&gt; = <span class="function">(<span class="params">&#123; </span></span></span><br><span class="line"><span class="params"><span class="function">  children, </span></span></span><br><span class="line"><span class="params"><span class="function">  variant = <span class="string">&#x27;primary&#x27;</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">  disabled = <span class="literal">false</span> </span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">btn-</span>$&#123;<span class="attr">variant</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">disabled</span>=<span class="string">&#123;disabled&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Optional Chaining Operator <code>?.</code></strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Safe property access</span></span><br><span class="line"><span class="keyword">const</span> userEmail = user?.<span class="property">profile</span>?.<span class="property">email</span>;</span><br><span class="line"><span class="keyword">const</span> firstHobby = user?.<span class="property">hobbies</span>?.[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optional method calls</span></span><br><span class="line">user?.<span class="property">updateProfile</span>?.(&#123; <span class="attr">name</span>: <span class="string">&#x27;New Name&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Safe rendering in React</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserProfile</span> = (<span class="params">&#123; user &#125;: &#123; user?: User &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;user?.name || &#x27;Guest&#x27;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;user?.email || &#x27;No email provided&#x27;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;user?.avatar &amp;&amp; <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;user.avatar&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;Avatar&quot;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Safe data access in TanStack Query</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserDashboard</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: user &#125; = <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&#x27;currentUser&#x27;</span>],</span><br><span class="line">    <span class="attr">queryFn</span>: fetchCurrentUser,</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome, &#123;user?.name&#125;!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Points: &#123;user?.gameStats?.points ?? 0&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Ternary Operator</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Basic conditional rendering</span></span><br><span class="line"><span class="keyword">const</span> status = isOnline ? <span class="string">&#x27;Online&#x27;</span> : <span class="string">&#x27;Offline&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Conditional rendering in React</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">LoginButton</span> = (<span class="params">&#123; isAuthenticated, onLogin, onLogout &#125;: <span class="title class_">Props</span></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;isAuthenticated</span> ? <span class="attr">onLogout</span> <span class="attr">:</span> <span class="attr">onLogin</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;isAuthenticated ? &#x27;Logout&#x27; : &#x27;Login&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nested ternary operators (use with caution)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getStatusColor</span> = (<span class="params"><span class="attr">status</span>: <span class="built_in">string</span></span>) =&gt; </span><br><span class="line">  status === <span class="string">&#x27;success&#x27;</span> ? <span class="string">&#x27;green&#x27;</span> :</span><br><span class="line">  status === <span class="string">&#x27;error&#x27;</span> ? <span class="string">&#x27;red&#x27;</span> :</span><br><span class="line">  status === <span class="string">&#x27;warning&#x27;</span> ? <span class="string">&#x27;orange&#x27;</span> : <span class="string">&#x27;gray&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TanStack Query state handling</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DataComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, isLoading, error &#125; = <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&#x27;data&#x27;</span>],</span><br><span class="line">    <span class="attr">queryFn</span>: fetchData,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;isLoading ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">LoadingSpinner</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : error ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ErrorMessage</span> <span class="attr">error</span>=<span class="string">&#123;error&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">DataList</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Exclamation-Mark-Assertion-and-Negation"><a href="#Exclamation-Mark-Assertion-and-Negation" class="headerlink" title="Exclamation Mark ! - Assertion and Negation"></a>Exclamation Mark <code>!</code> - Assertion and Negation</h3><p><strong>Logical NOT Operator</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isNotActive = !user.<span class="property">isActive</span>;</span><br><span class="line"><span class="keyword">const</span> isEmpty = !items.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Conditional logic in React</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">TodoItem</span> = (<span class="params">&#123; todo, onToggle &#125;: <span class="title class_">TodoItemProps</span></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;!todo.completed</span> ? &#x27;<span class="attr">pending</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">completed</span>&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">checked</span>=<span class="string">&#123;!todo.completed&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onChange</span>=<span class="string">&#123;()</span> =&gt;</span> onToggle(todo.id)&#125;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line"><span class="language-xml">    &#123;todo.text&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>TypeScript Non-null Assertion</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Non-null assertion operator (use with caution)</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)!;</span><br><span class="line"><span class="keyword">const</span> user = <span class="title function_">getCurrentUser</span>()!;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Common usage with React Refs</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MyComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = useRef&lt;<span class="title class_">HTMLInputElement</span>&gt;(<span class="literal">null</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">focusInput</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    inputRef.<span class="property">current</span>!.<span class="title function_">focus</span>(); <span class="comment">// Ensuring current is not null</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Application in array methods</span></span><br><span class="line"><span class="keyword">const</span> users = <span class="title function_">getUsers</span>();</span><br><span class="line"><span class="keyword">const</span> firstActiveUser = users.<span class="title function_">find</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">isActive</span>)!; <span class="comment">// Ensuring active user exists</span></span><br></pre></td></tr></table></figure><h3 id="Pipe-The-Wisdom-of-Union"><a href="#Pipe-The-Wisdom-of-Union" class="headerlink" title="Pipe | - The Wisdom of Union"></a>Pipe <code>|</code> - The Wisdom of Union</h3><p><strong>TypeScript Union Types</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Basic union types</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Status</span> = <span class="string">&#x27;loading&#x27;</span> | <span class="string">&#x27;success&#x27;</span> | <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">ID</span> = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Union types for React component Props</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ButtonProps</span> &#123;</span><br><span class="line">  <span class="attr">variant</span>: <span class="string">&#x27;primary&#x27;</span> | <span class="string">&#x27;secondary&#x27;</span> | <span class="string">&#x27;danger&#x27;</span>;</span><br><span class="line">  <span class="attr">size</span>: <span class="string">&#x27;small&#x27;</span> | <span class="string">&#x27;medium&#x27;</span> | <span class="string">&#x27;large&#x27;</span>;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Complex union types</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ApiResponse</span>&lt;T&gt; = </span><br><span class="line">  | &#123; <span class="attr">status</span>: <span class="string">&#x27;success&#x27;</span>; <span class="attr">data</span>: T &#125;</span><br><span class="line">  | &#123; <span class="attr">status</span>: <span class="string">&#x27;error&#x27;</span>; <span class="attr">error</span>: <span class="built_in">string</span> &#125;</span><br><span class="line">  | &#123; <span class="attr">status</span>: <span class="string">&#x27;loading&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function handling union types</span></span><br><span class="line"><span class="keyword">const</span> handleApiResponse = &lt;T&gt;<span class="function">(<span class="params"><span class="attr">response</span>: <span class="title class_">ApiResponse</span>&lt;T&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (response.<span class="property">status</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;success&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> response.<span class="property">data</span>; <span class="comment">// TypeScript knows there&#x27;s data here</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;error&#x27;</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(response.<span class="property">error</span>); <span class="comment">// TypeScript knows there&#x27;s error here</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;loading&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Union Type Applications in TanStack Query</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Union types for query status</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">QueryStatus</span> = <span class="string">&#x27;idle&#x27;</span> | <span class="string">&#x27;loading&#x27;</span> | <span class="string">&#x27;error&#x27;</span> | <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Union for multiple data sources</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DataSource</span> = </span><br><span class="line">  | &#123; <span class="attr">type</span>: <span class="string">&#x27;api&#x27;</span>; <span class="attr">url</span>: <span class="built_in">string</span> &#125;</span><br><span class="line">  | &#123; <span class="attr">type</span>: <span class="string">&#x27;cache&#x27;</span>; <span class="attr">key</span>: <span class="built_in">string</span> &#125;</span><br><span class="line">  | &#123; <span class="attr">type</span>: <span class="string">&#x27;static&#x27;</span>; <span class="attr">data</span>: <span class="built_in">any</span>[] &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useDataQuery</span> = (<span class="params"><span class="attr">source</span>: <span class="title class_">DataSource</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&#x27;data&#x27;</span>, source.<span class="property">type</span>, source.<span class="property">type</span> === <span class="string">&#x27;api&#x27;</span> ? source.<span class="property">url</span> : source.<span class="property">type</span> === <span class="string">&#x27;cache&#x27;</span> ? source.<span class="property">key</span> : <span class="string">&#x27;static&#x27;</span>],</span><br><span class="line">    <span class="attr">queryFn</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> (source.<span class="property">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;api&#x27;</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">fetch</span>(source.<span class="property">url</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>());</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;cache&#x27;</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">getCachedData</span>(source.<span class="property">key</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;static&#x27;</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(source.<span class="property">data</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Ampersand-The-Power-of-Intersection"><a href="#Ampersand-The-Power-of-Intersection" class="headerlink" title="Ampersand &amp; - The Power of Intersection"></a>Ampersand <code>&amp;</code> - The Power of Intersection</h3><p><strong>TypeScript Intersection Types</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Basic intersection types</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">email</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Admin</span> = &#123; <span class="attr">permissions</span>: <span class="built_in">string</span>[] &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AdminUser</span> = <span class="title class_">User</span> &amp; <span class="title class_">Admin</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">adminUser</span>: <span class="title class_">AdminUser</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;alice@example.com&#x27;</span>,</span><br><span class="line">  <span class="attr">permissions</span>: [<span class="string">&#x27;read&#x27;</span>, <span class="string">&#x27;write&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Combining React component Props</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">BaseProps</span> = &#123;</span><br><span class="line">  <span class="attr">className</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">children</span>?: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ButtonProps</span> = <span class="title class_">BaseProps</span> &amp; &#123;</span><br><span class="line">  <span class="attr">onClick</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">variant</span>: <span class="string">&#x27;primary&#x27;</span> | <span class="string">&#x27;secondary&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LinkProps</span> = <span class="title class_">BaseProps</span> &amp; &#123;</span><br><span class="line">  <span class="attr">href</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">target</span>?: <span class="string">&#x27;_blank&#x27;</span> | <span class="string">&#x27;_self&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type composition for higher-order components</span></span><br><span class="line"><span class="keyword">const</span> withLoading = &lt;P <span class="keyword">extends</span> <span class="built_in">object</span>&gt;<span class="function">(<span class="params"><span class="title class_">Component</span>: <span class="title class_">React</span>.<span class="title class_">ComponentType</span>&lt;P&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params"><span class="attr">props</span>: P &amp; &#123; isLoading: <span class="built_in">boolean</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (props.<span class="property">isLoading</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Arrow-Modern-Function-Syntax"><a href="#Arrow-Modern-Function-Syntax" class="headerlink" title="Arrow =&gt; - Modern Function Syntax"></a>Arrow <code>=&gt;</code> - Modern Function Syntax</h3><p><strong>Basic Arrow Functions</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Simple arrow functions</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>) =&gt; a + b;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">greet</span> = (<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) =&gt; <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Arrow functions with type annotations</span></span><br><span class="line"><span class="keyword">const</span> processUser = (<span class="attr">user</span>: <span class="title class_">User</span>): <span class="function"><span class="params">ProcessedUser</span> =&gt;</span> (&#123;</span><br><span class="line">  ...user,</span><br><span class="line">  <span class="attr">displayName</span>: user.<span class="property">name</span>.<span class="title function_">toUpperCase</span>(),</span><br><span class="line">  <span class="attr">isVip</span>: user.<span class="property">points</span> &gt; <span class="number">1000</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Arrow Functions in React</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Function components</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Welcome</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;&#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;&gt; = <span class="function">(<span class="params">&#123; name &#125;</span>) =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome, &#123;name&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Event handlers</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">TodoApp</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = useState&lt;<span class="title class_">Todo</span>[]&gt;([]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">addTodo</span> = (<span class="params"><span class="attr">text</span>: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTodos</span>(<span class="function"><span class="params">prev</span> =&gt;</span> [...prev, &#123; <span class="attr">id</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(), text, <span class="attr">completed</span>: <span class="literal">false</span> &#125;]);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">toggleTodo</span> = (<span class="params"><span class="attr">id</span>: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTodos</span>(<span class="function"><span class="params">prev</span> =&gt;</span> prev.<span class="title function_">map</span>(<span class="function"><span class="params">todo</span> =&gt;</span> </span><br><span class="line">      todo.<span class="property">id</span> === id ? &#123; ...todo, <span class="attr">completed</span>: !todo.<span class="property">completed</span> &#125; : todo</span><br><span class="line">    ));</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onKeyPress</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          if (e.key === &#x27;Enter&#x27;) &#123;</span></span><br><span class="line"><span class="language-xml">            addTodo((e.target as HTMLInputElement).value);</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      &#123;todos.map(todo =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> toggleTodo(todo.id)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          &#123;todo.text&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Applications in TanStack Query</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Query functions</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useUsers</span> = (<span class="params"></span>) =&gt; <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">  <span class="attr">queryKey</span>: [<span class="string">&#x27;users&#x27;</span>],</span><br><span class="line">  <span class="attr">queryFn</span>: <span class="function">() =&gt;</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/users&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>()),</span><br><span class="line">  <span class="attr">select</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> data.<span class="title function_">filter</span>(<span class="function">(<span class="params"><span class="attr">user</span>: <span class="title class_">User</span></span>) =&gt;</span> user.<span class="property">isActive</span>), <span class="comment">// Data transformation</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mutation callbacks</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useCreateUser</span> = (<span class="params"></span>) =&gt; <span class="title function_">useMutation</span>(&#123;</span><br><span class="line">  <span class="attr">mutationFn</span>: <span class="function">(<span class="params"><span class="attr">userData</span>: <span class="title class_">CreateUserData</span></span>) =&gt;</span> </span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;/api/users&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;,</span><br><span class="line">      <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(userData),</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>()),</span><br><span class="line">  <span class="attr">onSuccess</span>: <span class="function">(<span class="params">newUser</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Success callback</span></span><br><span class="line">    toast.<span class="title function_">success</span>(<span class="string">`User <span class="subst">$&#123;newUser.name&#125;</span> created successfully!`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onError</span>: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Error callback</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to create user:&#x27;</span>, error);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Modern-JavaScript-TypeScript-Advanced-Symbols"><a href="#Modern-JavaScript-TypeScript-Advanced-Symbols" class="headerlink" title="Modern JavaScript TypeScript Advanced Symbols"></a>Modern JavaScript TypeScript Advanced Symbols</h2><h3 id="Spread-Operator-Expand-and-Collect"><a href="#Spread-Operator-Expand-and-Collect" class="headerlink" title="Spread Operator ... - Expand and Collect"></a>Spread Operator <code>...</code> - Expand and Collect</h3><p><strong>Array Operations</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array spreading</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> moreNumbers = [<span class="number">0</span>, ...numbers, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// State updates in React</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">TodoList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = useState&lt;<span class="title class_">Todo</span>[]&gt;([]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">addTodo</span> = (<span class="params"><span class="attr">newTodo</span>: <span class="title class_">Todo</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTodos</span>(<span class="function"><span class="params">prev</span> =&gt;</span> [...prev, newTodo]);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">removeTodo</span> = (<span class="params"><span class="attr">id</span>: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTodos</span>(<span class="function"><span class="params">prev</span> =&gt;</span> prev.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">id</span> !== id));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Object Operations</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object spreading and merging</span></span><br><span class="line"><span class="keyword">const</span> baseUser = &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> userWithEmail = &#123; ...baseUser, <span class="attr">email</span>: <span class="string">&#x27;alice@example.com&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Passing React Props</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserCard</span> = (<span class="params"><span class="attr">props</span>: <span class="title class_">UserCardProps</span></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> &#123;<span class="attr">...props.divProps</span>&#125; <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">user-card</span> $&#123;<span class="attr">props.divProps</span>?<span class="attr">.className</span> || &#x27;&#x27;&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">UserAvatar</span> &#123;<span class="attr">...props.avatarProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">UserInfo</span> &#123;<span class="attr">...props.userProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Merging TanStack Query options</span></span><br><span class="line"><span class="keyword">const</span> createQueryOptions = &lt;T&gt;<span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="attr">baseOptions</span>: <span class="title class_">UseQueryOptions</span>&lt;T&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="attr">customOptions</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">UseQueryOptions</span>&lt;T&gt;&gt; = &#123;&#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> (&#123;</span><br><span class="line">  ...baseOptions,</span><br><span class="line">  ...customOptions,</span><br><span class="line">  <span class="attr">queryKey</span>: [...baseOptions.<span class="property">queryKey</span>, ...customOptions.<span class="property">queryKey</span> || []],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Function Parameter Collection</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Rest parameters</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">logMessages</span> = (<span class="params">...<span class="attr">messages</span>: <span class="built_in">string</span>[]</span>) =&gt; &#123;</span><br><span class="line">  messages.<span class="title function_">forEach</span>(<span class="function"><span class="params">msg</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(msg));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Flexible parameters for React components</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">FlexibleButtonProps</span> &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  <span class="attr">onClick</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">FlexibleButton</span> = (<span class="params">&#123; children, onClick, ...restProps &#125;: </span></span><br><span class="line"><span class="params">  <span class="title class_">FlexibleButtonProps</span> &amp; <span class="title class_">React</span>.<span class="title class_">ButtonHTMLAttributes</span>&lt;<span class="title class_">HTMLButtonElement</span>&gt;</span></span><br><span class="line"><span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span> &#123;<span class="attr">...restProps</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Nullish-Coalescing-and-Logical-Assignment"><a href="#Nullish-Coalescing-and-Logical-Assignment" class="headerlink" title="Nullish Coalescing ?? and Logical Assignment"></a>Nullish Coalescing <code>??</code> and Logical Assignment</h3><p><strong>Nullish Coalescing Operator</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Difference from ||</span></span><br><span class="line"><span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span> ?? <span class="number">3000</span>; <span class="comment">// Only use default for null/undefined</span></span><br><span class="line"><span class="keyword">const</span> title = user.<span class="property">title</span> ?? <span class="string">&#x27;Untitled&#x27;</span>; <span class="comment">// Empty string won&#x27;t be replaced</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Default value handling in React</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserProfile</span> = (<span class="params">&#123; user &#125;: &#123; user?: User &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;user?.name ?? &#x27;Anonymous&#x27;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Age: &#123;user?.age ?? &#x27;Not specified&#x27;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Default data in TanStack Query</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useUserProfile</span> = (<span class="params"><span class="attr">userId</span>: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&#x27;user&#x27;</span>, userId],</span><br><span class="line">    <span class="attr">queryFn</span>: <span class="function">() =&gt;</span> <span class="title function_">fetchUser</span>(userId),</span><br><span class="line">    <span class="attr">placeholderData</span>: <span class="function">(<span class="params">previousData</span>) =&gt;</span> previousData ?? <span class="title function_">getDefaultUser</span>(),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Logical Assignment Operators</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ??= Nullish assignment</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">config</span>: <span class="title class_">AppConfig</span> = <span class="title function_">getConfig</span>();</span><br><span class="line">config.<span class="property">theme</span> ??= <span class="string">&#x27;light&#x27;</span>; <span class="comment">// Only assign if null/undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ||= Logical OR assignment</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">cache</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt; = &#123;&#125;;</span><br><span class="line">cache.<span class="property">users</span> ||= []; <span class="comment">// Assign if falsy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &amp;&amp;= Logical AND assignment</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">settings</span>: <span class="title class_">Settings</span> = <span class="title function_">getUserSettings</span>();</span><br><span class="line">settings.<span class="property">notifications</span> &amp;&amp;= <span class="title function_">validateNotificationSettings</span>(settings.<span class="property">notifications</span>);</span><br></pre></td></tr></table></figure><h2 id="Special-Symbols-and-Modern-Syntax"><a href="#Special-Symbols-and-Modern-Syntax" class="headerlink" title="Special Symbols and Modern Syntax"></a>Special Symbols and Modern Syntax</h2><h3 id="Template-Literal-Tags"><a href="#Template-Literal-Tags" class="headerlink" title="Template Literal Tags"></a>Template Literal Tags</h3><p><strong>Applications in styled-components</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled, &#123; css &#125; <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Basic styled component</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Button</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">  padding: 10px 20px;</span></span><br><span class="line"><span class="string">  border: none;</span></span><br><span class="line"><span class="string">  border-radius: 4px;</span></span><br><span class="line"><span class="string">  cursor: pointer;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;props =&gt; props.primary &amp;&amp; css`<span class="language-css"></span></span></span></span><br><span class="line"><span class="language-css"><span class="subst"><span class="string">    <span class="attribute">background-color</span>: blue;</span></span></span></span><br><span class="line"><span class="language-css"><span class="subst"><span class="string">    <span class="attribute">color</span>: white;</span></span></span></span><br><span class="line"><span class="language-css"><span class="subst"><span class="string">  `</span>&#125;</span></span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;props =&gt; props.size === <span class="string">&#x27;large&#x27;</span> &amp;&amp; css`<span class="language-css"></span></span></span></span><br><span class="line"><span class="language-css"><span class="subst"><span class="string">    <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">30px</span>;</span></span></span></span><br><span class="line"><span class="language-css"><span class="subst"><span class="string">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span></span></span><br><span class="line"><span class="language-css"><span class="subst"><span class="string">  `</span>&#125;</span></span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dynamic styles</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Container</span> = styled.<span class="property">div</span>&lt;&#123; <span class="attr">width</span>: <span class="built_in">number</span>; <span class="attr">height</span>: <span class="built_in">number</span> &#125;&gt;<span class="string">`</span></span><br><span class="line"><span class="string">  width: <span class="subst">$&#123;props =&gt; props.width&#125;</span>px;</span></span><br><span class="line"><span class="string">  height: <span class="subst">$&#123;props =&gt; props.height&#125;</span>px;</span></span><br><span class="line"><span class="string">  background: linear-gradient(45deg, </span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;props =&gt; props.theme.primary&#125;</span>, </span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;props =&gt; props.theme.secondary&#125;</span></span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p><strong>GraphQL Query Templates</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; gql &#125; <span class="keyword">from</span> <span class="string">&#x27;@apollo/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GraphQL queries</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">GET_USER_PROFILE</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">query</span> GetUserProfile<span class="punctuation">(</span><span class="variable">$userId</span>: ID<span class="punctuation">!</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-graphql">    user<span class="punctuation">(</span><span class="symbol">id</span><span class="punctuation">:</span> <span class="variable">$userId</span>) <span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-graphql">      id</span></span><br><span class="line"><span class="language-graphql">      name</span></span><br><span class="line"><span class="language-graphql">      email</span></span><br><span class="line"><span class="language-graphql">      posts <span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-graphql">        id</span></span><br><span class="line"><span class="language-graphql">        title</span></span><br><span class="line"><span class="language-graphql">        createdAt</span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-graphql">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Complex queries with variables</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SEARCH_USERS</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">query</span> SearchUsers<span class="punctuation">(</span><span class="variable">$filters</span>: UserFilters<span class="punctuation">!</span>, <span class="variable">$pagination</span>: PaginationInput<span class="punctuation">!</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-graphql">    searchUsers<span class="punctuation">(</span><span class="symbol">filters</span><span class="punctuation">:</span> <span class="variable">$filters</span>, <span class="symbol">pagination</span><span class="punctuation">:</span> <span class="variable">$pagination</span>) <span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-graphql">      users <span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-graphql">        <span class="punctuation">...</span>UserFragment</span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-graphql">      totalCount</span></span><br><span class="line"><span class="language-graphql">      hasNextPage</span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-graphql">  </span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">fragment</span> UserFragment <span class="keyword">on</span> User <span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-graphql">    id</span></span><br><span class="line"><span class="language-graphql">    name</span></span><br><span class="line"><span class="language-graphql">    email</span></span><br><span class="line"><span class="language-graphql">    avatar</span></span><br><span class="line"><span class="language-graphql">    isActive</span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-graphql">`</span>;</span><br></pre></td></tr></table></figure><h3 id="Private-Fields"><a href="#Private-Fields" class="headerlink" title="Private Fields #"></a>Private Fields <code>#</code></h3><p><strong>Private Members in Classes</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserManager</span> &#123;</span><br><span class="line">  #<span class="attr">users</span>: <span class="title class_">User</span>[] = [];</span><br><span class="line">  #<span class="attr">currentUser</span>: <span class="title class_">User</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Private methods</span></span><br><span class="line">  #<span class="title function_">validateUser</span>(<span class="attr">user</span>: <span class="title class_">User</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> user.<span class="property">name</span>.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; user.<span class="property">email</span>.<span class="title function_">includes</span>(<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Public interface</span></span><br><span class="line">  <span class="title function_">addUser</span>(<span class="attr">user</span>: <span class="title class_">User</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">validateUser</span>(user)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#users.<span class="title function_">push</span>(user);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">getCurrentUser</span>(): <span class="title class_">User</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#currentUser;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Application in React Class Components (less common)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataLoader</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  #cache = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  #loadingPromises = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  </span><br><span class="line">  #loadData = <span class="title function_">async</span> (<span class="attr">key</span>: <span class="built_in">string</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.#cache.<span class="title function_">has</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.#cache.<span class="title function_">get</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.#loadingPromises.<span class="title function_">has</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.#loadingPromises.<span class="title function_">get</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> promise = <span class="title function_">fetch</span>(<span class="string">`/api/data/<span class="subst">$&#123;key&#125;</span>`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>());</span><br><span class="line">    <span class="variable language_">this</span>.#loadingPromises.<span class="title function_">set</span>(key, promise);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> promise;</span><br><span class="line">      <span class="variable language_">this</span>.#cache.<span class="title function_">set</span>(key, data);</span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#loadingPromises.<span class="title function_">delete</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Comprehensive-Applications-in-Real-Projects"><a href="#Comprehensive-Applications-in-Real-Projects" class="headerlink" title="Comprehensive Applications in Real Projects"></a>Comprehensive Applications in Real Projects</h2><h3 id="React-TanStack-Query-Complete-Example"><a href="#React-TanStack-Query-Complete-Example" class="headerlink" title="React TanStack Query Complete Example"></a>React TanStack Query Complete Example</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Type definitions</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">avatar</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">isActive</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">preferences</span>: &#123;</span><br><span class="line">    <span class="attr">theme</span>: <span class="string">&#x27;light&#x27;</span> | <span class="string">&#x27;dark&#x27;</span>;</span><br><span class="line">    <span class="attr">notifications</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserListProps</span> &#123;</span><br><span class="line">  <span class="attr">filters</span>?: &#123;</span><br><span class="line">    <span class="attr">active</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="attr">search</span>?: <span class="built_in">string</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="attr">onUserSelect</span>?: <span class="function">(<span class="params"><span class="attr">user</span>: <span class="title class_">User</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Custom Hook</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useUsers</span> = (<span class="params">&#123; filters &#125;: &#123; filters?: UserListProps[<span class="string">&#x27;filters&#x27;</span>] &#125; = &#123;&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&#x27;users&#x27;</span>, filters],</span><br><span class="line">    <span class="attr">queryFn</span>: <span class="title function_">async</span> (): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>[]&gt; =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>();</span><br><span class="line">      <span class="keyword">if</span> (filters?.<span class="property">active</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        params.<span class="title function_">set</span>(<span class="string">&#x27;active&#x27;</span>, filters.<span class="property">active</span>.<span class="title function_">toString</span>());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (filters?.<span class="property">search</span>) &#123;</span><br><span class="line">        params.<span class="title function_">set</span>(<span class="string">&#x27;search&#x27;</span>, filters.<span class="property">search</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/users?<span class="subst">$&#123;params&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Failed to fetch users&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">staleTime</span>: <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>, <span class="comment">// 5 minutes</span></span><br><span class="line">    <span class="attr">enabled</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// User update mutation</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useUpdateUser</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> queryClient = <span class="title function_">useQueryClient</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useMutation</span>(&#123;</span><br><span class="line">    <span class="attr">mutationFn</span>: <span class="title function_">async</span> (&#123; id, updates &#125;: &#123; <span class="attr">id</span>: <span class="built_in">string</span>; <span class="attr">updates</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">User</span>&gt; &#125;): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt; =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;id&#125;</span>`</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;PATCH&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(updates),</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Failed to update user&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onSuccess</span>: <span class="function">(<span class="params">updatedUser</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Update user data in cache</span></span><br><span class="line">      queryClient.<span class="title function_">setQueryData</span>(</span><br><span class="line">        [<span class="string">&#x27;users&#x27;</span>], </span><br><span class="line">        <span class="function">(<span class="params"><span class="attr">oldData</span>: <span class="title class_">User</span>[] | <span class="literal">undefined</span></span>) =&gt;</span> </span><br><span class="line">          oldData?.<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> </span><br><span class="line">            user.<span class="property">id</span> === updatedUser.<span class="property">id</span> ? updatedUser : user</span><br><span class="line">          ) ?? []</span><br><span class="line">      );</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// Also update individual user cache</span></span><br><span class="line">      queryClient.<span class="title function_">setQueryData</span>([<span class="string">&#x27;user&#x27;</span>, updatedUser.<span class="property">id</span>], updatedUser);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onError</span>: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Update failed:&#x27;</span>, error);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Main component</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserList</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">UserListProps</span>&gt; = <span class="function">(<span class="params">&#123; filters, onUserSelect &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [searchTerm, setSearchTerm] = <span class="title function_">useState</span>(filters?.<span class="property">search</span> ?? <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [showActiveOnly, setShowActiveOnly] = <span class="title function_">useState</span>(filters?.<span class="property">active</span> ?? <span class="literal">false</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Debounced search</span></span><br><span class="line">  <span class="keyword">const</span> debouncedSearch = <span class="title function_">useMemo</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="title function_">debounce</span>(<span class="function">(<span class="params"><span class="attr">term</span>: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Trigger search logic</span></span><br><span class="line">    &#125;, <span class="number">300</span>),</span><br><span class="line">    []</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> queryFilters = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">active</span>: showActiveOnly || <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">search</span>: searchTerm || <span class="literal">undefined</span>,</span><br><span class="line">  &#125;), [showActiveOnly, searchTerm]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: users = [], isLoading, error, refetch &#125; = <span class="title function_">useUsers</span>(&#123; <span class="attr">filters</span>: queryFilters &#125;);</span><br><span class="line">  <span class="keyword">const</span> updateUserMutation = <span class="title function_">useUpdateUser</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> handleUserToggle = <span class="title function_">useCallback</span>(<span class="function">(<span class="params"><span class="attr">user</span>: <span class="title class_">User</span></span>) =&gt;</span> &#123;</span><br><span class="line">    updateUserMutation.<span class="title function_">mutate</span>(&#123;</span><br><span class="line">      <span class="attr">id</span>: user.<span class="property">id</span>,</span><br><span class="line">      <span class="attr">updates</span>: &#123; <span class="attr">isActive</span>: !user.<span class="property">isActive</span> &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, [updateUserMutation]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> handleSearchChange = <span class="title function_">useCallback</span>(<span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">React</span>.<span class="title class_">ChangeEvent</span>&lt;<span class="title class_">HTMLInputElement</span>&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> value = event.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="title function_">setSearchTerm</span>(value);</span><br><span class="line">    <span class="title function_">debouncedSearch</span>(value);</span><br><span class="line">  &#125;, [debouncedSearch]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (isLoading) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;loading&quot;</span>&gt;</span>Loading users...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Failed to load users: &#123;error.message&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> refetch()&#125;&gt;Retry<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;user-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;filters&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">placeholder</span>=<span class="string">&quot;Search users...&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;searchTerm&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;handleSearchChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">checked</span>=<span class="string">&#123;showActiveOnly&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setShowActiveOnly(e.target.checked)&#125;</span></span><br><span class="line"><span class="language-xml">          /&gt;</span></span><br><span class="line"><span class="language-xml">          Show active only</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;users.length === 0 ? (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>No users found.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ) : (</span></span><br><span class="line"><span class="language-xml">          users.map((user) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">UserCard</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">user</span>=<span class="string">&#123;user&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> onUserSelect?.(user)&#125;</span></span><br><span class="line"><span class="language-xml">              onToggleActive=&#123;() =&gt; handleUserToggle(user)&#125;</span></span><br><span class="line"><span class="language-xml">              isUpdating=&#123;updateUserMutation.isLoading&#125;</span></span><br><span class="line"><span class="language-xml">            /&gt;</span></span><br><span class="line"><span class="language-xml">          ))</span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// User card component</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserCardProps</span> &#123;</span><br><span class="line">  <span class="attr">user</span>: <span class="title class_">User</span>;</span><br><span class="line">  <span class="attr">onClick</span>?: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">onToggleActive</span>?: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">isUpdating</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserCard</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">UserCardProps</span>&gt; = <span class="title function_">memo</span>(<span class="function">(<span class="params">&#123; </span></span></span><br><span class="line"><span class="params"><span class="function">  user, </span></span></span><br><span class="line"><span class="params"><span class="function">  onClick, </span></span></span><br><span class="line"><span class="params"><span class="function">  onToggleActive,</span></span></span><br><span class="line"><span class="params"><span class="function">  isUpdating = <span class="literal">false</span> </span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">user-card</span> $&#123;<span class="attr">user.isActive</span> ? &#x27;<span class="attr">active</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">inactive</span>&#x27;&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;user-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;user.avatar ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;user.avatar&#125;</span> <span class="attr">alt</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">user.name</span>&#125; <span class="attr">avatar</span>`&#125; <span class="attr">className</span>=<span class="string">&quot;avatar&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;avatar-placeholder&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;user.name.charAt(0).toUpperCase()&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;details&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;user.email&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;preferences&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Theme: &#123;user.preferences.theme&#125; | </span></span><br><span class="line"><span class="language-xml">          Notifications: &#123;user.preferences.notifications ? &#x27;On&#x27; : &#x27;Off&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        e.stopPropagation();</span></span><br><span class="line"><span class="language-xml">        onToggleActive?.();</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      disabled=&#123;isUpdating&#125;</span></span><br><span class="line"><span class="language-xml">      className=&#123;`toggle-button $&#123;user.isActive ? &#x27;deactivate&#x27; : &#x27;activate&#x27;&#125;`&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">      &#123;isUpdating ? &#x27;...&#x27; : (user.isActive ? &#x27;Deactivate&#x27; : &#x27;Activate&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">));</span><br></pre></td></tr></table></figure><h2 id="Best-Practices-Summary"><a href="#Best-Practices-Summary" class="headerlink" title="Best Practices Summary"></a>Best Practices Summary</h2><h3 id="Code-Style-Recommendations"><a href="#Code-Style-Recommendations" class="headerlink" title="Code Style Recommendations"></a>Code Style Recommendations</h3><ol><li><p><strong>Consistency Principle</strong></p><ul><li>Maintain consistent quote usage throughout the project</li><li>Uniform semicolon usage (recommended to use)</li><li>Maintain consistent indentation and line breaks</li></ul></li><li><p><strong>Readability First</strong></p><ul><li>Consider breaking complex ternary operators into if-else</li><li>Use parentheses appropriately to clarify operator precedence</li><li>Break long method chains with appropriate line breaks</li></ul></li><li><p><strong>Type Safety</strong></p><ul><li>Prioritize using TypeScript’s strict mode</li><li>Use non-null assertion <code>!</code> with caution</li><li>Utilize union and intersection types to improve type precision</li></ul></li></ol><h3 id="Performance-Considerations"><a href="#Performance-Considerations" class="headerlink" title="Performance Considerations"></a>Performance Considerations</h3><ol><li><p><strong>Object and Array Operations</strong></p><ul><li>Consider immutable libraries for large datasets</li><li>Avoid creating new objects in render functions</li><li>Use useMemo and useCallback judiciously</li></ul></li><li><p><strong>Query Optimization</strong></p><ul><li>Set appropriate cache times for TanStack Query</li><li>Use hierarchical structure for query keys</li><li>Avoid unnecessary duplicate requests</li></ul></li></ol><h3 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h3><ol><li><p><strong>Defensive Programming</strong></p><ul><li>Use optional chaining to avoid null value errors</li><li>Provide reasonable default values</li><li>Handle async operation errors promptly</li></ul></li><li><p><strong>User Experience</strong></p><ul><li>Provide loading state indicators</li><li>Friendly error messages</li><li>Support retry mechanisms</li></ul></li></ol><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Punctuation symbols in TypeScript&#x2F;JavaScript are not just syntax rules, but important tools for expressing complex logic and building modern applications. Mastering the usage of these symbols, especially their applications in React and TanStack ecosystem, helps us:</p><ol><li><strong>Write safer code</strong> - Avoid runtime errors through type systems and optional chaining</li><li><strong>Improve development efficiency</strong> - Utilize modern syntax sugar and toolchains</li><li><strong>Build maintainable applications</strong> - Clear type definitions and component structures</li><li><strong>Optimize user experience</strong> - Through state management and data fetching optimization</li></ol><p>Remember, tools themselves are not the goal; what matters is understanding when and how to correctly use these tools to solve real problems. In actual development, always focus on code readability, maintainability, and performance, choosing the most appropriate syntax and patterns for the current scenario.</p><hr><p><em>This article covers the usage of major punctuation symbols in TypeScript&#x2F;JavaScript, from basic syntax to advanced applications in modern frameworks. I hope this guide helps you better understand and utilize these powerful language features.</em></p>]]></content>
    
    
    <summary type="html">In-depth analysis of various punctuation symbols in TypeScript/JavaScript, including practical application scenarios in React and TanStack ecosystem</summary>
    
    
    
    <category term="Programming" scheme="https://blog.baduncle.top/categories/Programming/"/>
    
    
    <category term="operators" scheme="https://blog.baduncle.top/tags/operators/"/>
    
    <category term="symbols" scheme="https://blog.baduncle.top/tags/symbols/"/>
    
    <category term="syntax" scheme="https://blog.baduncle.top/tags/syntax/"/>
    
    <category term="destructuring" scheme="https://blog.baduncle.top/tags/destructuring/"/>
    
    <category term="template-literals" scheme="https://blog.baduncle.top/tags/template-literals/"/>
    
    <category term="optional-chaining" scheme="https://blog.baduncle.top/tags/optional-chaining/"/>
    
    <category term="spread-operator" scheme="https://blog.baduncle.top/tags/spread-operator/"/>
    
    <category term="arrow-functions" scheme="https://blog.baduncle.top/tags/arrow-functions/"/>
    
    <category term="union-types" scheme="https://blog.baduncle.top/tags/union-types/"/>
    
    <category term="intersection-types" scheme="https://blog.baduncle.top/tags/intersection-types/"/>
    
  </entry>
  
  <entry>
    <title>Complete JavaScript/TypeScript Function Syntax Guide - Understanding Modern JS Functions from a Java Developer&#39;s Perspective</title>
    <link href="https://blog.baduncle.top/2025/08/06/javascript-typescript-function-syntax-guide-for-java-developers/"/>
    <id>https://blog.baduncle.top/2025/08/06/javascript-typescript-function-syntax-guide-for-java-developers/</id>
    <published>2025-08-06T13:23:00.000Z</published>
    <updated>2025-08-07T16:43:43.769Z</updated>
    
    <content type="html"><![CDATA[<p>As a Java developer, you might feel confused when you first encounter TypeScript code like this:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">createRouter</span>: <span class="title class_">CreateRouterFn</span> = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Router</span>(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>What is <code>CreateRouterFn</code>? What is the <code>=&gt;</code> syntax? How is this different from Java method declarations? This article will systematically analyze various JavaScript&#x2F;TypeScript function syntax forms from concepts familiar to Java developers, helping you quickly master the core syntax of modern frontend development.</p><span id="more"></span><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li><a href="#Introduction-From-Confusion-to-Clarity">Introduction: From Confusion to Clarity</a><ul><li><a href="#Code-Snippet-That-Sparked-Thinking">Code Snippet That Sparked Thinking</a></li><li><a href="#Fundamental-Differences-Between-Java-vs-JavaScript-TypeScript">Fundamental Differences Between Java vs JavaScript&#x2F;TypeScript</a></li></ul></li><li><a href="#Chapter-1-Complete-Syntax-Comparison">Chapter 1: Complete Syntax Comparison</a><ul><li><a href="#1-1-Function-Declaration-Methods">1.1 Function Declaration Methods</a></li><li><a href="#1-2-Parameter-Handling-Comparison">1.2 Parameter Handling Comparison</a></li></ul></li><li><a href="#Chapter-2-Deep-Dive-into-Arrow-Functions">Chapter 2: Deep Dive into Arrow Functions</a><ul><li><a href="#2-1-Arrow-Function-Syntax-Breakdown">2.1 Arrow Function Syntax Breakdown</a></li><li><a href="#2-2-Arrow-Functions-vs-Java-Lambda">2.2 Arrow Functions vs Java Lambda</a></li><li><a href="#2-3-Special-Characteristics-of-Arrow-Functions">2.3 Special Characteristics of Arrow Functions</a></li></ul></li><li><a href="#Chapter-3-TypeScript-Function-Type-System">Chapter 3: TypeScript Function Type System</a><ul><li><a href="#3-1-Value-of-Function-Type-Definitions-and-Annotations">3.1 Value of Function Type Definitions and Annotations</a></li><li><a href="#3-2-Higher-Order-Function-Type-Annotations">3.2 Higher-Order Function Type Annotations</a></li><li><a href="#3-3-Complex-Type-Combinations">3.3 Complex Type Combinations</a></li></ul></li><li><a href="#Chapter-4-Modern-JavaScript-TypeScript-Function-Features">Chapter 4: Modern JavaScript&#x2F;TypeScript Function Features</a><ul><li><a href="#4-1-Async-Functions-async-await">4.1 Async Functions (async&#x2F;await)</a></li><li><a href="#4-2-Generic-Functions">4.2 Generic Functions</a></li><li><a href="#4-3-Function-Overloading">4.3 Function Overloading</a></li></ul></li><li><a href="#Chapter-5-Practical-Application-Scenarios">Chapter 5: Practical Application Scenarios</a><ul><li><a href="#5-1-Event-Handler-Functions">5.1 Event Handler Functions</a></li><li><a href="#5-2-Functional-Programming-Patterns">5.2 Functional Programming Patterns</a></li><li><a href="#5-3-Async-Data-Fetching-and-Caching">5.3 Async Data Fetching and Caching</a></li></ul></li><li><a href="#Chapter-6-Best-Practices-and-Considerations">Chapter 6: Best Practices and Considerations</a><ul><li><a href="#6-1-When-to-Use-Different-Function-Declaration-Methods">6.1 When to Use Different Function Declaration Methods</a></li><li><a href="#6-2-Type-Safe-Function-Design">6.2 Type-Safe Function Design</a></li><li><a href="#6-3-Error-Handling-Best-Practices">6.3 Error Handling Best Practices</a></li></ul></li><li><a href="#Summary">Summary</a></li></ul><h2 id="Introduction-From-Confusion-to-Clarity"><a href="#Introduction-From-Confusion-to-Clarity" class="headerlink" title="Introduction: From Confusion to Clarity"></a>Introduction: From Confusion to Clarity</h2><h3 id="Code-Snippet-That-Sparked-Thinking"><a href="#Code-Snippet-That-Sparked-Thinking" class="headerlink" title="Code Snippet That Sparked Thinking"></a>Code Snippet That Sparked Thinking</h3><p>When analyzing TanStack Router source code, we encountered this function definition:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">createRouter</span>: <span class="title class_">CreateRouterFn</span> = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Router</span>(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For Java developers, this syntax contains multiple unfamiliar concepts:</p><ul><li>Functions declared as constants?</li><li>Why is the type annotation after the function name?</li><li>What is the <code>=&gt;</code> operator?</li></ul><h3 id="Fundamental-Differences-Between-Java-vs-JavaScript-TypeScript"><a href="#Fundamental-Differences-Between-Java-vs-JavaScript-TypeScript" class="headerlink" title="Fundamental Differences Between Java vs JavaScript&#x2F;TypeScript"></a>Fundamental Differences Between Java vs JavaScript&#x2F;TypeScript</h3><table><thead><tr><th>Feature</th><th>Java</th><th>JavaScript&#x2F;TypeScript</th></tr></thead><tbody><tr><td><strong>Function Status</strong></td><td>Methods must belong to classes</td><td>Functions are first-class citizens, can exist independently</td></tr><tr><td><strong>Type System</strong></td><td>Static typing, compile-time checking</td><td>JS dynamic typing, TS optional static typing</td></tr><tr><td><strong>Function Assignment</strong></td><td>Cannot directly assign methods to variables</td><td>Functions can be assigned to variables</td></tr><tr><td><strong>Syntax Flexibility</strong></td><td>Relatively fixed syntax</td><td>Multiple function declaration methods</td></tr></tbody></table><h2 id="Chapter-1-Complete-Syntax-Comparison"><a href="#Chapter-1-Complete-Syntax-Comparison" class="headerlink" title="Chapter 1: Complete Syntax Comparison"></a>Chapter 1: Complete Syntax Comparison</h2><h3 id="1-1-Function-Declaration-Methods"><a href="#1-1-Function-Declaration-Methods" class="headerlink" title="1.1 Function Declaration Methods"></a>1.1 Function Declaration Methods</h3><h4 id="Traditional-Function-Declaration"><a href="#Traditional-Function-Declaration" class="headerlink" title="Traditional Function Declaration"></a>Traditional Function Declaration</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript/JavaScript</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createUser</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>): <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java equivalent</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">createUser</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Key Differences</strong>:</p><ul><li><strong>Type Position</strong>: TypeScript annotates types after parameters with <code>:</code>, Java declares types before parameters</li><li><strong>Access Modifiers</strong>: JavaScript has no <code>public/private</code> concept, uses <code>export</code> to control visibility</li><li><strong>Return Type</strong>: TypeScript annotates after parameter list with <code>:</code>, Java declares before method name</li></ul><h4 id="Function-Expression-Assigned-to-Variable"><a href="#Function-Expression-Assigned-to-Variable" class="headerlink" title="Function Expression (Assigned to Variable)"></a>Function Expression (Assigned to Variable)</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript - Function as value assigned to variable</span></span><br><span class="line"><span class="keyword">const</span> createUser = <span class="keyword">function</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>): <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 8+ using functional interface for similar effect</span></span><br><span class="line">BiFunction&lt;String, Integer, User&gt; createUser = </span><br><span class="line">    (name, age) -&gt; <span class="keyword">new</span> <span class="title class_">User</span>(name, age);</span><br></pre></td></tr></table></figure><p><strong>Concept Mapping</strong>:</p><ul><li>JavaScript function variable ≈ Java functional interface variable</li><li>But JavaScript is more intuitive, no need to predefine interfaces</li></ul><h3 id="1-2-Parameter-Handling-Comparison"><a href="#1-2-Parameter-Handling-Comparison" class="headerlink" title="1.2 Parameter Handling Comparison"></a>1.2 Parameter Handling Comparison</h3><h4 id="Optional-Parameters"><a href="#Optional-Parameters" class="headerlink" title="Optional Parameters"></a>Optional Parameters</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript - Native support for optional parameters</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">greeting</span>?: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;greeting || <span class="string">&#x27;Hello&#x27;</span>&#125;</span>, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&#x27;Alice&#x27;</span>);           <span class="comment">// &quot;Hello, Alice!&quot;</span></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Hi&#x27;</span>);      <span class="comment">// &quot;Hi, Bob!&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java - Requires method overloading</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">greet</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> greet(name, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">greet</span><span class="params">(String name, String greeting)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> greeting + <span class="string">&quot;, &quot;</span> + name + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Default-Parameter-Values"><a href="#Default-Parameter-Values" class="headerlink" title="Default Parameter Values"></a>Default Parameter Values</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript - Set default values directly on parameters</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createConfig</span>(<span class="params"><span class="attr">host</span>: <span class="built_in">string</span> = <span class="string">&#x27;localhost&#x27;</span>, <span class="attr">port</span>: <span class="built_in">number</span> = <span class="number">3000</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; host, port &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java - Implement through method overloading or Builder pattern</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Config <span class="title function_">createConfig</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> createConfig(<span class="string">&quot;localhost&quot;</span>, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Config <span class="title function_">createConfig</span><span class="params">(String host, <span class="type">int</span> port)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Config</span>(host, port);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Chapter-2-Deep-Dive-into-Arrow-Functions"><a href="#Chapter-2-Deep-Dive-into-Arrow-Functions" class="headerlink" title="Chapter 2: Deep Dive into Arrow Functions"></a>Chapter 2: Deep Dive into Arrow Functions</h2><h3 id="2-1-Arrow-Function-Syntax-Breakdown"><a href="#2-1-Arrow-Function-Syntax-Breakdown" class="headerlink" title="2.1 Arrow Function Syntax Breakdown"></a>2.1 Arrow Function Syntax Breakdown</h3><p>Let’s step by step break down that confusing syntax:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">createRouter</span>: <span class="title class_">CreateRouterFn</span> = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Router</span>(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-by-Step Breakdown</strong>:</p><ol><li><code>export const createRouter</code> - Export a constant</li><li><code>: CreateRouterFn</code> - Type annotation (this is a function type, not a return type!)</li><li><code>=</code> - Assignment operation</li><li><code>(options) =&gt;</code> - Arrow function parameter section</li><li><code>&#123; return new Router(options) &#125;</code> - Arrow function body</li></ol><h3 id="2-2-Arrow-Functions-vs-Java-Lambda"><a href="#2-2-Arrow-Functions-vs-Java-Lambda" class="headerlink" title="2.2 Arrow Functions vs Java Lambda"></a>2.2 Arrow Functions vs Java Lambda</h3><h4 id="Basic-Syntax-Comparison"><a href="#Basic-Syntax-Comparison" class="headerlink" title="Basic Syntax Comparison"></a>Basic Syntax Comparison</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript arrow function</span></span><br><span class="line"><span class="keyword">const</span> add = (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Simplified version (single line return)</span></span><br><span class="line"><span class="keyword">const</span> add = (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> a + b;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java Lambda expression</span></span><br><span class="line">BiFunction&lt;Integer, Integer, Integer&gt; add = </span><br><span class="line">    (a, b) -&gt; a + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Or using method reference</span></span><br><span class="line">BinaryOperator&lt;Integer&gt; add = Integer::sum;</span><br></pre></td></tr></table></figure><h4 id="Complex-Scenario-Comparison"><a href="#Complex-Scenario-Comparison" class="headerlink" title="Complex Scenario Comparison"></a>Complex Scenario Comparison</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript - Array processing</span></span><br><span class="line"><span class="keyword">const</span> users = [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Charlie&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Filter and map</span></span><br><span class="line"><span class="keyword">const</span> activeUsers = users</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="function"><span class="params">name</span> =&gt;</span> name.<span class="property">length</span> &gt; <span class="number">3</span>)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function"><span class="params">name</span> =&gt;</span> (&#123; name, <span class="attr">active</span>: <span class="literal">true</span> &#125;));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java Stream API</span></span><br><span class="line">List&lt;String&gt; users = Arrays.asList(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; activeUsers = users.stream()</span><br><span class="line">    .filter(name -&gt; name.length() &gt; <span class="number">3</span>)</span><br><span class="line">    .map(name -&gt; <span class="keyword">new</span> <span class="title class_">User</span>(name, <span class="literal">true</span>))</span><br><span class="line">    .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="2-3-Special-Characteristics-of-Arrow-Functions"><a href="#2-3-Special-Characteristics-of-Arrow-Functions" class="headerlink" title="2.3 Special Characteristics of Arrow Functions"></a>2.3 Special Characteristics of Arrow Functions</h3><h4 id="this-Binding-Differences-JavaScript-specific-Concept"><a href="#this-Binding-Differences-JavaScript-specific-Concept" class="headerlink" title="this Binding Differences (JavaScript-specific Concept)"></a>this Binding Differences (JavaScript-specific Concept)</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventHandler</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> message = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Traditional function - this changes</span></span><br><span class="line">  <span class="title function_">handleClick1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">message</span>); <span class="comment">// undefined! this points to setTimeout</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Arrow function - this remains unchanged</span></span><br><span class="line">  <span class="title function_">handleClick2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">message</span>); <span class="comment">// &quot;Hello&quot; - this still points to EventHandler instance</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java Comparison</strong>: Java doesn’t have this problem because there’s no dynamic <code>this</code> binding concept.</p><h2 id="Chapter-3-TypeScript-Function-Type-System"><a href="#Chapter-3-TypeScript-Function-Type-System" class="headerlink" title="Chapter 3: TypeScript Function Type System"></a>Chapter 3: TypeScript Function Type System</h2><h3 id="3-1-Value-of-Function-Type-Definitions-and-Annotations"><a href="#3-1-Value-of-Function-Type-Definitions-and-Annotations" class="headerlink" title="3.1 Value of Function Type Definitions and Annotations"></a>3.1 Value of Function Type Definitions and Annotations</h3><p>Returning to the initial confusion, what exactly is <code>CreateRouterFn</code>? Why do we need function type annotations?</p><h4 id="Key-Understanding-Functions-are-“Values”-in-JavaScript-not-“Methods”"><a href="#Key-Understanding-Functions-are-“Values”-in-JavaScript-not-“Methods”" class="headerlink" title="Key Understanding: Functions are “Values” in JavaScript, not “Methods”"></a>Key Understanding: Functions are “Values” in JavaScript, not “Methods”</h4><p>This is the key difficulty for Java developers understanding JavaScript&#x2F;TypeScript:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java - Methods belong to classes, cannot exist independently</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;  <span class="comment">// This is a method, not a value</span></span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// You cannot do this: Calculator.add = someOtherMethod;  // Compilation error!</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript/TypeScript - Functions are values, can be assigned and passed</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Functions can be reassigned!</span></span><br><span class="line">add = <span class="keyword">function</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;  <span class="comment">// Now add is actually multiplication</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Functions can be passed as variables</span></span><br><span class="line"><span class="keyword">const</span> myOperation = add;</span><br></pre></td></tr></table></figure><h4 id="Practical-Value-of-Function-Type-Annotations"><a href="#Practical-Value-of-Function-Type-Annotations" class="headerlink" title="Practical Value of Function Type Annotations"></a>Practical Value of Function Type Annotations</h4><p><strong>1. Ensuring Functions Match Expected “Shape”</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Define a function type - this is a &quot;template&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MathOperation</span> = <span class="function">(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now I can ensure any MathOperation type variable has the correct signature</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">add</span>: <span class="title class_">MathOperation</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;        <span class="comment">// ✅ Matches</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">multiply</span>: <span class="title class_">MathOperation</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a * b;   <span class="comment">// ✅ Matches</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// These will error!</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">badFunction</span>: <span class="title class_">MathOperation</span> = <span class="function">(<span class="params">a</span>) =&gt;</span> a;       <span class="comment">// ❌ Parameter mismatch</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">anotherBad</span>: <span class="title class_">MathOperation</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="string">&quot;hi&quot;</span>;  <span class="comment">// ❌ Return type mismatch</span></span><br></pre></td></tr></table></figure><p><strong>Java Comparison</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MathOperation</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">apply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">MathOperation</span> <span class="variable">add</span> <span class="operator">=</span> (a, b) -&gt; a + b;</span><br><span class="line"><span class="type">MathOperation</span> <span class="variable">multiply</span> <span class="operator">=</span> (a, b) -&gt; a * b;</span><br></pre></td></tr></table></figure><p><strong>2. Type Safety When Functions are Parameters</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Function to process arrays, requiring specific operation function signature</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processNumbers</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="attr">numbers</span>: <span class="built_in">number</span>[], </span></span><br><span class="line"><span class="params">    <span class="attr">operation</span>: (a: <span class="built_in">number</span>, b: <span class="built_in">number</span>) =&gt; <span class="built_in">number</span>  <span class="comment">// Function type annotation</span></span></span><br><span class="line"><span class="params"></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> numbers.<span class="title function_">reduce</span>(operation);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TypeScript checks if passed functions match requirements</span></span><br><span class="line"><span class="title function_">processNumbers</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);     <span class="comment">// ✅ Sum operation</span></span><br><span class="line"><span class="title function_">processNumbers</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="function">(<span class="params">a, b</span>) =&gt;</span> a * b);     <span class="comment">// ✅ Product operation</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// These will cause errors!</span></span><br><span class="line"><span class="title function_">processNumbers</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="function">(<span class="params">a</span>) =&gt;</span> a);            <span class="comment">// ❌ Parameter mismatch</span></span><br><span class="line"><span class="title function_">processNumbers</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="string">&quot;hello&quot;</span>);   <span class="comment">// ❌ Return type mismatch</span></span><br></pre></td></tr></table></figure><p><strong>3. Creating Configurable Function Factories</strong></p><p>Returning to the initially confusing code:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This defines &quot;what kind of function can create a Router&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CreateRouterFn</span> = <span class="function">(<span class="params"><span class="attr">options</span>: <span class="title class_">RouterOptions</span></span>) =&gt;</span> <span class="title class_">Router</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now I can have multiple ways to create Routers, but all must conform to this &quot;shape&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">createRouter</span>: <span class="title class_">CreateRouterFn</span> = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Router</span>(options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// I can also create other functions that conform to the same type</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">createTestRouter</span>: <span class="title class_">CreateRouterFn</span> = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;...options, <span class="attr">testMode</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">createCachedRouter</span>: <span class="title class_">CreateRouterFn</span> = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Check cache first</span></span><br><span class="line">    <span class="keyword">if</span> (routerCache.<span class="title function_">has</span>(options.<span class="property">id</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> routerCache.<span class="title function_">get</span>(options.<span class="property">id</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>(options);</span><br><span class="line">    routerCache.<span class="title function_">set</span>(options.<span class="property">id</span>, router);</span><br><span class="line">    <span class="keyword">return</span> router;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dynamically switch functions based on environment</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">createRouter</span>: <span class="title class_">CreateRouterFn</span> = </span><br><span class="line">    process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span> </span><br><span class="line">        ? createTestRouter      <span class="comment">// Development environment uses test version</span></span><br><span class="line">        : createProductionRouter; <span class="comment">// Production environment uses official version</span></span><br></pre></td></tr></table></figure><p><strong>4. Type-Safe Plugin System</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Define the function type that plugins must implement</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PluginInitializer</span> = <span class="function">(<span class="params"><span class="attr">config</span>: <span class="title class_">PluginConfig</span></span>) =&gt;</span> <span class="title class_">PluginInstance</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PluginManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">plugins</span>: <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="title class_">PluginInitializer</span>&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ensure type correctness when registering plugins</span></span><br><span class="line">    <span class="title function_">register</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">initializer</span>: <span class="title class_">PluginInitializer</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">plugins</span>.<span class="title function_">set</span>(name, initializer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use plugins - TypeScript ensures calls are safe</span></span><br><span class="line">    <span class="title function_">createPlugin</span>(<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">config</span>: <span class="title class_">PluginConfig</span>): <span class="title class_">PluginInstance</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> initializer = <span class="variable language_">this</span>.<span class="property">plugins</span>.<span class="title function_">get</span>(name);</span><br><span class="line">        <span class="keyword">if</span> (!initializer) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Plugin <span class="subst">$&#123;name&#125;</span> not found`</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">initializer</span>(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Summary-of-Function-Type-Annotation-Value"><a href="#Summary-of-Function-Type-Annotation-Value" class="headerlink" title="Summary of Function Type Annotation Value"></a>Summary of Function Type Annotation Value</h4><ol><li><strong>Ensure Consistency</strong>: All functions serving the same purpose have identical signatures</li><li><strong>Type Safety</strong>: No parameter mismatch issues when passing functions  </li><li><strong>Code Hints</strong>: IDEs can accurately suggest function parameters and return values</li><li><strong>Refactoring Safety</strong>: When function signatures change, all usage locations automatically report errors</li><li><strong>Documentation Role</strong>: Types serve as the best documentation, explaining function purpose and constraints</li></ol><p><strong>Understanding for Java Developers</strong>:</p><ul><li>Function types ≈ Java functional interfaces</li><li>But JavaScript function types are more flexible, can be defined directly without creating interfaces first</li></ul><h4 id="Equivalent-Interface-Definition-Methods"><a href="#Equivalent-Interface-Definition-Methods" class="headerlink" title="Equivalent Interface Definition Methods"></a>Equivalent Interface Definition Methods</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Type alias approach</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CreateRouterFn</span> = <span class="function">(<span class="params"><span class="attr">options</span>: <span class="title class_">RouterOptions</span></span>) =&gt;</span> <span class="title class_">Router</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Interface approach</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CreateRouterFunction</span> &#123;</span><br><span class="line">  (<span class="attr">options</span>: <span class="title class_">RouterOptions</span>): <span class="title class_">Router</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-Higher-Order-Function-Type-Annotations"><a href="#3-2-Higher-Order-Function-Type-Annotations" class="headerlink" title="3.2 Higher-Order Function Type Annotations"></a>3.2 Higher-Order Function Type Annotations</h3><h4 id="Functions-as-Parameters"><a href="#Functions-as-Parameters" class="headerlink" title="Functions as Parameters"></a>Functions as Parameters</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript - Functions as parameters</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processData</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="attr">data</span>: <span class="built_in">string</span>[], </span></span><br><span class="line"><span class="params">  <span class="attr">processor</span>: (item: <span class="built_in">string</span>) =&gt; <span class="built_in">string</span></span></span><br><span class="line"><span class="params"></span>): <span class="built_in">string</span>[] &#123;</span><br><span class="line">  <span class="keyword">return</span> data.<span class="title function_">map</span>(processor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">processData</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], <span class="function"><span class="params">item</span> =&gt;</span> item.<span class="title function_">toUpperCase</span>());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java - Using Function interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">processData</span><span class="params">(</span></span><br><span class="line"><span class="params">    List&lt;String&gt; data, </span></span><br><span class="line"><span class="params">    Function&lt;String, String&gt; processor</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data.stream()</span><br><span class="line">        .map(processor)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line">List&lt;String&gt; result = processData(</span><br><span class="line">    Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>), </span><br><span class="line">    String::toUpperCase</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="Functions-as-Return-Values"><a href="#Functions-as-Return-Values" class="headerlink" title="Functions as Return Values"></a>Functions as Return Values</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript - Factory functions</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createValidator</span>(<span class="params"><span class="attr">minLength</span>: <span class="built_in">number</span></span>): <span class="function">(<span class="params"><span class="attr">input</span>: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params"><span class="attr">input</span>: <span class="built_in">string</span></span>) =&gt;</span> input.<span class="property">length</span> &gt;= minLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="keyword">const</span> validateEmail = <span class="title function_">createValidator</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> isValid = <span class="title function_">validateEmail</span>(<span class="string">&quot;test@example.com&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java - Returning functional interfaces</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Function&lt;String, Boolean&gt; <span class="title function_">createValidator</span><span class="params">(<span class="type">int</span> minLength)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> input -&gt; input.length() &gt;= minLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line">Function&lt;String, Boolean&gt; validateEmail = createValidator(<span class="number">5</span>);</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">isValid</span> <span class="operator">=</span> validateEmail.apply(<span class="string">&quot;test@example.com&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="3-3-Complex-Type-Combinations"><a href="#3-3-Complex-Type-Combinations" class="headerlink" title="3.3 Complex Type Combinations"></a>3.3 Complex Type Combinations</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Complex function type combinations</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AsyncProcessor</span>&lt;T, R&gt; = <span class="function">(<span class="params"><span class="attr">input</span>: T</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;R&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ErrorHandler</span> = <span class="function">(<span class="params"><span class="attr">error</span>: <span class="title class_">Error</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">DataPipeline</span>&lt;T, R&gt; &#123;</span><br><span class="line">  <span class="attr">process</span>: <span class="title class_">AsyncProcessor</span>&lt;T, R&gt;;</span><br><span class="line">  <span class="attr">onError</span>: <span class="title class_">ErrorHandler</span>;</span><br><span class="line">  <span class="attr">retryCount</span>?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implementation</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">userPipeline</span>: <span class="title class_">DataPipeline</span>&lt;<span class="title class_">UserInput</span>, <span class="title class_">User</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">process</span>: <span class="title function_">async</span> (input) =&gt; &#123;</span><br><span class="line">    <span class="comment">// Async processing logic</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(input.<span class="property">name</span>, input.<span class="property">age</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onError</span>: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Processing failed:&#x27;</span>, error);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">retryCount</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Chapter-4-Modern-JavaScript-TypeScript-Function-Features"><a href="#Chapter-4-Modern-JavaScript-TypeScript-Function-Features" class="headerlink" title="Chapter 4: Modern JavaScript&#x2F;TypeScript Function Features"></a>Chapter 4: Modern JavaScript&#x2F;TypeScript Function Features</h2><h3 id="4-1-Async-Functions-async-await"><a href="#4-1-Async-Functions-async-await" class="headerlink" title="4.1 Async Functions (async&#x2F;await)"></a>4.1 Async Functions (async&#x2F;await)</h3><p>This is an important concept that Java developers need to relearn.</p><h4 id="Basic-Async-Functions"><a href="#Basic-Async-Functions" class="headerlink" title="Basic Async Functions"></a>Basic Async Functions</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript async functions</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUserData</span>(<span class="params"><span class="attr">userId</span>: <span class="built_in">string</span></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">const</span> userData = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(userData);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Failed to fetch user: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Arrow function version</span></span><br><span class="line"><span class="keyword">const</span> fetchUserData = <span class="title function_">async</span> (<span class="attr">userId</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="keyword">await</span> response.<span class="title function_">json</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java Comparison</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java - Using CompletableFuture</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;User&gt; <span class="title function_">fetchUserData</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// HTTP request logic (pseudocode)</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.get(<span class="string">&quot;/api/users/&quot;</span> + userId);</span><br><span class="line">            <span class="type">UserData</span> <span class="variable">userData</span> <span class="operator">=</span> objectMapper.readValue(response, UserData.class);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(userData);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Failed to fetch user: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Parallel-Async-Processing"><a href="#Parallel-Async-Processing" class="headerlink" title="Parallel Async Processing"></a>Parallel Async Processing</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript - Parallel processing</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadUserProfile</span>(<span class="params"><span class="attr">userId</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, posts, friends] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">    <span class="title function_">fetchUser</span>(userId),</span><br><span class="line">    <span class="title function_">fetchUserPosts</span>(userId),</span><br><span class="line">    <span class="title function_">fetchUserFriends</span>(userId)</span><br><span class="line">  ]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123; user, posts, friends &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java - CompletableFuture parallel processing</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;UserProfile&gt; <span class="title function_">loadUserProfile</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">    CompletableFuture&lt;User&gt; userFuture = fetchUser(userId);</span><br><span class="line">    CompletableFuture&lt;List&lt;Post&gt;&gt; postsFuture = fetchUserPosts(userId);</span><br><span class="line">    CompletableFuture&lt;List&lt;User&gt;&gt; friendsFuture = fetchUserFriends(userId);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> CompletableFuture.allOf(userFuture, postsFuture, friendsFuture)</span><br><span class="line">        .thenApply(ignored -&gt; <span class="keyword">new</span> <span class="title class_">UserProfile</span>(</span><br><span class="line">            userFuture.join(),</span><br><span class="line">            postsFuture.join(),</span><br><span class="line">            friendsFuture.join()</span><br><span class="line">        ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-Generic-Functions"><a href="#4-2-Generic-Functions" class="headerlink" title="4.2 Generic Functions"></a>4.2 Generic Functions</h3><h4 id="TypeScript-Generic-Functions"><a href="#TypeScript-Generic-Functions" class="headerlink" title="TypeScript Generic Functions"></a>TypeScript Generic Functions</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Basic generic functions</span></span><br><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Arrow function generics</span></span><br><span class="line"><span class="keyword">const</span> identity = &lt;T&gt;(<span class="attr">arg</span>: T): <span class="function"><span class="params">T</span> =&gt;</span> arg;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constrained generics</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Lengthwise</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getLength&lt;T <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt;(<span class="attr">arg</span>: T): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="keyword">const</span> stringLength = <span class="title function_">getLength</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// 5</span></span><br><span class="line"><span class="keyword">const</span> arrayLength = <span class="title function_">getLength</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>Java Comparison</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java generic methods</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">identity</span><span class="params">(T arg)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bounded generics</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt; <span class="type">int</span> <span class="title function_">getLength</span><span class="params">(T arg)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arg.getLength();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result1</span> <span class="operator">=</span> identity(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">result2</span> <span class="operator">=</span> identity(<span class="number">42</span>);</span><br></pre></td></tr></table></figure><h4 id="Complex-Generic-Scenarios"><a href="#Complex-Generic-Scenarios" class="headerlink" title="Complex Generic Scenarios"></a>Complex Generic Scenarios</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Advanced generic functions</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">KeyValuePair</span>&lt;K, V&gt; = &#123;</span><br><span class="line">  <span class="attr">key</span>: K;</span><br><span class="line">  <span class="attr">value</span>: V;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> createMap&lt;K <span class="keyword">extends</span> <span class="built_in">string</span> | <span class="built_in">number</span>, V&gt;(</span><br><span class="line">  <span class="attr">pairs</span>: <span class="title class_">KeyValuePair</span>&lt;K, V&gt;[]</span><br><span class="line">): <span class="title class_">Map</span>&lt;K, V&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;K, V&gt;();</span><br><span class="line">  pairs.<span class="title function_">forEach</span>(<span class="function"><span class="params">pair</span> =&gt;</span> map.<span class="title function_">set</span>(pair.<span class="property">key</span>, pair.<span class="property">value</span>));</span><br><span class="line">  <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="keyword">const</span> userMap = <span class="title function_">createMap</span>([</span><br><span class="line">  &#123; <span class="attr">key</span>: <span class="string">&#x27;alice&#x27;</span>, <span class="attr">value</span>: <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;Alice&#x27;</span>) &#125;,</span><br><span class="line">  &#123; <span class="attr">key</span>: <span class="string">&#x27;bob&#x27;</span>, <span class="attr">value</span>: <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;Bob&#x27;</span>) &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="4-3-Function-Overloading"><a href="#4-3-Function-Overloading" class="headerlink" title="4.3 Function Overloading"></a>4.3 Function Overloading</h3><p>A TypeScript-specific feature; Java achieves similar effects through method overloading.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript function overload declarations</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"><span class="attr">input</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"><span class="attr">input</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"><span class="attr">input</span>: <span class="built_in">boolean</span></span>): <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Actual implementation</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"><span class="attr">input</span>: <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span></span>): <span class="built_in">string</span> | <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> input === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> input.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> input === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> input * <span class="number">2</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> input.<span class="title function_">toString</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage - TypeScript infers return type based on parameter type</span></span><br><span class="line"><span class="keyword">const</span> stringResult = <span class="title function_">process</span>(<span class="string">&quot;hello&quot;</span>);    <span class="comment">// Type: string</span></span><br><span class="line"><span class="keyword">const</span> numberResult = <span class="title function_">process</span>(<span class="number">42</span>);         <span class="comment">// Type: number</span></span><br><span class="line"><span class="keyword">const</span> booleanResult = <span class="title function_">process</span>(<span class="literal">true</span>);      <span class="comment">// Type: string</span></span><br></pre></td></tr></table></figure><p><strong>Java Comparison</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java method overloading</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">process</span><span class="params">(String input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> input.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span> input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> input * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">process</span><span class="params">(<span class="type">boolean</span> input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Chapter-5-Practical-Application-Scenarios"><a href="#Chapter-5-Practical-Application-Scenarios" class="headerlink" title="Chapter 5: Practical Application Scenarios"></a>Chapter 5: Practical Application Scenarios</h2><h3 id="5-1-Event-Handler-Functions"><a href="#5-1-Event-Handler-Functions" class="headerlink" title="5.1 Event Handler Functions"></a>5.1 Event Handler Functions</h3><h4 id="DOM-Event-Handling"><a href="#DOM-Event-Handling" class="headerlink" title="DOM Event Handling"></a>DOM Event Handling</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript event handling</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ButtonHandler</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> clickCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Arrow function ensures correct this binding</span></span><br><span class="line">  handleClick = <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">MouseEvent</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">clickCount</span>++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Button clicked <span class="subst">$&#123;<span class="variable language_">this</span>.clickCount&#125;</span> times`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Traditional functions require manual binding</span></span><br><span class="line">  <span class="title function_">handleHover</span>(<span class="params"><span class="attr">event</span>: <span class="title class_">MouseEvent</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Button hovered&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setupEventListeners</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myButton&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (button) &#123;</span><br><span class="line">      button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleClick</span>);</span><br><span class="line">      <span class="comment">// Traditional functions need bind</span></span><br><span class="line">      button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleHover</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Event-Handling-in-React-Components"><a href="#Event-Handling-in-React-Components" class="headerlink" title="Event Handling in React Components"></a>Event Handling in React Components</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React functional component</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserFormProps</span> &#123;</span><br><span class="line">  <span class="attr">onSubmit</span>: <span class="function">(<span class="params"><span class="attr">user</span>: <span class="title class_">User</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">onCancel</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserForm</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">UserFormProps</span>&gt; = <span class="function">(<span class="params">&#123; onSubmit, onCancel &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [email, setEmail] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Form submission handling</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSubmit</span> = (<span class="params"><span class="attr">e</span>: <span class="title class_">React</span>.<span class="title class_">FormEvent</span></span>) =&gt; &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="keyword">if</span> (name &amp;&amp; email) &#123;</span><br><span class="line">      <span class="title function_">onSubmit</span>(<span class="keyword">new</span> <span class="title class_">User</span>(name, email));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Input change handling</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleNameChange</span> = (<span class="params"><span class="attr">e</span>: <span class="title class_">React</span>.<span class="title class_">ChangeEvent</span>&lt;<span class="title class_">HTMLInputElement</span>&gt;</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setName</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;name&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;handleNameChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">placeholder</span>=<span class="string">&quot;Name&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;email&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setEmail(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">        placeholder=&quot;Email&quot; </span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;onCancel&#125;</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-2-Functional-Programming-Patterns"><a href="#5-2-Functional-Programming-Patterns" class="headerlink" title="5.2 Functional Programming Patterns"></a>5.2 Functional Programming Patterns</h3><h4 id="Data-Processing-Pipelines"><a href="#Data-Processing-Pipelines" class="headerlink" title="Data Processing Pipelines"></a>Data Processing Pipelines</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Functional data processing</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">price</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">category</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">  <span class="comment">// Pure functions - no side effects</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> filterByCategory = <span class="function">(<span class="params"><span class="attr">category</span>: <span class="built_in">string</span></span>) =&gt;</span> </span><br><span class="line">    <span class="function">(<span class="params"><span class="attr">product</span>: <span class="title class_">Product</span></span>) =&gt;</span> product.<span class="property">category</span> === category;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> filterByPrice = <span class="function">(<span class="params"><span class="attr">maxPrice</span>: <span class="built_in">number</span></span>) =&gt;</span> </span><br><span class="line">    <span class="function">(<span class="params"><span class="attr">product</span>: <span class="title class_">Product</span></span>) =&gt;</span> product.<span class="property">price</span> &lt;= maxPrice;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> sortByPrice = <span class="function">(<span class="params"><span class="attr">ascending</span>: <span class="built_in">boolean</span> = <span class="literal">true</span></span>) =&gt;</span> </span><br><span class="line">    <span class="function">(<span class="params"><span class="attr">a</span>: <span class="title class_">Product</span>, <span class="attr">b</span>: <span class="title class_">Product</span></span>) =&gt;</span> </span><br><span class="line">      ascending ? a.<span class="property">price</span> - b.<span class="property">price</span> : b.<span class="property">price</span> - a.<span class="property">price</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Compose functions to create processing pipeline</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">searchProducts</span>(</span><br><span class="line">    <span class="attr">products</span>: <span class="title class_">Product</span>[],</span><br><span class="line">    <span class="attr">category</span>?: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">maxPrice</span>?: <span class="built_in">number</span>,</span><br><span class="line">    sortAscending = <span class="literal">true</span></span><br><span class="line">  ): <span class="title class_">Product</span>[] &#123;</span><br><span class="line">    <span class="keyword">let</span> result = products;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (category) &#123;</span><br><span class="line">      result = result.<span class="title function_">filter</span>(<span class="variable language_">this</span>.<span class="title function_">filterByCategory</span>(category));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (maxPrice) &#123;</span><br><span class="line">      result = result.<span class="title function_">filter</span>(<span class="variable language_">this</span>.<span class="title function_">filterByPrice</span>(maxPrice));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.<span class="title function_">sort</span>(<span class="variable language_">this</span>.<span class="title function_">sortByPrice</span>(sortAscending));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="keyword">const</span> products = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Laptop&#x27;</span>, <span class="attr">price</span>: <span class="number">1000</span>, <span class="attr">category</span>: <span class="string">&#x27;Electronics&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Book&#x27;</span>, <span class="attr">price</span>: <span class="number">20</span>, <span class="attr">category</span>: <span class="string">&#x27;Education&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Phone&#x27;</span>, <span class="attr">price</span>: <span class="number">800</span>, <span class="attr">category</span>: <span class="string">&#x27;Electronics&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cheapElectronics = <span class="title class_">ProductService</span>.<span class="title function_">searchProducts</span>(</span><br><span class="line">  products,</span><br><span class="line">  <span class="string">&#x27;Electronics&#x27;</span>,</span><br><span class="line">  <span class="number">900</span>,</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="5-3-Async-Data-Fetching-and-Caching"><a href="#5-3-Async-Data-Fetching-and-Caching" class="headerlink" title="5.3 Async Data Fetching and Caching"></a>5.3 Async Data Fetching and Caching</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Advanced async patterns</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataCache</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> cache = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, &#123; <span class="attr">data</span>: T; <span class="attr">timestamp</span>: <span class="built_in">number</span> &#125;&gt;();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="variable constant_">TTL</span> = <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>; <span class="comment">// 5 minutes</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Generic fetch function with cache support</span></span><br><span class="line">  <span class="keyword">async</span> fetchWithCache&lt;R&gt;(</span><br><span class="line">    <span class="attr">key</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">fetcher</span>: <span class="function">() =&gt;</span> <span class="title class_">Promise</span>&lt;R&gt;,</span><br><span class="line">    ttl = <span class="variable language_">this</span>.<span class="property">TTL</span></span><br><span class="line">  ): <span class="title class_">Promise</span>&lt;R&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> cached = <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(key);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (cached &amp;&amp; <span class="title class_">Date</span>.<span class="title function_">now</span>() - cached.<span class="property">timestamp</span> &lt; ttl) &#123;</span><br><span class="line">      <span class="keyword">return</span> cached.<span class="property">data</span> <span class="keyword">as</span> R;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetcher</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key, &#123; <span class="attr">data</span>: data <span class="keyword">as</span> T, <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>() &#125;);</span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// Return cached data on network error if available</span></span><br><span class="line">      <span class="keyword">if</span> (cached) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;Using stale cache due to fetch error:&#x27;</span>, error);</span><br><span class="line">        <span class="keyword">return</span> cached.<span class="property">data</span> <span class="keyword">as</span> R;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Batch fetching</span></span><br><span class="line">  <span class="keyword">async</span> fetchBatch&lt;R&gt;(</span><br><span class="line">    <span class="attr">requests</span>: <span class="title class_">Array</span>&lt;&#123;</span><br><span class="line">      <span class="attr">key</span>: <span class="built_in">string</span>;</span><br><span class="line">      <span class="attr">fetcher</span>: <span class="function">() =&gt;</span> <span class="title class_">Promise</span>&lt;R&gt;;</span><br><span class="line">    &#125;&gt;</span><br><span class="line">  ): <span class="title class_">Promise</span>&lt;R[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span><br><span class="line">      requests.<span class="title function_">map</span>(<span class="function"><span class="params">req</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">fetchWithCache</span>(req.<span class="property">key</span>, req.<span class="property">fetcher</span>))</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage example</span></span><br><span class="line"><span class="keyword">const</span> userCache = <span class="keyword">new</span> <span class="title class_">DataCache</span>&lt;<span class="title class_">User</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadUserDashboard</span>(<span class="params"><span class="attr">userId</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, posts, notifications] = <span class="keyword">await</span> userCache.<span class="title function_">fetchBatch</span>([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">key</span>: <span class="string">`user:<span class="subst">$&#123;userId&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">fetcher</span>: <span class="function">() =&gt;</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>())</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">key</span>: <span class="string">`posts:<span class="subst">$&#123;userId&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">fetcher</span>: <span class="function">() =&gt;</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>/posts`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>())</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">key</span>: <span class="string">`notifications:<span class="subst">$&#123;userId&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">fetcher</span>: <span class="function">() =&gt;</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>/notifications`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>())</span><br><span class="line">    &#125;</span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; user, posts, notifications &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Chapter-6-Best-Practices-and-Considerations"><a href="#Chapter-6-Best-Practices-and-Considerations" class="headerlink" title="Chapter 6: Best Practices and Considerations"></a>Chapter 6: Best Practices and Considerations</h2><h3 id="6-1-When-to-Use-Different-Function-Declaration-Methods"><a href="#6-1-When-to-Use-Different-Function-Declaration-Methods" class="headerlink" title="6.1 When to Use Different Function Declaration Methods"></a>6.1 When to Use Different Function Declaration Methods</h3><h4 id="Selection-Guide"><a href="#Selection-Guide" class="headerlink" title="Selection Guide"></a>Selection Guide</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Regular function declaration - For top-level functions, hoisting scenarios</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateTax</span>(<span class="params"><span class="attr">amount</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> amount * <span class="number">0.1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Function expression - For conditional function creation</span></span><br><span class="line"><span class="keyword">const</span> calculator = isAdvancedMode </span><br><span class="line">  ? <span class="keyword">function</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>) &#123; <span class="keyword">return</span> a * b * <span class="number">1.2</span>; &#125;</span><br><span class="line">  : <span class="keyword">function</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>) &#123; <span class="keyword">return</span> a * b; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Arrow functions - For callbacks, short logic, preserving this binding</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> doubled = numbers.<span class="title function_">map</span>(<span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Method definitions - For object/class methods</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">  <span class="comment">// Regular method - Can be inherited and overridden</span></span><br><span class="line">  <span class="title function_">calculate</span>(<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Arrow function property - Binds this, but cannot be overridden</span></span><br><span class="line">  multiply = (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Performance-Considerations"><a href="#Performance-Considerations" class="headerlink" title="Performance Considerations"></a>Performance Considerations</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ Avoid - Creating new functions on every render</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Component</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(&#x27;clicked&#x27;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      Click me</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ Recommended - Function reuse</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Component</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clicked&#x27;</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ Recommended - Using arrow function properties in class methods</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clicked&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-Type-Safe-Function-Design"><a href="#6-2-Type-Safe-Function-Design" class="headerlink" title="6.2 Type-Safe Function Design"></a>6.2 Type-Safe Function Design</h3><h4 id="Strict-Type-Annotations"><a href="#Strict-Type-Annotations" class="headerlink" title="Strict Type Annotations"></a>Strict Type Annotations</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Complete type annotations</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserValidator</span> = &#123;</span><br><span class="line">  (<span class="attr">user</span>: <span class="title class_">User</span>): <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">errorMessage</span>?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createUserValidator = (</span><br><span class="line">  <span class="attr">rules</span>: <span class="title class_">Array</span>&lt;<span class="function">(<span class="params"><span class="attr">user</span>: <span class="title class_">User</span></span>) =&gt;</span> <span class="built_in">boolean</span>&gt;,</span><br><span class="line">  errorMessage = <span class="string">&#x27;Invalid user&#x27;</span></span><br><span class="line">): <span class="function"><span class="params">UserValidator</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">validator</span>: <span class="title class_">UserValidator</span> = (<span class="attr">user</span>: <span class="title class_">User</span>): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rules.<span class="title function_">every</span>(<span class="function"><span class="params">rule</span> =&gt;</span> <span class="title function_">rule</span>(user));</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  validator.<span class="property">errorMessage</span> = errorMessage;</span><br><span class="line">  <span class="keyword">return</span> validator;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="keyword">const</span> isValidUser = <span class="title function_">createUserValidator</span>([</span><br><span class="line">  <span class="function">(<span class="params">user</span>) =&gt;</span> user.<span class="property">name</span>.<span class="property">length</span> &gt; <span class="number">0</span>,</span><br><span class="line">  <span class="function">(<span class="params">user</span>) =&gt;</span> user.<span class="property">email</span>.<span class="title function_">includes</span>(<span class="string">&#x27;@&#x27;</span>),</span><br><span class="line">  <span class="function">(<span class="params">user</span>) =&gt;</span> user.<span class="property">age</span> &gt;= <span class="number">18</span></span><br><span class="line">], <span class="string">&#x27;User must have name, valid email, and be at least 18&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_">isValidUser</span>(someUser)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(isValidUser.<span class="property">errorMessage</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Generic-Constraints-and-Conditional-Types"><a href="#Generic-Constraints-and-Conditional-Types" class="headerlink" title="Generic Constraints and Conditional Types"></a>Generic Constraints and Conditional Types</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Advanced type-safe design</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ExtractReturnType</span>&lt;T&gt; = T <span class="title function_">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; infer R ? R : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AsyncFunction</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], R&gt; = <span class="function">(<span class="params">...<span class="attr">args</span>: T</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;R&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create type-safe async function wrapper</span></span><br><span class="line"><span class="keyword">function</span> createAsyncWrapper&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], R&gt;(</span><br><span class="line">  <span class="attr">syncFn</span>: <span class="function">(<span class="params">...<span class="attr">args</span>: T</span>) =&gt;</span> R</span><br><span class="line">): <span class="title class_">AsyncFunction</span>&lt;T, R&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">async</span> (...<span class="attr">args</span>: T): <span class="title class_">Promise</span>&lt;R&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">syncFn</span>(...args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage - Completely type-safe</span></span><br><span class="line"><span class="keyword">const</span> syncAdd = (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> a + b;</span><br><span class="line"><span class="keyword">const</span> asyncAdd = <span class="title function_">createAsyncWrapper</span>(syncAdd);</span><br><span class="line"></span><br><span class="line"><span class="comment">// TypeScript will infer the correct type</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">asyncAdd</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// result type is number</span></span><br></pre></td></tr></table></figure><h3 id="6-3-Error-Handling-Best-Practices"><a href="#6-3-Error-Handling-Best-Practices" class="headerlink" title="6.3 Error Handling Best Practices"></a>6.3 Error Handling Best Practices</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Result type pattern (similar to Rust&#x27;s Result)</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span>&lt;T, E = <span class="title class_">Error</span>&gt; = </span><br><span class="line">  | &#123; <span class="attr">success</span>: <span class="literal">true</span>; <span class="attr">data</span>: T &#125;</span><br><span class="line">  | &#123; <span class="attr">success</span>: <span class="literal">false</span>; <span class="attr">error</span>: E &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Safe async function wrapper</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> safeAsync&lt;T&gt;(</span><br><span class="line">  <span class="attr">promise</span>: <span class="title class_">Promise</span>&lt;T&gt;</span><br><span class="line">): <span class="title class_">Promise</span>&lt;<span class="title class_">Result</span>&lt;T&gt;&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> promise;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">success</span>: <span class="literal">true</span>, data &#125;;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; </span><br><span class="line">      <span class="attr">success</span>: <span class="literal">false</span>, </span><br><span class="line">      <span class="attr">error</span>: error <span class="keyword">instanceof</span> <span class="title class_">Error</span> ? error : <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="title class_">String</span>(error))</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage example</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleUserCreation</span>(<span class="params"><span class="attr">userData</span>: <span class="title class_">UserInput</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">safeAsync</span>(<span class="title function_">createUser</span>(userData));</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (result.<span class="property">success</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User created:&#x27;</span>, result.<span class="property">data</span>);</span><br><span class="line">    <span class="keyword">return</span> result.<span class="property">data</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to create user:&#x27;</span>, result.<span class="property">error</span>.<span class="property">message</span>);</span><br><span class="line">    <span class="keyword">throw</span> result.<span class="property">error</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Through this article’s in-depth comparison and analysis, we have systematically understood the differences and connections between JavaScript&#x2F;TypeScript function syntax and Java:</p><h3 id="Core-Concept-Mapping"><a href="#Core-Concept-Mapping" class="headerlink" title="Core Concept Mapping"></a>Core Concept Mapping</h3><table><thead><tr><th>JavaScript&#x2F;TypeScript</th><th>Java Equivalent</th><th>Key Differences</th></tr></thead><tbody><tr><td>Function Declaration</td><td>Static Method</td><td>JS functions exist independently, no class required</td></tr><tr><td>Arrow Function</td><td>Lambda Expression</td><td>JS arrow functions have this binding characteristics</td></tr><tr><td>Function Types</td><td>Functional Interfaces</td><td>TS type system is more flexible</td></tr><tr><td>async&#x2F;await</td><td>CompletableFuture</td><td>JS native support, more concise syntax</td></tr><tr><td>Function Overloading</td><td>Method Overloading</td><td>TS uses declarative overloading</td></tr></tbody></table><h3 id="Key-Learning-Points-Summary"><a href="#Key-Learning-Points-Summary" class="headerlink" title="Key Learning Points Summary"></a>Key Learning Points Summary</h3><ol><li><strong>Functions are First-Class Citizens</strong>: JavaScript functions can be passed and manipulated like variables</li><li><strong>Type Annotation Position</strong>: TypeScript annotates types after parameters with <code>:</code></li><li><strong>Arrow Function this Binding</strong>: This is a concept Java developers need to pay special attention to</li><li><strong>Async Programming Patterns</strong>: <code>async/await</code> is more intuitive than Java’s <code>CompletableFuture</code></li><li><strong>Type Safety</strong>: TypeScript provides a more flexible type system than Java</li></ol><h3 id="Practical-Recommendations"><a href="#Practical-Recommendations" class="headerlink" title="Practical Recommendations"></a>Practical Recommendations</h3><ul><li><strong>Start Simple</strong>: First master basic function declarations and arrow functions</li><li><strong>Understand this Binding</strong>: This is the biggest difference from Java</li><li><strong>Make Good Use of Type Annotations</strong>: Take full advantage of TypeScript’s type checking capabilities</li><li><strong>Embrace Async Programming</strong>: Master Promise and async&#x2F;await patterns</li><li><strong>Learn Functional Programming</strong>: JavaScript has excellent support for functional programming</li></ul><p>By mastering these concepts, you’ll be able to confidently read and write modern JavaScript&#x2F;TypeScript code, successfully transitioning from a Java developer to a frontend developer!</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;As a Java developer, you might feel confused when you first encounter TypeScript code like this:&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;createRouter&lt;/span&gt;: &lt;span class=&quot;title class_&quot;&gt;CreateRouterFn&lt;/span&gt; = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;options&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Router&lt;/span&gt;(options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What is &lt;code&gt;CreateRouterFn&lt;/code&gt;? What is the &lt;code&gt;=&amp;gt;&lt;/code&gt; syntax? How is this different from Java method declarations? This article will systematically analyze various JavaScript&amp;#x2F;TypeScript function syntax forms from concepts familiar to Java developers, helping you quickly master the core syntax of modern frontend development.&lt;/p&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://blog.baduncle.top/categories/Programming/"/>
    
    
    <category term="typescript" scheme="https://blog.baduncle.top/tags/typescript/"/>
    
    <category term="javascript" scheme="https://blog.baduncle.top/tags/javascript/"/>
    
    <category term="arrow-functions" scheme="https://blog.baduncle.top/tags/arrow-functions/"/>
    
    <category term="java-to-javascript" scheme="https://blog.baduncle.top/tags/java-to-javascript/"/>
    
    <category term="type-annotations" scheme="https://blog.baduncle.top/tags/type-annotations/"/>
    
    <category term="this-binding" scheme="https://blog.baduncle.top/tags/this-binding/"/>
    
    <category term="optional-parameters" scheme="https://blog.baduncle.top/tags/optional-parameters/"/>
    
    <category term="function-types" scheme="https://blog.baduncle.top/tags/function-types/"/>
    
    <category term="async-await" scheme="https://blog.baduncle.top/tags/async-await/"/>
    
    <category term="generics" scheme="https://blog.baduncle.top/tags/generics/"/>
    
  </entry>
  
  <entry>
    <title>TanStack Router scrollRestoration Deep Dive - From Source Code to Implementation</title>
    <link href="https://blog.baduncle.top/2025/08/06/tanstack-router-scroll-restoration-analysis/"/>
    <id>https://blog.baduncle.top/2025/08/06/tanstack-router-scroll-restoration-analysis/</id>
    <published>2025-08-06T11:48:00.000Z</published>
    <updated>2025-08-07T16:43:43.765Z</updated>
    
    <content type="html"><![CDATA[<p>In modern Single Page Application (SPA) development, user experience optimization often lies in the attention to detail. Among these, scroll position restoration is a feature that appears simple but is highly technical. This article will thoroughly analyze the implementation principles of TanStack Router’s <code>scrollRestoration</code> feature, from basic concepts to source code analysis, providing a comprehensive understanding of this important functionality.</p><span id="more"></span><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li><a href="#What-is-scrollRestoration">What is scrollRestoration?</a></li><li><a href="#Use-Case-Examples">Use Case Examples</a><ul><li><a href="#E-commerce-Website-Scenario">E-commerce Website Scenario</a></li><li><a href="#Other-Application-Scenarios">Other Application Scenarios</a></li></ul></li><li><a href="#Basic-Configuration-and-Usage">Basic Configuration and Usage</a></li><li><a href="#Technical-Implementation-Principles">Technical Implementation Principles</a></li><li><a href="#Source-Code-Deep-Analysis">Source Code Deep Analysis</a></li><li><a href="#Scroll-Restoration-Workflow">Scroll Restoration Workflow</a></li><li><a href="#Advanced-Features">Advanced Features</a></li><li><a href="#Performance-Optimization-Mechanisms">Performance Optimization Mechanisms</a></li><li><a href="#Edge-Case-Handling">Edge Case Handling</a></li><li><a href="#Conclusion">Conclusion</a></li></ul><h2 id="What-is-scrollRestoration"><a href="#What-is-scrollRestoration" class="headerlink" title="What is scrollRestoration?"></a>What is scrollRestoration?</h2><p><code>scrollRestoration</code> is a configuration option provided by TanStack Router that controls the behavior of scroll position restoration. When set to <code>true</code>, it will:</p><ul><li><strong>Automatically save scroll position</strong>: Save the current scroll position when the user leaves a page</li><li><strong>Automatically restore scroll position</strong>: Restore to the previous scroll position when the user returns to a page</li><li><strong>Enhance user experience</strong>: Avoid users having to re-scroll to their previous browsing position after navigation</li></ul><h2 id="Use-Case-Examples"><a href="#Use-Case-Examples" class="headerlink" title="Use Case Examples"></a>Use Case Examples</h2><h3 id="E-commerce-Website-Scenario"><a href="#E-commerce-Website-Scenario" class="headerlink" title="E-commerce Website Scenario"></a>E-commerce Website Scenario</h3><p>Consider a user browsing a product listing page:</p><p><strong>Without scrollRestoration</strong>:</p><ol><li>User scrolls to the 50th product position</li><li>Clicks on a product to enter the detail page</li><li>Clicks browser back button to return to listing page</li><li>Page returns to the top, user needs to scroll again to find the 50th product 😫</li></ol><p><strong>With scrollRestoration enabled</strong>:</p><ol><li>User scrolls to the 50th product position</li><li>Clicks on a product to enter the detail page</li><li>Clicks browser back button to return to listing page</li><li>Page automatically scrolls to the 50th product position 😊</li></ol><h3 id="Other-Application-Scenarios"><a href="#Other-Application-Scenarios" class="headerlink" title="Other Application Scenarios"></a>Other Application Scenarios</h3><ul><li><strong>Social Media Feed</strong>: Scroll to the 100th post, click on comments and return, still at the 100th post position</li><li><strong>Document Reading</strong>: In the middle of a long document, click a link and return, still at the original reading position</li><li><strong>Search Results</strong>: View an item on page 3 of search results, return and still on page 3</li></ul><h2 id="Basic-Configuration-and-Usage"><a href="#Basic-Configuration-and-Usage" class="headerlink" title="Basic Configuration and Usage"></a>Basic Configuration and Usage</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/router.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;@tanstack/react-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; routeTree &#125; <span class="keyword">from</span> <span class="string">&#x27;./routeTree.gen&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123; </span><br><span class="line">        routeTree,</span><br><span class="line">        <span class="attr">scrollRestoration</span>: <span class="literal">true</span>, <span class="comment">// Enable scroll position restoration</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> router</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Technical-Implementation-Principles"><a href="#Technical-Implementation-Principles" class="headerlink" title="Technical Implementation Principles"></a>Technical Implementation Principles</h2><h3 id="1-Browser-History-API-Foundation"><a href="#1-Browser-History-API-Foundation" class="headerlink" title="1. Browser History API Foundation"></a>1. Browser History API Foundation</h3><p>Modern browsers provide native scroll restoration control:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Browser native scrollRestoration</span></span><br><span class="line">history.<span class="property">scrollRestoration</span> = <span class="string">&#x27;auto&#x27;</span>    <span class="comment">// Browser automatic management</span></span><br><span class="line">history.<span class="property">scrollRestoration</span> = <span class="string">&#x27;manual&#x27;</span>  <span class="comment">// Manual management</span></span><br></pre></td></tr></table></figure><p>TanStack Router takes control of scroll restoration by setting <code>history.scrollRestoration = &#39;manual&#39;</code>.</p><h3 id="2-Scroll-Position-Saving-Mechanism"><a href="#2-Scroll-Position-Saving-Mechanism" class="headerlink" title="2. Scroll Position Saving Mechanism"></a>2. Scroll Position Saving Mechanism</h3><p>When routes change, TanStack Router saves the current scroll position:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Conceptual implementation of scroll position saving</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">saveScrollPosition</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> scrollData = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="variable language_">window</span>.<span class="property">scrollX</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="variable language_">window</span>.<span class="property">scrollY</span>,</span><br><span class="line">    <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Save to sessionStorage</span></span><br><span class="line">  <span class="keyword">const</span> restoreKey = <span class="title function_">getKey</span>(router.<span class="property">state</span>.<span class="property">location</span>)</span><br><span class="line">  scrollRestorationCache.<span class="title function_">set</span>(restoreKey, &#123;</span><br><span class="line">    <span class="string">&#x27;window&#x27;</span>: scrollData</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Scroll-Position-Restoration-Mechanism"><a href="#3-Scroll-Position-Restoration-Mechanism" class="headerlink" title="3. Scroll Position Restoration Mechanism"></a>3. Scroll Position Restoration Mechanism</h3><p>When returning to a page, restore the scroll position:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Conceptual implementation of scroll position restoration</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">restoreScrollPosition</span> = (<span class="params">routeState</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (routeState.<span class="property">scrollPosition</span>) &#123;</span><br><span class="line">    <span class="comment">// Wait for page rendering to complete</span></span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(&#123;</span><br><span class="line">        <span class="attr">top</span>: routeState.<span class="property">scrollPosition</span>.<span class="property">y</span>,</span><br><span class="line">        <span class="attr">left</span>: routeState.<span class="property">scrollPosition</span>.<span class="property">x</span>,</span><br><span class="line">        <span class="attr">behavior</span>: <span class="string">&#x27;auto&#x27;</span> <span class="comment">// or &#x27;smooth&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Critical-Timing-Control"><a href="#4-Critical-Timing-Control" class="headerlink" title="4. Critical Timing Control"></a>4. Critical Timing Control</h3><p><strong>Save Timing</strong>:</p><ul><li>Before user clicks links to leave the page</li><li>Before browser forward&#x2F;back navigation</li><li>Before route change triggers</li></ul><p><strong>Restore Timing</strong>:</p><ul><li>After page components are mounted</li><li>After DOM rendering is complete</li><li>Using <code>requestAnimationFrame</code> to ensure layout completion</li></ul><h2 id="Source-Code-Deep-Analysis"><a href="#Source-Code-Deep-Analysis" class="headerlink" title="Source Code Deep Analysis"></a>Source Code Deep Analysis</h2><p>Based on in-depth analysis of TanStack Router’s official source code, here is the specific implementation of the <code>scrollRestoration</code> feature:</p><h3 id="1-createRouter-Function-Entry"><a href="#1-createRouter-Function-Entry" class="headerlink" title="1. createRouter Function Entry"></a>1. createRouter Function Entry</h3><p><strong>File Location</strong>: <code>packages/react-router/src/router.ts:80</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">createRouter</span>: <span class="title class_">CreateRouterFn</span> = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Router</span>(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-scrollRestoration-Option-Definition"><a href="#2-scrollRestoration-Option-Definition" class="headerlink" title="2. scrollRestoration Option Definition"></a>2. scrollRestoration Option Definition</h3><p><strong>File Location</strong>: <code>packages/router-core/src/router.ts:390-414</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">RouterOptions</span>&lt;...&gt; &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * If `true`, scroll restoration will be enabled</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@default</span> <span class="variable">false</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">scrollRestoration</span>?: <span class="built_in">boolean</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * A function that will be called to get the key for the scroll restoration cache.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@default</span> (location) =&gt; location.href</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">getScrollRestorationKey</span>?: <span class="function">(<span class="params"><span class="attr">location</span>: <span class="title class_">ParsedLocation</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The default behavior for scroll restoration.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@default</span> &#x27;auto&#x27;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">scrollRestorationBehavior</span>?: <span class="title class_">ScrollBehavior</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * An array of selectors that will be used to scroll to the top of the page in addition to `window`</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@default</span> [&#x27;window&#x27;]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">scrollToTopSelectors</span>?: <span class="title class_">Array</span>&lt;<span class="built_in">string</span> | (<span class="function">() =&gt;</span> <span class="title class_">Element</span> | <span class="literal">null</span> | <span class="literal">undefined</span>)&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Scroll-Restoration-Setup-in-Router-Initialization"><a href="#3-Scroll-Restoration-Setup-in-Router-Initialization" class="headerlink" title="3. Scroll Restoration Setup in Router Initialization"></a>3. Scroll Restoration Setup in Router Initialization</h3><p><strong>File Location</strong>: <code>packages/router-core/src/router.ts:924</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In Router&#x27;s update method</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">__store</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">__store</span> = <span class="keyword">new</span> <span class="title class_">Store</span>(<span class="title function_">getInitialRouterState</span>(<span class="variable language_">this</span>.<span class="property">latestLocation</span>), &#123;</span><br><span class="line">    <span class="attr">onUpdate</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setupScrollRestoration</span>(<span class="variable language_">this</span>) <span class="comment">// Key: Initialize scroll restoration here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-setupScrollRestoration-Core-Implementation"><a href="#4-setupScrollRestoration-Core-Implementation" class="headerlink" title="4. setupScrollRestoration Core Implementation"></a>4. setupScrollRestoration Core Implementation</h3><p><strong>File Location</strong>: <code>packages/router-core/src/scroll-restoration.ts:209-353</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setupScrollRestoration</span>(<span class="params"><span class="attr">router</span>: <span class="title class_">AnyRouter</span>, <span class="attr">force</span>?: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (scrollRestorationCache === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> shouldScrollRestoration = force ?? router.<span class="property">options</span>.<span class="property">scrollRestoration</span> ?? <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (shouldScrollRestoration) &#123;</span><br><span class="line">    router.<span class="property">isScrollRestoring</span> = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">document</span> === <span class="string">&#x27;undefined&#x27;</span> || router.<span class="property">isScrollRestorationSetup</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  router.<span class="property">isScrollRestorationSetup</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getKey = router.<span class="property">options</span>.<span class="property">getScrollRestorationKey</span> || defaultGetScrollRestorationKey</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Key: Set browser scroll restoration to manual mode</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">scrollRestoration</span> = <span class="string">&#x27;manual&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Listen to scroll events and cache scroll positions</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onScroll</span> = (<span class="params"><span class="attr">event</span>: <span class="title class_">Event</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (ignoreScroll || !router.<span class="property">isScrollRestoring</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> elementSelector = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">target</span> === <span class="variable language_">document</span> || event.<span class="property">target</span> === <span class="variable language_">window</span>) &#123;</span><br><span class="line">      elementSelector = <span class="string">&#x27;window&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> attrId = (event.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">Element</span>).<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-scroll-restoration-id&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (attrId) &#123;</span><br><span class="line">        elementSelector = <span class="string">`[data-scroll-restoration-id=&quot;<span class="subst">$&#123;attrId&#125;</span>&quot;]`</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        elementSelector = <span class="title function_">getCssSelector</span>(event.<span class="property">target</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> restoreKey = <span class="title function_">getKey</span>(router.<span class="property">state</span>.<span class="property">location</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save scroll position to sessionStorage</span></span><br><span class="line">    scrollRestorationCache.<span class="title function_">set</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> keyEntry = (state[restoreKey] = state[restoreKey] || &#123;&#125;)</span><br><span class="line">      <span class="keyword">const</span> elementEntry = (keyEntry[elementSelector] = keyEntry[elementSelector] || &#123;&#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (elementSelector === <span class="string">&#x27;window&#x27;</span>) &#123;</span><br><span class="line">        elementEntry.<span class="property">scrollX</span> = <span class="variable language_">window</span>.<span class="property">scrollX</span> || <span class="number">0</span></span><br><span class="line">        elementEntry.<span class="property">scrollY</span> = <span class="variable language_">window</span>.<span class="property">scrollY</span> || <span class="number">0</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elementSelector) &#123;</span><br><span class="line">        <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(elementSelector)</span><br><span class="line">        <span class="keyword">if</span> (element) &#123;</span><br><span class="line">          elementEntry.<span class="property">scrollX</span> = element.<span class="property">scrollLeft</span> || <span class="number">0</span></span><br><span class="line">          elementEntry.<span class="property">scrollY</span> = element.<span class="property">scrollTop</span> || <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Throttle scroll events, trigger at most once every 100ms</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">document</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="title function_">throttle</span>(onScroll, <span class="number">100</span>), <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Listen to route rendering completion event, restore scroll position</span></span><br><span class="line">  router.<span class="title function_">subscribe</span>(<span class="string">&#x27;onRendered&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> cacheKey = <span class="title function_">getKey</span>(event.<span class="property">toLocation</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!router.<span class="property">resetNextScroll</span>) &#123;</span><br><span class="line">      router.<span class="property">resetNextScroll</span> = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">restoreScroll</span>(&#123;</span><br><span class="line">      storageKey,</span><br><span class="line">      <span class="attr">key</span>: cacheKey,</span><br><span class="line">      <span class="attr">behavior</span>: router.<span class="property">options</span>.<span class="property">scrollRestorationBehavior</span>,</span><br><span class="line">      <span class="attr">shouldScrollRestoration</span>: router.<span class="property">isScrollRestoring</span>,</span><br><span class="line">      <span class="attr">scrollToTopSelectors</span>: router.<span class="property">options</span>.<span class="property">scrollToTopSelectors</span>,</span><br><span class="line">      <span class="attr">location</span>: router.<span class="property">history</span>.<span class="property">location</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-restoreScroll-Implementation"><a href="#5-restoreScroll-Implementation" class="headerlink" title="5. restoreScroll Implementation"></a>5. restoreScroll Implementation</h3><p><strong>File Location</strong>: <code>packages/router-core/src/scroll-restoration.ts:104-207</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">restoreScroll</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  storageKey,</span></span><br><span class="line"><span class="params">  key,</span></span><br><span class="line"><span class="params">  behavior,</span></span><br><span class="line"><span class="params">  shouldScrollRestoration,</span></span><br><span class="line"><span class="params">  scrollToTopSelectors,</span></span><br><span class="line"><span class="params">  location,</span></span><br><span class="line"><span class="params">&#125;: &#123;</span></span><br><span class="line"><span class="params">  storageKey: <span class="built_in">string</span></span></span><br><span class="line"><span class="params">  key?: <span class="built_in">string</span></span></span><br><span class="line"><span class="params">  behavior?: ScrollToOptions[<span class="string">&#x27;behavior&#x27;</span>]</span></span><br><span class="line"><span class="params">  shouldScrollRestoration?: <span class="built_in">boolean</span></span></span><br><span class="line"><span class="params">  scrollToTopSelectors?: <span class="built_in">Array</span>&lt;<span class="built_in">string</span> | (() =&gt; Element | <span class="literal">null</span> | <span class="literal">undefined</span>)&gt;</span></span><br><span class="line"><span class="params">  location?: HistoryLocation</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">byKey</span>: <span class="title class_">ScrollRestorationByKey</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    byKey = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(storageKey) || <span class="string">&#x27;&#123;&#125;&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (<span class="attr">error</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> resolvedKey = key || <span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">state</span>?.<span class="property">key</span></span><br><span class="line">  <span class="keyword">const</span> elementEntries = byKey[resolvedKey]</span><br><span class="line"></span><br><span class="line">  ignoreScroll = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Priority restore cached scroll position</span></span><br><span class="line">  <span class="keyword">if</span> (shouldScrollRestoration &amp;&amp; elementEntries &amp;&amp; <span class="title class_">Object</span>.<span class="title function_">keys</span>(elementEntries).<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> elementSelector <span class="keyword">in</span> elementEntries) &#123;</span><br><span class="line">      <span class="keyword">const</span> entry = elementEntries[elementSelector]!</span><br><span class="line">      <span class="keyword">if</span> (elementSelector === <span class="string">&#x27;window&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(&#123;</span><br><span class="line">          <span class="attr">top</span>: entry.<span class="property">scrollY</span>,</span><br><span class="line">          <span class="attr">left</span>: entry.<span class="property">scrollX</span>,</span><br><span class="line">          behavior,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elementSelector) &#123;</span><br><span class="line">        <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(elementSelector)</span><br><span class="line">        <span class="keyword">if</span> (element) &#123;</span><br><span class="line">          element.<span class="property">scrollLeft</span> = entry.<span class="property">scrollX</span></span><br><span class="line">          element.<span class="property">scrollTop</span> = entry.<span class="property">scrollY</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handle hash scrolling</span></span><br><span class="line">  <span class="keyword">const</span> hash = (location ?? <span class="variable language_">window</span>.<span class="property">location</span>).<span class="property">hash</span>.<span class="title function_">split</span>(<span class="string">&#x27;#&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hash) &#123;</span><br><span class="line">    <span class="keyword">const</span> hashScrollIntoViewOptions = (<span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">state</span> || &#123;&#125;).<span class="property">__hashScrollIntoViewOptions</span> ?? <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hashScrollIntoViewOptions) &#123;</span><br><span class="line">      <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(hash)</span><br><span class="line">      <span class="keyword">if</span> (el) &#123;</span><br><span class="line">        el.<span class="title function_">scrollIntoView</span>(hashScrollIntoViewOptions)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Default scroll to top of page</span></span><br><span class="line">  [<span class="string">&#x27;window&#x27;</span>, ...(scrollToTopSelectors?.<span class="title function_">filter</span>(<span class="function">(<span class="params">d</span>) =&gt;</span> d !== <span class="string">&#x27;window&#x27;</span>) ?? [])].<span class="title function_">forEach</span>(<span class="function">(<span class="params">selector</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> element = selector === <span class="string">&#x27;window&#x27;</span> ? <span class="variable language_">window</span> : <span class="keyword">typeof</span> selector === <span class="string">&#x27;function&#x27;</span> ? <span class="title function_">selector</span>() : <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(selector)</span><br><span class="line">    <span class="keyword">if</span> (element) &#123;</span><br><span class="line">      element.<span class="title function_">scrollTo</span>(&#123;</span><br><span class="line">        <span class="attr">top</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">left</span>: <span class="number">0</span>,</span><br><span class="line">        behavior,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  ignoreScroll = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-Cache-System-Implementation"><a href="#6-Cache-System-Implementation" class="headerlink" title="6. Cache System Implementation"></a>6. Cache System Implementation</h3><p><strong>File Location</strong>: <code>packages/router-core/src/scroll-restoration.ts:36-73</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Storage key definition</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> storageKey = <span class="string">&#x27;tsr-scroll-restoration-v1_3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Throttle function implementation</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">throttle</span> = (<span class="params"><span class="attr">fn</span>: (...args: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt;) =&gt; <span class="built_in">void</span>, <span class="attr">wait</span>: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">timeout</span>: <span class="built_in">any</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...<span class="attr">args</span>: <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">fn</span>(...args)</span><br><span class="line">        timeout = <span class="literal">null</span></span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create scroll restoration cache</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createScrollRestorationCache</span>(<span class="params"></span>): <span class="title class_">ScrollRestorationCache</span> | <span class="literal">undefined</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> safeSessionStorage = <span class="title function_">getSafeSessionStorage</span>()</span><br><span class="line">  <span class="keyword">if</span> (!safeSessionStorage) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> persistedState = safeSessionStorage.<span class="title function_">getItem</span>(storageKey)</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">state</span>: <span class="title class_">ScrollRestorationByKey</span> = persistedState ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(persistedState) : &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    state,</span><br><span class="line">    <span class="attr">set</span>: <span class="function">(<span class="params">updater</span>) =&gt;</span> (</span><br><span class="line">      (state = <span class="title function_">functionalUpdate</span>(updater, state) || state),</span><br><span class="line">      safeSessionStorage.<span class="title function_">setItem</span>(storageKey, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state))</span><br><span class="line">    ),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> scrollRestorationCache = <span class="title function_">createScrollRestorationCache</span>()</span><br></pre></td></tr></table></figure><h3 id="7-Data-Storage-Structure"><a href="#7-Data-Storage-Structure" class="headerlink" title="7. Data Storage Structure"></a>7. Data Storage Structure</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Data structure in sessionStorage</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;tsr-scroll-restoration-v1_3&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;/products&quot;</span>: &#123;          <span class="comment">// Route path as key</span></span><br><span class="line">      <span class="string">&quot;window&quot;</span>: &#123;           <span class="comment">// Element selector</span></span><br><span class="line">        <span class="string">&quot;scrollX&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;scrollY&quot;</span>: <span class="number">1250</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;/products/123&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;window&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;scrollX&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;scrollY&quot;</span>: <span class="number">800</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Scroll-Restoration-Workflow"><a href="#Scroll-Restoration-Workflow" class="headerlink" title="Scroll Restoration Workflow"></a>Scroll Restoration Workflow</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant User as User</span><br><span class="line">    participant Router as TanStack Router</span><br><span class="line">    participant Browser as Browser</span><br><span class="line">    participant Storage as SessionStorage</span><br><span class="line"></span><br><span class="line">    Note over Router: Initialization Phase</span><br><span class="line">    Router-&gt;&gt;Browser: history.scrollRestoration = &#x27;manual&#x27;</span><br><span class="line">    Router-&gt;&gt;Browser: addEventListener(&#x27;scroll&#x27;, onScroll)</span><br><span class="line">    Router-&gt;&gt;Router: setupScrollRestoration()</span><br><span class="line"></span><br><span class="line">    Note over User: User Browsing and Navigation</span><br><span class="line">    User-&gt;&gt;Browser: Scroll page</span><br><span class="line">    Browser-&gt;&gt;Router: scroll event</span><br><span class="line">    Router-&gt;&gt;Storage: Save scroll position &#123; x, y &#125;</span><br><span class="line">    </span><br><span class="line">    User-&gt;&gt;Router: Click link navigation</span><br><span class="line">    Router-&gt;&gt;Storage: Save current page scroll position</span><br><span class="line">    Router-&gt;&gt;Browser: Navigate to new page</span><br><span class="line">    </span><br><span class="line">    Note over User: User Return Operation</span><br><span class="line">    User-&gt;&gt;Browser: Click back button</span><br><span class="line">    Browser-&gt;&gt;Router: Route change event</span><br><span class="line">    Router-&gt;&gt;Storage: Read saved scroll position</span><br><span class="line">    Router-&gt;&gt;Router: Wait for page rendering completion</span><br><span class="line">    Router-&gt;&gt;Browser: window.scrollTo(x, y)</span><br><span class="line">    Browser-&gt;&gt;User: Page scrolls to previous position</span><br></pre></td></tr></table></figure><h2 id="Advanced-Features"><a href="#Advanced-Features" class="headerlink" title="Advanced Features"></a>Advanced Features</h2><h3 id="1-Multi-element-Scroll-Support"><a href="#1-Multi-element-Scroll-Support" class="headerlink" title="1. Multi-element Scroll Support"></a>1. Multi-element Scroll Support</h3><p>TanStack Router supports not only window-level scrolling, but also scrolling containers within the page:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Support multiple scroll elements</span></span><br><span class="line"><span class="keyword">const</span> elementSelector = event.<span class="property">target</span> === <span class="variable language_">window</span> </span><br><span class="line">  ? <span class="string">&#x27;window&#x27;</span> </span><br><span class="line">  : <span class="title function_">getCssSelector</span>(event.<span class="property">target</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set scroll restoration ID for specific elements</span></span><br><span class="line">&lt;div data-scroll-restoration-id=<span class="string">&quot;product-list&quot;</span> className=<span class="string">&quot;overflow-auto&quot;</span>&gt;</span><br><span class="line">  &#123;<span class="comment">/* Scrolling content */</span>&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="2-Custom-Scroll-Restoration-Key"><a href="#2-Custom-Scroll-Restoration-Key" class="headerlink" title="2. Custom Scroll Restoration Key"></a>2. Custom Scroll Restoration Key</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  routeTree,</span><br><span class="line">  <span class="attr">scrollRestoration</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">getScrollRestorationKey</span>: <span class="function">(<span class="params">location</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Custom cache key generation strategy</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;location.pathname&#125;</span><span class="subst">$&#123;location.search&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-Scroll-Behavior-Configuration"><a href="#3-Scroll-Behavior-Configuration" class="headerlink" title="3. Scroll Behavior Configuration"></a>3. Scroll Behavior Configuration</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  routeTree,</span><br><span class="line">  <span class="attr">scrollRestoration</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">scrollRestorationBehavior</span>: <span class="string">&#x27;smooth&#x27;</span>, <span class="comment">// &#x27;auto&#x27; | &#x27;smooth&#x27;</span></span><br><span class="line">  <span class="attr">scrollToTopSelectors</span>: [<span class="string">&#x27;window&#x27;</span>, <span class="string">&#x27;.main-content&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Performance-Optimization-Mechanisms"><a href="#Performance-Optimization-Mechanisms" class="headerlink" title="Performance Optimization Mechanisms"></a>Performance Optimization Mechanisms</h2><h3 id="1-Event-Throttling"><a href="#1-Event-Throttling" class="headerlink" title="1. Event Throttling"></a>1. Event Throttling</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use throttling function, save at most once every 100ms</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="title function_">throttle</span>(onScroll, <span class="number">100</span>), <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="2-Smart-Ignore-Mechanism"><a href="#2-Smart-Ignore-Mechanism" class="headerlink" title="2. Smart Ignore Mechanism"></a>2. Smart Ignore Mechanism</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ignoreScroll = <span class="literal">false</span> <span class="comment">// Prevent triggering save during scroll restoration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">restoreScroll</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  ignoreScroll = <span class="literal">true</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(x, y)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ignoreScroll = <span class="literal">false</span></span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Rendering-Completion-Detection"><a href="#3-Rendering-Completion-Detection" class="headerlink" title="3. Rendering Completion Detection"></a>3. Rendering Completion Detection</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use requestAnimationFrame to ensure DOM rendering completion</span></span><br><span class="line"><span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(&#123;</span><br><span class="line">    <span class="attr">top</span>: savedPosition.<span class="property">y</span>,</span><br><span class="line">    <span class="attr">left</span>: savedPosition.<span class="property">x</span>,</span><br><span class="line">    <span class="attr">behavior</span>: <span class="string">&#x27;auto&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Edge-Case-Handling"><a href="#Edge-Case-Handling" class="headerlink" title="Edge Case Handling"></a>Edge Case Handling</h2><h3 id="1-Page-Height-Changes"><a href="#1-Page-Height-Changes" class="headerlink" title="1. Page Height Changes"></a>1. Page Height Changes</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Handle page height changes caused by dynamic content loading</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">restoreWithRetry</span> = (<span class="params">targetY</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> attempts = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> maxAttempts = <span class="number">10</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">tryRestore</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> currentHeight = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (currentHeight &gt;= targetY || attempts &gt;= maxAttempts) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="title class_">Math</span>.<span class="title function_">min</span>(targetY, currentHeight))</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    attempts++</span><br><span class="line">    <span class="built_in">setTimeout</span>(tryRestore, <span class="number">100</span>) <span class="comment">// Delayed retry</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">tryRestore</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Hash-Link-Handling"><a href="#2-Hash-Link-Handling" class="headerlink" title="2. Hash Link Handling"></a>2. Hash Link Handling</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Priority handling of hash scrolling</span></span><br><span class="line"><span class="keyword">const</span> hash = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>.<span class="title function_">split</span>(<span class="string">&#x27;#&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> (hash) &#123;</span><br><span class="line">  <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(hash)</span><br><span class="line">  <span class="keyword">if</span> (element) &#123;</span><br><span class="line">    element.<span class="title function_">scrollIntoView</span>()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Error-Handling"><a href="#3-Error-Handling" class="headerlink" title="3. Error Handling"></a>3. Error Handling</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cachedData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(storageKey) || <span class="string">&#x27;&#123;&#125;&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to parse scroll restoration data:&#x27;</span>, error)</span><br><span class="line">  <span class="comment">// Fallback to default behavior</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>TanStack Router’s <code>scrollRestoration</code> feature achieves precise scroll position restoration through the following key technologies:</p><ol><li><strong>Browser API Takeover</strong>: Takes control of native browser behavior through <code>history.scrollRestoration = &#39;manual&#39;</code></li><li><strong>Event Listening Mechanism</strong>: Monitors scroll events and saves scroll positions in real-time</li><li><strong>SessionStorage Persistence</strong>: Uses sessionStorage to save scroll data across pages</li><li><strong>Smart Restoration Strategy</strong>: Combines requestAnimationFrame and retry mechanisms to ensure accurate restoration</li><li><strong>Performance Optimization</strong>: Optimizes performance through throttling, ignore mechanisms, etc.</li><li><strong>Multi-element Support</strong>: Supports not only window scrolling but also scrolling containers within pages</li></ol><p>This feature appears simple, but its implementation involves deep understanding of browser APIs, event handling optimization, data persistence strategies, and multiple technical layers. Through source code analysis, we can see the TanStack Router team’s meticulous consideration and technical depth in user experience optimization.</p><p>For modern SPA applications, enabling <code>scrollRestoration: true</code> is a simple yet effective user experience enhancement solution. It not only has sophisticated technical implementation, but more importantly, it truly solves the pain point problem users encounter when navigating within applications.</p>]]></content>
    
    
    <summary type="html">Comprehensive analysis of TanStack Router&#39;s scrollRestoration feature - from basic concepts to source code deep dive, exploring implementation principles and advanced techniques.</summary>
    
    
    
    <category term="Programming" scheme="https://blog.baduncle.top/categories/Programming/"/>
    
    
    <category term="typescript" scheme="https://blog.baduncle.top/tags/typescript/"/>
    
    <category term="react" scheme="https://blog.baduncle.top/tags/react/"/>
    
    <category term="performance-optimization" scheme="https://blog.baduncle.top/tags/performance-optimization/"/>
    
    <category term="tanstack-router" scheme="https://blog.baduncle.top/tags/tanstack-router/"/>
    
    <category term="spa" scheme="https://blog.baduncle.top/tags/spa/"/>
    
    <category term="scroll-restoration" scheme="https://blog.baduncle.top/tags/scroll-restoration/"/>
    
    <category term="source-code-analysis" scheme="https://blog.baduncle.top/tags/source-code-analysis/"/>
    
    <category term="session-storage" scheme="https://blog.baduncle.top/tags/session-storage/"/>
    
    <category term="browser-api" scheme="https://blog.baduncle.top/tags/browser-api/"/>
    
    <category term="history-api" scheme="https://blog.baduncle.top/tags/history-api/"/>
    
    <category term="user-experience" scheme="https://blog.baduncle.top/tags/user-experience/"/>
    
    <category term="event-throttling" scheme="https://blog.baduncle.top/tags/event-throttling/"/>
    
  </entry>
  
  <entry>
    <title>Understanding TypeScript typeof and ReturnType A Java Developer Perspective</title>
    <link href="https://blog.baduncle.top/2025/08/06/typescript-typeof-returntype-explained/"/>
    <id>https://blog.baduncle.top/2025/08/06/typescript-typeof-returntype-explained/</id>
    <published>2025-08-06T06:30:00.000Z</published>
    <updated>2025-08-07T15:56:00.428Z</updated>
    
    <content type="html"><![CDATA[<p>For developers transitioning from Java, some nuances of TypeScript’s type system can be confusing, particularly understanding <code>typeof</code> and <code>ReturnType</code>. This article provides clear comparisons and practical examples to explain these concepts thoroughly.</p><span id="more"></span><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li><a href="#core-difference-runtime-vs-compile-time">Core Difference: Runtime vs Compile-time</a><ul><li><a href="#javas-type-reflection-runtime">Java’s Type Reflection (Runtime)</a></li><li><a href="#typescripts-type-system-compile-time">TypeScript’s Type System (Compile-time)</a></li></ul></li><li><a href="#understanding-typescripts-typeof">Understanding TypeScript’s typeof</a><ul><li><a href="#basic-usage-examples">Basic Usage Examples</a></li><li><a href="#advanced-typeof-patterns">Advanced typeof Patterns</a></li></ul></li><li><a href="#understanding-returntype-t">Understanding ReturnType<T></a><ul><li><a href="#returntype-basic-usage">ReturnType Basic Usage</a></li><li><a href="#comparison-function-type-vs-return-type">Comparison: Function Type vs Return Type</a></li></ul></li><li><a href="#real-world-example-tanstack-router">Real-world Example: TanStack Router</a></li><li><a href="#java-vs-typescript-key-differences">Java vs TypeScript: Key Differences</a><ul><li><a href="#java-equivalent-patterns">Java Equivalent Patterns</a></li></ul></li><li><a href="#advanced-pattern-type-safe-api-factory">Advanced Pattern: Type-Safe API Factory</a></li><li><a href="#best-practices">Best Practices</a></li><li><a href="#summary">Summary</a></li></ul><h2 id="Core-Difference-Runtime-vs-Compile-time"><a href="#Core-Difference-Runtime-vs-Compile-time" class="headerlink" title="Core Difference: Runtime vs Compile-time"></a>Core Difference: Runtime vs Compile-time</h2><h3 id="Java’s-Type-Reflection-Runtime"><a href="#Java’s-Type-Reflection-Runtime" class="headerlink" title="Java’s Type Reflection (Runtime)"></a>Java’s Type Reflection (Runtime)</h3><p>In Java, type information is available at runtime through reflection:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java - Runtime type checking</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Class&lt;?&gt; clazz = list.getClass();</span><br><span class="line"><span class="type">String</span> <span class="variable">typeName</span> <span class="operator">=</span> clazz.getSimpleName(); <span class="comment">// &quot;ArrayList&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Get type information dynamically</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> getUserData();</span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> User) &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TypeScript’s-Type-System-Compile-time"><a href="#TypeScript’s-Type-System-Compile-time" class="headerlink" title="TypeScript’s Type System (Compile-time)"></a>TypeScript’s Type System (Compile-time)</h3><p>TypeScript’s <code>typeof</code> performs static type checking at compile-time:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript - Compile-time type inference</span></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserType</span> = <span class="keyword">typeof</span> user; <span class="comment">// &#123; name: string; age: number &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// No runtime overhead - purely for type safety</span></span><br></pre></td></tr></table></figure><h2 id="Understanding-TypeScript’s-typeof"><a href="#Understanding-TypeScript’s-typeof" class="headerlink" title="Understanding TypeScript’s typeof"></a>Understanding TypeScript’s typeof</h2><p>In TypeScript, the <code>typeof</code> operator extracts the type of any value or expression:</p><h3 id="Basic-Usage-Examples"><a href="#Basic-Usage-Examples" class="headerlink" title="Basic Usage Examples"></a>Basic Usage Examples</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Extract variable types</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">apiUrl</span>: <span class="string">&quot;https://api.example.com&quot;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">    <span class="attr">retries</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ConfigType</span> = <span class="keyword">typeof</span> config;</span><br><span class="line"><span class="comment">// Result: &#123; apiUrl: string; timeout: number; retries: number &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Extract function types</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createUser</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">id</span>: <span class="title class_">Math</span>.<span class="title function_">random</span>(), name, age, <span class="attr">isActive</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CreateUserFunction</span> = <span class="keyword">typeof</span> createUser;</span><br><span class="line"><span class="comment">// Result: (name: string, age: number) =&gt; &#123; id: number; name: string; age: number; isActive: boolean &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Advanced-typeof-Patterns"><a href="#Advanced-typeof-Patterns" class="headerlink" title="Advanced typeof Patterns"></a>Advanced typeof Patterns</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Extract enum types</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Status</span> &#123;</span><br><span class="line">    <span class="variable constant_">PENDING</span> = <span class="string">&quot;pending&quot;</span>,</span><br><span class="line">    <span class="variable constant_">COMPLETED</span> = <span class="string">&quot;completed&quot;</span>,</span><br><span class="line">    <span class="variable constant_">FAILED</span> = <span class="string">&quot;failed&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StatusType</span> = <span class="keyword">typeof</span> <span class="title class_">Status</span>;</span><br><span class="line"><span class="comment">// Result: &#123; PENDING: &quot;pending&quot;; COMPLETED: &quot;completed&quot;; FAILED: &quot;failed&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Extract class constructor types</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">users</span>: <span class="title class_">User</span>[] = [];</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">addUser</span>(<span class="params"><span class="attr">user</span>: <span class="title class_">User</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">push</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserServiceConstructor</span> = <span class="keyword">typeof</span> <span class="title class_">UserService</span>;</span><br><span class="line"><span class="comment">// Result: new () =&gt; UserService</span></span><br></pre></td></tr></table></figure><h2 id="Understanding-ReturnType"><a href="#Understanding-ReturnType" class="headerlink" title="Understanding ReturnType"></a>Understanding ReturnType<T></h2><p><code>ReturnType&lt;T&gt;</code> is a utility type that extracts the return type from a function type:</p><h3 id="ReturnType-Basic-Usage"><a href="#ReturnType-Basic-Usage" class="headerlink" title="ReturnType Basic Usage"></a>ReturnType Basic Usage</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchUserData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">        <span class="attr">email</span>: <span class="string">&quot;alice@example.com&quot;</span>,</span><br><span class="line">        <span class="attr">preferences</span>: &#123;</span><br><span class="line">            <span class="attr">theme</span>: <span class="string">&quot;dark&quot;</span>,</span><br><span class="line">            <span class="attr">notifications</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extract just the return type</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserData</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> fetchUserData&gt;;</span><br><span class="line"><span class="comment">// Result: &#123;</span></span><br><span class="line"><span class="comment">//   id: number;</span></span><br><span class="line"><span class="comment">//   name: string;</span></span><br><span class="line"><span class="comment">//   email: string;</span></span><br><span class="line"><span class="comment">//   preferences: &#123; theme: string; notifications: boolean &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Comparison-Function-Type-vs-Return-Type"><a href="#Comparison-Function-Type-vs-Return-Type" class="headerlink" title="Comparison: Function Type vs Return Type"></a>Comparison: Function Type vs Return Type</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">routes</span>: [],</span><br><span class="line">        <span class="attr">navigate</span>: <span class="function">(<span class="params"><span class="attr">path</span>: <span class="built_in">string</span></span>) =&gt;</span> &#123;&#125;,</span><br><span class="line">        <span class="attr">currentPath</span>: <span class="string">&quot;/&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Full function type</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RouterFunction</span> = <span class="keyword">typeof</span> createRouter;</span><br><span class="line"><span class="comment">// Result: () =&gt; &#123; routes: any[]; navigate: (path: string) =&gt; void; currentPath: string &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Only the return type</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RouterInstance</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> createRouter&gt;;</span><br><span class="line"><span class="comment">// Result: &#123; routes: any[]; navigate: (path: string) =&gt; void; currentPath: string &#125;</span></span><br></pre></td></tr></table></figure><h2 id="Real-world-Example-TanStack-Router"><a href="#Real-world-Example-TanStack-Router" class="headerlink" title="Real-world Example: TanStack Router"></a>Real-world Example: TanStack Router</h2><p>Let’s look at actual usage in TanStack Router configuration:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> router = <span class="title function_">createTanstackRouter</span>(&#123; </span><br><span class="line">        routeTree,</span><br><span class="line">        <span class="attr">scrollRestoration</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> router;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type declaration for module augmentation</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;@tanstack/react-router&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Register</span> &#123;</span><br><span class="line">        <span class="attr">router</span>: <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> createRouter&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-by-step-breakdown"><a href="#Step-by-step-breakdown" class="headerlink" title="Step-by-step breakdown:"></a>Step-by-step breakdown:</h3><ol><li><strong><code>typeof createRouter</code></strong> - Gets function type: <code>() =&gt; Router</code></li><li><strong><code>ReturnType&lt;typeof createRouter&gt;</code></strong> - Extracts return type: <code>Router</code></li><li><strong>Final result</strong> - <code>router</code> property has the exact same type as <code>createRouter()</code> return value</li></ol><h2 id="Java-vs-TypeScript-Key-Differences"><a href="#Java-vs-TypeScript-Key-Differences" class="headerlink" title="Java vs TypeScript: Key Differences"></a>Java vs TypeScript: Key Differences</h2><table><thead><tr><th>Aspect</th><th>Java</th><th>TypeScript</th></tr></thead><tbody><tr><td><strong>Timing</strong></td><td>Runtime</td><td>Compile-time</td></tr><tr><td><strong>Purpose</strong></td><td>Reflection &amp; dynamic behavior</td><td>Static type checking</td></tr><tr><td><strong>Performance</strong></td><td>Runtime overhead</td><td>Zero runtime cost</td></tr><tr><td><strong>Usage</strong></td><td><code>obj.getClass()</code>, <code>instanceof</code></td><td><code>typeof</code>, <code>ReturnType&lt;T&gt;</code></td></tr></tbody></table><h3 id="Java-Equivalent-Patterns"><a href="#Java-Equivalent-Patterns" class="headerlink" title="Java Equivalent Patterns"></a>Java Equivalent Patterns</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java approach - runtime type checking</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createService</span><span class="params">(Class&lt;T&gt; serviceType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (serviceType == UserService.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unknown service type&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TypeScript approach - compile-time type safety</span></span><br><span class="line">function createService&lt;T <span class="keyword">extends</span> <span class="title class_">ServiceType</span>&gt;(): T &#123;</span><br><span class="line">    <span class="comment">// Type is guaranteed at compile-time</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServiceRegistry</span>().get&lt;T&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Advanced-Pattern-Type-Safe-API-Factory"><a href="#Advanced-Pattern-Type-Safe-API-Factory" class="headerlink" title="Advanced Pattern: Type-Safe API Factory"></a>Advanced Pattern: Type-Safe API Factory</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Define API endpoints with their return types</span></span><br><span class="line"><span class="keyword">const</span> apiEndpoints = &#123;</span><br><span class="line">    <span class="attr">getUser</span>: <span class="function">() =&gt;</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/user&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>()) <span class="keyword">as</span> <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt;,</span><br><span class="line">    <span class="attr">getPosts</span>: <span class="function">() =&gt;</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/posts&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>()) <span class="keyword">as</span> <span class="title class_">Promise</span>&lt;<span class="title class_">Post</span>[]&gt;,</span><br><span class="line">    <span class="attr">getComments</span>: <span class="function">(<span class="params"><span class="attr">postId</span>: <span class="built_in">number</span></span>) =&gt;</span> </span><br><span class="line">        <span class="title function_">fetch</span>(<span class="string">`/api/posts/<span class="subst">$&#123;postId&#125;</span>/comments`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>()) <span class="keyword">as</span> <span class="title class_">Promise</span>&lt;<span class="title class_">Comment</span>[]&gt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extract all endpoint return types</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ApiReturnTypes</span> = &#123;</span><br><span class="line">    [K <span class="keyword">in</span> keyof <span class="keyword">typeof</span> apiEndpoints]: <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> apiEndpoints[K]&gt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Result:</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   getUser: Promise&lt;User&gt;;</span></span><br><span class="line"><span class="comment">//   getPosts: Promise&lt;Post[]&gt;;</span></span><br><span class="line"><span class="comment">//   getComments: Promise&lt;Comment[]&gt;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h2 id="Best-Practices"><a href="#Best-Practices" class="headerlink" title="Best Practices"></a>Best Practices</h2><ol><li><strong>Use <code>typeof</code> for type inference</strong> - When you want TypeScript to automatically determine types</li><li><strong>Combine with <code>ReturnType&lt;&gt;</code></strong> - When you only need function return types</li><li><strong>Prefer type inference over explicit types</strong> - Let TypeScript do the work</li><li><strong>Use in generic constraints</strong> - Create flexible, type-safe APIs</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good: Let TypeScript infer the type</span></span><br><span class="line"><span class="keyword">const</span> config = &#123; <span class="attr">timeout</span>: <span class="number">5000</span>, <span class="attr">retries</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Config</span> = <span class="keyword">typeof</span> config;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Better: Use with generics for reusable patterns</span></span><br><span class="line"><span class="keyword">function</span> createApiClient&lt;T <span class="keyword">extends</span> <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="function">(<span class="params">...<span class="attr">args</span>: <span class="built_in">any</span>[]</span>) =&gt;</span> <span class="built_in">any</span>&gt;&gt;(</span><br><span class="line">    <span class="attr">endpoints</span>: T</span><br><span class="line">): &#123; [K <span class="keyword">in</span> keyof T]: <span class="title class_">ReturnType</span>&lt;T[K]&gt; &#125; &#123;</span><br><span class="line">    <span class="comment">// Implementation here</span></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125; <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Understanding <code>typeof</code> and <code>ReturnType</code> is crucial for writing type-safe TypeScript code. Unlike Java’s runtime reflection, these are compile-time tools that provide zero-cost type safety. They enable powerful patterns like type inference, generic constraints, and module augmentation while maintaining excellent developer experience.</p><p>For Java developers, think of <code>typeof</code> as compile-time reflection that captures type information without runtime overhead, and <code>ReturnType&lt;T&gt;</code> as a way to extract “output types” from method signatures.</p>]]></content>
    
    
    <summary type="html">Deep dive into TypeScript&#39;s typeof and ReturnType utility types from a Java developer&#39;s perspective, with practical examples and compile-time type inference comparisons.</summary>
    
    
    
    <category term="Programming" scheme="https://blog.baduncle.top/categories/Programming/"/>
    
    
    <category term="typescript" scheme="https://blog.baduncle.top/tags/typescript/"/>
    
    <category term="javascript" scheme="https://blog.baduncle.top/tags/javascript/"/>
    
    <category term="typeof" scheme="https://blog.baduncle.top/tags/typeof/"/>
    
    <category term="returntype" scheme="https://blog.baduncle.top/tags/returntype/"/>
    
    <category term="type-safety" scheme="https://blog.baduncle.top/tags/type-safety/"/>
    
    <category term="java-to-typescript" scheme="https://blog.baduncle.top/tags/java-to-typescript/"/>
    
    <category term="utility-types" scheme="https://blog.baduncle.top/tags/utility-types/"/>
    
    <category term="compile-time-types" scheme="https://blog.baduncle.top/tags/compile-time-types/"/>
    
  </entry>
  
  <entry>
    <title>Complete TypeScript Module System Guide Understanding declare module from a Java Developer Perspective</title>
    <link href="https://blog.baduncle.top/2025/08/06/typescript-module-system-guide/"/>
    <id>https://blog.baduncle.top/2025/08/06/typescript-module-system-guide/</id>
    <published>2025-08-06T02:30:00.000Z</published>
    <updated>2025-08-07T15:50:46.121Z</updated>
    
    <content type="html"><![CDATA[<p>As a Java developer first encountering TypeScript, you might find its module system confusing. Why do we need <code>declare module</code>? Why can’t we just use files directly? This article will start from concepts familiar to Java developers and provide an in-depth analysis of TypeScript’s module system.</p><span id="more"></span><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li><a href="#the-necessity-of-module-systems">The Necessity of Module Systems</a><ul><li><a href="#problems-without-module-systems">Problems Without Module Systems</a></li><li><a href="#the-same-issues-in-early-javascript">The Same Issues in Early JavaScript</a></li></ul></li><li><a href="#java-vs-typescript-module-comparison">Java vs TypeScript Module Comparison</a><ul><li><a href="#java-package-system-solution">Java Package System Solution</a></li><li><a href="#typescript-module-system">TypeScript Module System</a></li></ul></li><li><a href="#purpose-and-usage-of-declare-module">Purpose and Usage of declare module</a><ul><li><a href="#basic-concepts">Basic Concepts</a></li></ul></li><li><a href="#when-to-use-declare-module">When to Use declare module</a><ul><li><a href="#situations-where-its-needed">Situations Where It’s Needed</a></li><li><a href="#situations-where-its-not-needed">Situations Where It’s Not Needed</a></li></ul></li><li><a href="#practical-application-scenarios">Practical Application Scenarios</a><ul><li><a href="#scenario-1-integrating-legacy-javascript-libraries">Scenario 1: Integrating Legacy JavaScript Libraries</a></li><li><a href="#scenario-2-module-declarations-in-micro-frontend-architecture">Scenario 2: Module Declarations in Micro-frontend Architecture</a></li><li><a href="#scenario-3-development-environment-specific-modules">Scenario 3: Development Environment Specific Modules</a></li></ul></li><li><a href="#best-practices">Best Practices</a></li><li><a href="#summary">Summary</a></li></ul><h2 id="The-Necessity-of-Module-Systems"><a href="#The-Necessity-of-Module-Systems" class="headerlink" title="The Necessity of Module Systems"></a>The Necessity of Module Systems</h2><h3 id="Problems-Without-Module-Systems"><a href="#Problems-Without-Module-Systems" class="headerlink" title="Problems Without Module Systems"></a>Problems Without Module Systems</h3><p>Imagine what would happen if Java didn’t have a package system and all classes were in the root directory:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All classes in root directory</span></span><br><span class="line"><span class="comment">// File: StringUtils.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">format</span><span class="params">(String str)</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// File: DateUtils.java  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">format</span><span class="params">(Date date)</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// File: MyStringUtils.java (your own implementation)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtils</span> &#123;  <span class="comment">// ❌ Naming conflict!</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">format</span><span class="params">(String str)</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>The problems are obvious</strong>:</p><ol><li><strong>Naming conflicts</strong> - Cannot have two classes with the same name</li><li><strong>Code organization chaos</strong> - All classes in a flat namespace</li><li><strong>Unclear dependencies</strong> - Don’t know which classes belong to the same functional module</li><li><strong>Maintenance difficulties</strong> - Finding specific functionality becomes difficult in large projects</li></ol><h3 id="The-Same-Issues-in-Early-JavaScript"><a href="#The-Same-Issues-in-Early-JavaScript" class="headerlink" title="The Same Issues in Early JavaScript"></a>The Same Issues in Early JavaScript</h3><p>Before module systems emerged, JavaScript development looked like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Early JavaScript development --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lodash.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;myapp.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// All functions in global scope</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> users = [];  <span class="comment">// Global variable</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">getUsers</span>(<span class="params"></span>) &#123; ... &#125;  <span class="comment">// Global function</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">formatDate</span>(<span class="params"></span>) &#123; ... &#125;  <span class="comment">// Global function</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// Problems:</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. What if both jquery and lodash have $ function?</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2. What if two libraries both define a utils object?</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 3. Script tag loading order must be strictly controlled</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 4. All functions exposed globally, no access control</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Java-vs-TypeScript-Module-Comparison"><a href="#Java-vs-TypeScript-Module-Comparison" class="headerlink" title="Java vs TypeScript Module Comparison"></a>Java vs TypeScript Module Comparison</h2><h3 id="Java-Package-System-Solution"><a href="#Java-Package-System-Solution" class="headerlink" title="Java Package System Solution"></a>Java Package System Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com/example/utils/StringUtils.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">capitalize</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + str.substring(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Private method, not accessible externally</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str != <span class="literal">null</span> &amp;&amp; !str.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// com/thirdparty/utils/StringUtils.java  </span></span><br><span class="line"><span class="keyword">package</span> com.thirdparty.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtils</span> &#123;  <span class="comment">// ✅ Can have the same name!</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">capitalize</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="comment">// Different implementation</span></span><br><span class="line">        <span class="keyword">return</span> str.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Main.java - Explicitly specify source when using</span></span><br><span class="line"><span class="keyword">import</span> com.example.utils.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.thirdparty.utils.StringUtils as ThirdPartyStringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result1</span> <span class="operator">=</span> StringUtils.capitalize(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result2</span> <span class="operator">=</span> ThirdPartyStringUtils.capitalize(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TypeScript-Module-System"><a href="#TypeScript-Module-System" class="headerlink" title="TypeScript Module System"></a>TypeScript Module System</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils/stringHelper.ts (a module)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">capitalize</span>(<span class="params"><span class="attr">str</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + str.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Private function, not exported, not accessible externally</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isValid</span>(<span class="params"><span class="attr">str</span>: <span class="built_in">string</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str != <span class="literal">null</span> &amp;&amp; str.<span class="property">length</span> &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">formatString</span>(<span class="params"><span class="attr">str</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">isValid</span>(str)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid string&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">capitalize</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// thirdparty/stringUtils.ts (another module)  </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">capitalize</span>(<span class="params"><span class="attr">str</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;  <span class="comment">// ✅ Same name function, but in different module</span></span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.ts - Explicitly specify source when using</span></span><br><span class="line"><span class="keyword">import</span> &#123; capitalize <span class="keyword">as</span> stringCapitalize, formatString &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils/stringHelper&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; capitalize <span class="keyword">as</span> thirdPartyCapitalize &#125; <span class="keyword">from</span> <span class="string">&#x27;./thirdparty/stringUtils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Clearly know which function is being used</span></span><br><span class="line"><span class="keyword">const</span> result1 = <span class="title function_">stringCapitalize</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> result2 = <span class="title function_">thirdPartyCapitalize</span>(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> result3 = <span class="title function_">formatString</span>(<span class="string">&quot;typescript&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Purpose-and-Usage-of-declare-module"><a href="#Purpose-and-Usage-of-declare-module" class="headerlink" title="Purpose and Usage of declare module"></a>Purpose and Usage of declare module</h2><h3 id="Basic-Concepts"><a href="#Basic-Concepts" class="headerlink" title="Basic Concepts"></a>Basic Concepts</h3><p><code>declare module</code> is TypeScript syntax for declaring module types. Its purpose is similar to providing “interface documentation” to the TypeScript compiler, telling the compiler about the structure of external modules.</p><h3 id="1-Declaring-Third-party-Library-Module-Types"><a href="#1-Declaring-Third-party-Library-Module-Types" class="headerlink" title="1. Declaring Third-party Library Module Types"></a>1. Declaring Third-party Library Module Types</h3><p>When using JavaScript libraries without TypeScript type declarations:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Assume you installed a pure JavaScript library &#x27;awesome-library&#x27;</span></span><br><span class="line"><span class="comment">// Will error without type declarations</span></span><br><span class="line"><span class="keyword">import</span> awesomeLib <span class="keyword">from</span> <span class="string">&#x27;awesome-library&#x27;</span>;  <span class="comment">// ❌ Cannot find module</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Use declare module to declare types</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;awesome-library&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">        <span class="attr">timeout</span>: <span class="built_in">number</span>;</span><br><span class="line">        <span class="attr">retries</span>: <span class="built_in">number</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">Config</span></span>): <span class="built_in">void</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"><span class="attr">data</span>: <span class="built_in">string</span></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">cleanup</span>(<span class="params"></span>): <span class="built_in">void</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Default export</span></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">awesomeLib</span>: &#123;</span><br><span class="line">        <span class="attr">version</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="attr">init</span>: <span class="keyword">typeof</span> init;</span><br><span class="line">        <span class="attr">process</span>: <span class="keyword">typeof</span> process;</span><br><span class="line">        <span class="attr">cleanup</span>: <span class="keyword">typeof</span> cleanup;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> awesomeLib;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now can be used normally with type checking</span></span><br><span class="line"><span class="keyword">import</span> awesomeLib, &#123; init, process &#125; <span class="keyword">from</span> <span class="string">&#x27;awesome-library&#x27;</span>;</span><br><span class="line"></span><br><span class="line">awesomeLib.<span class="property">version</span>;  <span class="comment">// ✅ TypeScript knows this property exists</span></span><br><span class="line"><span class="title function_">init</span>(&#123; <span class="attr">timeout</span>: <span class="number">5000</span>, <span class="attr">retries</span>: <span class="number">3</span> &#125;);  <span class="comment">// ✅ Has parameter type checking</span></span><br><span class="line"><span class="title function_">process</span>(<span class="string">&quot;some data&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;  <span class="comment">// ✅ Knows it returns Promise&lt;string&gt;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-Declaring-Resource-File-Modules"><a href="#2-Declaring-Resource-File-Modules" class="headerlink" title="2. Declaring Resource File Modules"></a>2. Declaring Resource File Modules</h3><p>Frontend development often requires importing non-JavaScript files:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declare CSS modules</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.css&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">styles</span>: &#123; [<span class="attr">className</span>: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125;;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> styles;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare image modules</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.png&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">src</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> src;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.jpg&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">src</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> src;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare JSON files</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.json&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">value</span>: <span class="built_in">any</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now can import these resources</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./component.css&#x27;</span>;      <span class="comment">// ✅ Type is &#123; [className: string]: string &#125;</span></span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./assets/logo.png&#x27;</span>;     <span class="comment">// ✅ Type is string</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;./config.json&#x27;</span>;       <span class="comment">// ✅ Type is any</span></span><br></pre></td></tr></table></figure><h3 id="3-Module-Augmentation"><a href="#3-Module-Augmentation" class="headerlink" title="3. Module Augmentation"></a>3. Module Augmentation</h3><p>Extending existing module type definitions, particularly useful when using frameworks:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Extend Express Request interface</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;express&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Request</span> &#123;</span><br><span class="line">        <span class="attr">user</span>?: &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">            <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">            <span class="attr">role</span>: <span class="built_in">string</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="attr">sessionId</span>?: <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Response</span> &#123;</span><br><span class="line">        <span class="title function_">success</span>(<span class="attr">data</span>: <span class="built_in">any</span>): <span class="title class_">Response</span>;</span><br><span class="line">        <span class="title function_">error</span>(<span class="attr">message</span>: <span class="built_in">string</span>, <span class="attr">code</span>?: <span class="built_in">number</span>): <span class="title class_">Response</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now can use extended types in Express applications</span></span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// TypeScript now knows req.user and req.sessionId exist</span></span><br><span class="line">    req.<span class="property">user</span> = &#123; <span class="attr">id</span>: <span class="string">&#x27;123&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">role</span>: <span class="string">&#x27;admin&#x27;</span> &#125;;</span><br><span class="line">    req.<span class="property">sessionId</span> = <span class="string">&#x27;session-123&#x27;</span>;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/profile&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ✅ TypeScript knows these properties exist</span></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">user</span>) &#123;</span><br><span class="line">        res.<span class="title function_">success</span>(&#123; </span><br><span class="line">            <span class="attr">name</span>: req.<span class="property">user</span>.<span class="property">name</span>, </span><br><span class="line">            <span class="attr">role</span>: req.<span class="property">user</span>.<span class="property">role</span> </span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">error</span>(<span class="string">&#x27;Unauthorized&#x27;</span>, <span class="number">401</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-Global-Module-Declarations"><a href="#4-Global-Module-Declarations" class="headerlink" title="4. Global Module Declarations"></a>4. Global Module Declarations</h3><p>Declaring globally available modules or variables:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declare global variables</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Window</span> &#123;</span><br><span class="line">        <span class="attr">myApp</span>: &#123;</span><br><span class="line">            <span class="attr">version</span>: <span class="built_in">string</span>;</span><br><span class="line">            <span class="title function_">init</span>(): <span class="built_in">void</span>;</span><br><span class="line">            <span class="attr">config</span>: &#123;</span><br><span class="line">                <span class="attr">apiUrl</span>: <span class="built_in">string</span>;</span><br><span class="line">                <span class="attr">debug</span>: <span class="built_in">boolean</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="attr">gtag</span>: <span class="function">(<span class="params"><span class="attr">command</span>: <span class="built_in">string</span>, ...<span class="attr">args</span>: <span class="built_in">any</span>[]</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> <span class="attr">ENV</span>: <span class="string">&#x27;development&#x27;</span> | <span class="string">&#x27;production&#x27;</span> | <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now can directly use global variables</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">myApp</span>.<span class="title function_">init</span>();</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">gtag</span>(<span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;GA_MEASUREMENT_ID&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Environment: <span class="subst">$&#123;ENV&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If using in a module, need to export empty object to make it a module</span></span><br><span class="line"><span class="keyword">export</span> &#123;&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-Conditional-Type-Declarations"><a href="#5-Conditional-Type-Declarations" class="headerlink" title="5. Conditional Type Declarations"></a>5. Conditional Type Declarations</h3><p>Declaring types based on module path patterns:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declare common types for all component files</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;components/*&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">import</span> &#123; <span class="title class_">ComponentType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">component</span>: <span class="title class_">ComponentType</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> component;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare types for API modules</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;api/*&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ApiResponse</span>&lt;T = <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">        <span class="attr">data</span>: T;</span><br><span class="line">        <span class="attr">status</span>: <span class="built_in">number</span>;</span><br><span class="line">        <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> get&lt;T&gt;(<span class="attr">endpoint</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">ApiResponse</span>&lt;T&gt;&gt;;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> post&lt;T&gt;(<span class="attr">endpoint</span>: <span class="built_in">string</span>, <span class="attr">data</span>: <span class="built_in">any</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">ApiResponse</span>&lt;T&gt;&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="When-to-Use-declare-module"><a href="#When-to-Use-declare-module" class="headerlink" title="When to Use declare module"></a>When to Use declare module</h2><h3 id="Situations-Where-It’s-Needed"><a href="#Situations-Where-It’s-Needed" class="headerlink" title="Situations Where It’s Needed"></a>Situations Where It’s Needed</h3><h4 id="1-Third-party-JavaScript-Libraries-Without-Type-Definitions"><a href="#1-Third-party-JavaScript-Libraries-Without-Type-Definitions" class="headerlink" title="1. Third-party JavaScript Libraries (Without Type Definitions)"></a>1. Third-party JavaScript Libraries (Without Type Definitions)</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Using legacy jQuery plugins</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;jquery-plugin&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">JQuery</span> &#123;</span><br><span class="line">        <span class="title function_">myPlugin</span>(<span class="attr">options</span>?: &#123; <span class="attr">color</span>: <span class="built_in">string</span>; <span class="attr">size</span>: <span class="built_in">number</span> &#125;): <span class="title class_">JQuery</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;jquery-plugin&#x27;</span>;</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#element&#x27;</span>).<span class="title function_">myPlugin</span>(&#123; <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>, <span class="attr">size</span>: <span class="number">12</span> &#125;);</span><br></pre></td></tr></table></figure><h4 id="2-Node-js-Environment-Special-Modules"><a href="#2-Node-js-Environment-Special-Modules" class="headerlink" title="2. Node.js Environment Special Modules"></a>2. Node.js Environment Special Modules</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declaring extensions to Node.js built-in modules</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;fs&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">readFileSync</span>(<span class="params"><span class="attr">path</span>: <span class="built_in">string</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf8&#x27;</span></span>): <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">readFileSync</span>(<span class="params"><span class="attr">path</span>: <span class="built_in">string</span></span>): <span class="title class_">Buffer</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Development-Tool-Generated-Modules"><a href="#3-Development-Tool-Generated-Modules" class="headerlink" title="3. Development Tool Generated Modules"></a>3. Development Tool Generated Modules</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Webpack hot reload module</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;webpack-hot-middleware/client&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">hotClient</span>: &#123;</span><br><span class="line">        <span class="title function_">subscribe</span>(<span class="attr">handler</span>: <span class="function">(<span class="params"><span class="attr">obj</span>: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">export</span> = hotClient;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vite environment variables</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;virtual:env&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">env</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> env;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Situations-Where-It’s-Not-Needed"><a href="#Situations-Where-It’s-Not-Needed" class="headerlink" title="Situations Where It’s Not Needed"></a>Situations Where It’s Not Needed</h3><h4 id="1-Your-Own-TypeScript-Files"><a href="#1-Your-Own-TypeScript-Files" class="headerlink" title="1. Your Own TypeScript Files"></a>1. Your Own TypeScript Files</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.ts - your own file</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// calculator.ts - using your own module</span></span><br><span class="line"><span class="keyword">import</span> &#123; add, multiply &#125; <span class="keyword">from</span> <span class="string">&#x27;./math&#x27;</span>;  <span class="comment">// ✅ No need for declare module</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>));       <span class="comment">// TypeScript directly knows function signature</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">3</span>, <span class="number">4</span>));  <span class="comment">// Has complete type checking</span></span><br></pre></td></tr></table></figure><h4 id="2-Third-party-Libraries-with-Existing-Type-Definitions"><a href="#2-Third-party-Libraries-with-Existing-Type-Definitions" class="headerlink" title="2. Third-party Libraries with Existing Type Definitions"></a>2. Third-party Libraries with Existing Type Definitions</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Most popular libraries have official or community type definitions</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;           <span class="comment">// ✅ @types/react provides types</span></span><br><span class="line"><span class="keyword">import</span> lodash <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;         <span class="comment">// ✅ @types/lodash provides types</span></span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;       <span class="comment">// ✅ @types/express provides types</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;           <span class="comment">// ✅ axios comes with TypeScript types</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// None of these need declare module</span></span><br></pre></td></tr></table></figure><h2 id="Practical-Application-Scenarios"><a href="#Practical-Application-Scenarios" class="headerlink" title="Practical Application Scenarios"></a>Practical Application Scenarios</h2><h3 id="Scenario-1-Integrating-Legacy-JavaScript-Libraries"><a href="#Scenario-1-Integrating-Legacy-JavaScript-Libraries" class="headerlink" title="Scenario 1: Integrating Legacy JavaScript Libraries"></a>Scenario 1: Integrating Legacy JavaScript Libraries</h3><p>Suppose you need to use a legacy chart library in your TypeScript project:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Legacy chart library without type definitions</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;old-chart-library&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">ChartOptions</span> &#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="built_in">number</span>;</span><br><span class="line">        <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span> | <span class="string">&#x27;bar&#x27;</span> | <span class="string">&#x27;pie&#x27;</span>;</span><br><span class="line">        <span class="attr">data</span>: <span class="title class_">Array</span>&lt;&#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="built_in">string</span>;</span><br><span class="line">            <span class="attr">value</span>: <span class="built_in">number</span>;</span><br><span class="line">            <span class="attr">color</span>?: <span class="built_in">string</span>;</span><br><span class="line">        &#125;&gt;;</span><br><span class="line">        <span class="attr">animation</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">        <span class="attr">legend</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">ChartInstance</span> &#123;</span><br><span class="line">        <span class="title function_">render</span>(): <span class="built_in">void</span>;</span><br><span class="line">        <span class="title function_">update</span>(<span class="attr">data</span>: <span class="title class_">ChartOptions</span>[<span class="string">&#x27;data&#x27;</span>]): <span class="built_in">void</span>;</span><br><span class="line">        <span class="title function_">destroy</span>(): <span class="built_in">void</span>;</span><br><span class="line">        <span class="title function_">on</span>(<span class="attr">event</span>: <span class="string">&#x27;click&#x27;</span> | <span class="string">&#x27;hover&#x27;</span>, <span class="attr">callback</span>: <span class="function">(<span class="params"><span class="attr">data</span>: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createChart</span>(<span class="params"><span class="attr">container</span>: <span class="built_in">string</span> | <span class="title class_">HTMLElement</span>, <span class="attr">options</span>: <span class="title class_">ChartOptions</span></span>): <span class="title class_">ChartInstance</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">version</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="keyword">import</span> &#123; createChart &#125; <span class="keyword">from</span> <span class="string">&#x27;old-chart-library&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chart = <span class="title function_">createChart</span>(<span class="string">&#x27;#chart-container&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: [</span><br><span class="line">        &#123; <span class="attr">label</span>: <span class="string">&#x27;January&#x27;</span>, <span class="attr">value</span>: <span class="number">100</span>, <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">label</span>: <span class="string">&#x27;February&#x27;</span>, <span class="attr">value</span>: <span class="number">150</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">animation</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">legend</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">chart.<span class="title function_">render</span>();</span><br><span class="line">chart.<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Chart clicked:&#x27;</span>, data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Scenario-2-Module-Declarations-in-Micro-frontend-Architecture"><a href="#Scenario-2-Module-Declarations-in-Micro-frontend-Architecture" class="headerlink" title="Scenario 2: Module Declarations in Micro-frontend Architecture"></a>Scenario 2: Module Declarations in Micro-frontend Architecture</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In micro-frontend architecture, different apps may need to share types</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;@shared/user-service&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="attr">role</span>: <span class="string">&#x27;admin&#x27;</span> | <span class="string">&#x27;user&#x27;</span> | <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">        <span class="attr">permissions</span>: <span class="built_in">string</span>[];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">        <span class="title function_">getCurrentUser</span>(): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt;;</span><br><span class="line">        <span class="title function_">updateUser</span>(<span class="attr">id</span>: <span class="built_in">string</span>, <span class="attr">updates</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">User</span>&gt;): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt;;</span><br><span class="line">        <span class="title function_">deleteUser</span>(<span class="attr">id</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="attr">userService</span>: <span class="title class_">UserService</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> userService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;@shared/event-bus&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">EventBus</span> &#123;</span><br><span class="line">        on&lt;T = <span class="built_in">any</span>&gt;(<span class="attr">event</span>: <span class="built_in">string</span>, <span class="attr">handler</span>: <span class="function">(<span class="params"><span class="attr">data</span>: T</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span>;</span><br><span class="line">        <span class="title function_">off</span>(<span class="attr">event</span>: <span class="built_in">string</span>, <span class="attr">handler</span>?: <span class="title class_">Function</span>): <span class="built_in">void</span>;</span><br><span class="line">        emit&lt;T = <span class="built_in">any</span>&gt;(<span class="attr">event</span>: <span class="built_in">string</span>, <span class="attr">data</span>: T): <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="attr">eventBus</span>: <span class="title class_">EventBus</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> eventBus;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage in main application</span></span><br><span class="line"><span class="keyword">import</span> userService <span class="keyword">from</span> <span class="string">&#x27;@shared/user-service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> eventBus <span class="keyword">from</span> <span class="string">&#x27;@shared/event-bus&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">initApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> userService.<span class="title function_">getCurrentUser</span>();</span><br><span class="line">    </span><br><span class="line">    eventBus.<span class="title function_">on</span>(<span class="string">&#x27;user-updated&#x27;</span>, <span class="function">(<span class="params">updatedUser</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User updated:&#x27;</span>, updatedUser);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    eventBus.<span class="title function_">emit</span>(<span class="string">&#x27;app-initialized&#x27;</span>, &#123; <span class="attr">userId</span>: user.<span class="property">id</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scenario-3-Development-Environment-Specific-Modules"><a href="#Scenario-3-Development-Environment-Specific-Modules" class="headerlink" title="Scenario 3: Development Environment Specific Modules"></a>Scenario 3: Development Environment Specific Modules</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Development environment hot reload and debugging tools</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;dev-tools&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">DevTools</span> &#123;</span><br><span class="line">        <span class="title function_">enableHotReload</span>(): <span class="built_in">void</span>;</span><br><span class="line">        <span class="title function_">enableDebugMode</span>(): <span class="built_in">void</span>;</span><br><span class="line">        <span class="title function_">logPerformance</span>(<span class="attr">label</span>: <span class="built_in">string</span>): <span class="built_in">void</span>;</span><br><span class="line">        <span class="title function_">inspectComponent</span>(<span class="attr">selector</span>: <span class="built_in">string</span>): <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="attr">devTools</span>: <span class="title class_">DevTools</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> devTools;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only use in development environment</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">import</span>(<span class="string">&#x27;dev-tools&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; <span class="keyword">default</span>: devTools &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        devTools.<span class="title function_">enableHotReload</span>();</span><br><span class="line">        devTools.<span class="title function_">enableDebugMode</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Best-Practices"><a href="#Best-Practices" class="headerlink" title="Best Practices"></a>Best Practices</h2><h3 id="1-Organizing-Type-Definition-Files"><a href="#1-Organizing-Type-Definition-Files" class="headerlink" title="1. Organizing Type Definition Files"></a>1. Organizing Type Definition Files</h3><p>Create dedicated type definition files:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/global.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Window</span> &#123;</span><br><span class="line">        <span class="attr">APP_CONFIG</span>: &#123;</span><br><span class="line">            <span class="attr">version</span>: <span class="built_in">string</span>;</span><br><span class="line">            <span class="attr">apiUrl</span>: <span class="built_in">string</span>;</span><br><span class="line">            <span class="attr">features</span>: <span class="built_in">string</span>[];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// types/modules.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.css&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">styles</span>: &#123; [<span class="attr">className</span>: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125;;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> styles;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.svg&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">ReactComponent</span>: <span class="title class_">React</span>.<span class="property">ComponentType</span>&lt;<span class="title class_">React</span>.<span class="property">SVGProps</span>&lt;<span class="title class_">SVGSVGElement</span>&gt;&gt;;</span><br><span class="line">    <span class="keyword">export</span> &#123; <span class="title class_">ReactComponent</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">src</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> src;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// types/third-party.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;legacy-library&#x27;</span> &#123;</span><br><span class="line">    <span class="comment">// Third-party library type definitions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Progressive-Type-Definitions"><a href="#2-Progressive-Type-Definitions" class="headerlink" title="2. Progressive Type Definitions"></a>2. Progressive Type Definitions</h3><p>Start simple and gradually improve:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Initial version - basically usable</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;some-library&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">lib</span>: <span class="built_in">any</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> lib;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Improved version - add main APIs</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;some-library&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"><span class="attr">config</span>: <span class="built_in">any</span></span>): <span class="built_in">void</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"><span class="attr">data</span>: <span class="built_in">any</span></span>): <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Complete version - full type definitions</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;some-library&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">        <span class="attr">timeout</span>: <span class="built_in">number</span>;</span><br><span class="line">        <span class="attr">retries</span>: <span class="built_in">number</span>;</span><br><span class="line">        <span class="attr">debug</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">ProcessResult</span> &#123;</span><br><span class="line">        <span class="attr">success</span>: <span class="built_in">boolean</span>;</span><br><span class="line">        <span class="attr">data</span>: <span class="built_in">any</span>;</span><br><span class="line">        <span class="attr">errors</span>?: <span class="built_in">string</span>[];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">Config</span></span>): <span class="built_in">void</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"><span class="attr">data</span>: <span class="built_in">unknown</span></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">ProcessResult</span>&gt;;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">cleanup</span>(<span class="params"></span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Documentation-and-Comments"><a href="#3-Documentation-and-Comments" class="headerlink" title="3. Documentation and Comments"></a>3. Documentation and Comments</h3><p>Add detailed documentation to type definitions:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;payment-gateway&#x27;</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Payment gateway configuration options</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">PaymentConfig</span> &#123;</span><br><span class="line">        <span class="comment">/** Merchant ID */</span></span><br><span class="line">        <span class="attr">merchantId</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="comment">/** API key */</span></span><br><span class="line">        <span class="attr">apiKey</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="comment">/** Whether it&#x27;s a sandbox environment */</span></span><br><span class="line">        <span class="attr">sandbox</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">        <span class="comment">/** Timeout duration in milliseconds */</span></span><br><span class="line">        <span class="attr">timeout</span>?: <span class="built_in">number</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Payment result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">PaymentResult</span> &#123;</span><br><span class="line">        <span class="comment">/** Whether payment was successful */</span></span><br><span class="line">        <span class="attr">success</span>: <span class="built_in">boolean</span>;</span><br><span class="line">        <span class="comment">/** Transaction ID */</span></span><br><span class="line">        <span class="attr">transactionId</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="comment">/** Error message if failed */</span></span><br><span class="line">        <span class="attr">error</span>?: <span class="built_in">string</span>;</span><br><span class="line">        <span class="comment">/** Payment amount */</span></span><br><span class="line">        <span class="attr">amount</span>: <span class="built_in">number</span>;</span><br><span class="line">        <span class="comment">/** Currency type */</span></span><br><span class="line">        <span class="attr">currency</span>: <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create payment instance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config Payment configuration</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> Payment instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createPayment</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">PaymentConfig</span></span>): &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Process payment</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> amount Payment amount</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> currency Currency type</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@returns</span> Payment result</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="title function_">processPayment</span>(<span class="attr">amount</span>: <span class="built_in">number</span>, <span class="attr">currency</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">PaymentResult</span>&gt;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>TypeScript’s module system and <code>declare module</code> solve core problems in JavaScript development:</p><ol><li><strong>Namespace isolation</strong> - Avoid global pollution and naming conflicts</li><li><strong>Dependency management</strong> - Clearly declare dependencies between modules</li><li><strong>Type safety</strong> - Provide type checking for third-party libraries and special resources</li><li><strong>Code organization</strong> - Organize related functionality within the same module</li><li><strong>Encapsulation control</strong> - Decide which functionality to expose externally</li></ol><p>For Java developers, you can understand it this way:</p><ul><li><strong>Module system</strong> ≈ Java’s package system</li><li><strong>export&#x2F;import</strong> ≈ Java’s public and import statements</li><li><strong>declare module</strong> ≈ Writing interface definitions for third-party JAR packages</li></ul><p>With mastery of these concepts, you’ll be able to better organize code in TypeScript projects and enjoy the improved development experience that type safety brings.</p>]]></content>
    
    
    <summary type="html">A comprehensive analysis of TypeScript module system and declare module usage from a Java developer&#39;s perspective, understanding why module systems are needed and how to use them correctly through comparison.</summary>
    
    
    
    <category term="Programming" scheme="https://blog.baduncle.top/categories/Programming/"/>
    
    
    <category term="TypeScript" scheme="https://blog.baduncle.top/tags/TypeScript/"/>
    
    <category term="declare-module" scheme="https://blog.baduncle.top/tags/declare-module/"/>
    
    <category term="Java" scheme="https://blog.baduncle.top/tags/Java/"/>
    
    <category term="JavaScript" scheme="https://blog.baduncle.top/tags/JavaScript/"/>
    
    <category term="Programming" scheme="https://blog.baduncle.top/tags/Programming/"/>
    
    <category term="Tutorial" scheme="https://blog.baduncle.top/tags/Tutorial/"/>
    
    <category term="module-system" scheme="https://blog.baduncle.top/tags/module-system/"/>
    
  </entry>
  
</feed>
