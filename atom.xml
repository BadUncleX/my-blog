<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Baduncle Blog</title>
  
  <subtitle>vibe coding</subtitle>
  <link href="https://blog.baduncle.top/atom.xml" rel="self"/>
  
  <link href="https://blog.baduncle.top/"/>
  <updated>2025-08-07T02:29:18.946Z</updated>
  <id>https://blog.baduncle.top/</id>
  
  <author>
    <name>Baduncle</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TypeScript/JavaScript 标点符号完全指南：从基础到高级用法</title>
    <link href="https://blog.baduncle.top/2025/08/07/typescript-javascript-symbols-guide/"/>
    <id>https://blog.baduncle.top/2025/08/07/typescript-javascript-symbols-guide/</id>
    <published>2025-08-07T04:00:00.000Z</published>
    <updated>2025-08-07T02:29:18.946Z</updated>
    
    <content type="html"><![CDATA[<p>在 TypeScript 和 JavaScript 开发中，各种标点符号不仅是语法的组成部分，更是表达复杂逻辑的重要工具。本文将从基础到高级，详细介绍每个符号的用法，并结合 React 和 TanStack 生态的实际应用场景。</p><span id="more"></span><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E5%9F%BA%E7%A1%80%E8%B5%8B%E5%80%BC%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AC%A6%E5%8F%B7">基础赋值与字符串符号</a><ul><li><a href="#%E7%AD%89%E5%8F%B7---%E8%B5%8B%E5%80%BC%E7%9A%84%E8%89%BA%E6%9C%AF">等号 <code>=</code> - 赋值的艺术</a></li><li><a href="#%E5%BC%95%E5%8F%B7%E6%97%8F%EF%BC%9A---%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E4%B8%89%E7%A7%8D%E5%A2%83%E7%95%8C">引号族字符串的三种境界</a></li></ul></li><li><a href="#%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F%E7%AC%A6%E5%8F%B7">对象与类型系统符号</a><ul><li><a href="#%E5%86%92%E5%8F%B7---%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%80%BC%E7%9A%84%E6%A1%A5%E6%A2%81">冒号- 类型与值的桥梁</a></li><li><a href="#%E5%88%86%E5%8F%B7---%E8%AF%AD%E5%8F%A5%E7%9A%84%E4%BC%98%E9%9B%85%E7%BB%93%E6%9D%9F">分号- 语句的优雅结束</a></li></ul></li><li><a href="#%E6%8B%AC%E5%8F%B7%E5%AE%B6%E6%97%8F---%E7%BB%93%E6%9E%84%E4%B8%8E%E9%80%BB%E8%BE%91">括号家族 结构与逻辑</a><ul><li><a href="#%E5%B0%8F%E6%8B%AC%E5%8F%B7---%E5%87%BD%E6%95%B0%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%AE%B9%E5%99%A8">小括号- 函数与表达式的容器</a></li><li><a href="#%E4%B8%AD%E6%8B%AC%E5%8F%B7---%E6%95%B0%E7%BB%84%E4%B8%8E%E5%8A%A8%E6%80%81%E8%AE%BF%E9%97%AE">中括号- 数组与动态访问</a></li><li><a href="#%E5%A4%A7%E6%8B%AC%E5%8F%B7---%E5%AF%B9%E8%B1%A1%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%9D%97">大括号 - 对象与代码块</a></li></ul></li><li><a href="#%E9%AB%98%E7%BA%A7%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E7%B1%BB%E5%9E%8B%E7%AC%A6%E5%8F%B7">高级运算符与类型符号</a><ul><li><a href="#%E9%97%AE%E5%8F%B7---%E5%8F%AF%E9%80%89%E7%9A%84%E5%8A%9B%E9%87%8F">问号 - 可选的力量</a></li><li><a href="#%E6%84%9F%E5%8F%B9%E5%8F%B7---%E6%96%AD%E8%A8%80%E4%B8%8E%E5%90%A6%E5%AE%9A">感叹号 - 断言与否定</a></li><li><a href="#%E7%AB%96%E7%BA%BF---%E8%81%94%E5%90%88%E7%9A%84%E6%99%BA%E6%85%A7">竖线 - 联合的智慧</a></li><li><a href="#%E5%92%8C%E5%8F%B7---%E4%BA%A4%E5%8F%89%E7%9A%84%E5%8A%9B%E9%87%8F">和号 - 交叉的力量</a></li><li><a href="#%E7%AE%AD%E5%A4%B4---%E5%87%BD%E6%95%B0%E7%9A%84%E7%8E%B0%E4%BB%A3%E8%AF%AD%E6%B3%95">箭头 - 函数的现代语法</a></li></ul></li><li><a href="#%E7%8E%B0%E4%BB%A3-JavaScript-TypeScript-%E9%AB%98%E7%BA%A7%E7%AC%A6%E5%8F%B7">现代 JavaScript&#x2F;TypeScript 高级符号</a><ul><li><a href="#%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6---%E5%B1%95%E5%BC%80%E4%B8%8E%E6%94%B6%E9%9B%86">扩展运算符 - 展开与收集</a></li><li><a href="#%E7%A9%BA%E5%80%BC%E5%90%88%E5%B9%B6--%E5%92%8C%E9%80%BB%E8%BE%91%E8%B5%8B%E5%80%BC">空值合并?? 和逻辑赋值</a></li></ul></li><li><a href="#%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E4%B8%8E%E7%8E%B0%E4%BB%A3%E8%AF%AD%E6%B3%95">特殊符号与现代语法</a><ul><li><a href="#%E6%A8%A1%E6%9D%BF%E5%AD%97%E9%9D%A2%E9%87%8F%E6%A0%87%E7%AD%BE">模板字面量标签</a></li><li><a href="#%E7%A7%81%E6%9C%89%E5%AD%97%E6%AE%B5-">私有字段</a></li></ul></li><li><a href="#%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8">实际项目中的综合应用</a><ul><li><a href="#React--TanStack-Query-%E5%AE%8C%E6%95%B4%E7%A4%BA%E4%BE%8B">React + TanStack Query 完整示例</a></li></ul></li><li><a href="#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93">最佳实践总结</a><ul><li><a href="#%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E5%BB%BA%E8%AE%AE">代码风格建议</a></li><li><a href="#%E6%80%A7%E8%83%BD%E8%80%83%E8%99%91">性能考虑</a></li><li><a href="#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">错误处理</a></li></ul></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul><h2 id="基础赋值与字符串符号"><a href="#基础赋值与字符串符号" class="headerlink" title="基础赋值与字符串符号"></a>基础赋值与字符串符号</h2><h3 id="等号-赋值的艺术"><a href="#等号-赋值的艺术" class="headerlink" title="等号 = - 赋值的艺术"></a>等号 <code>=</code> - 赋值的艺术</h3><p><strong>基础用法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单赋值</span></span><br><span class="line"><span class="keyword">let</span> userName = <span class="string">&quot;Alice&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值</span></span><br><span class="line"><span class="keyword">const</span> &#123; data, error &#125; = <span class="title function_">useQuery</span>();</span><br><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><strong>React 中的高级应用</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useState 的状态更新</span></span><br><span class="line"><span class="keyword">const</span> [user, setUser] = useState&lt;<span class="title class_">User</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// useReducer 的 action 处理</span></span><br><span class="line"><span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件 props 解构</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MyComponent</span> = (<span class="params">&#123; title, onSubmit, children &#125;: <span class="title class_">Props</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上述组件 props 解构 等价于：</span></span><br><span class="line"><span class="comment">// const MyComponent = (props: Props) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//    const &#123; title, onSubmit, children &#125; = props;</span></span><br><span class="line"><span class="comment">//    return &lt;div&gt;&#123;title&#125;&lt;/div&gt;;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>TanStack Query 中的应用</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询结果解构</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">data</span>: users, isLoading, error &#125; = <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">  <span class="attr">queryKey</span>: [<span class="string">&#x27;users&#x27;</span>],</span><br><span class="line">  <span class="attr">queryFn</span>: fetchUsers,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变异操作</span></span><br><span class="line"><span class="keyword">const</span> mutation = <span class="title function_">useMutation</span>(&#123;</span><br><span class="line">  <span class="attr">mutationFn</span>: updateUser,</span><br><span class="line">  <span class="attr">onSuccess</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// data 是返回的结果</span></span><br><span class="line">    <span class="title function_">setUser</span>(data);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="引号族：-字符串的三种境界"><a href="#引号族：-字符串的三种境界" class="headerlink" title="引号族：&quot; &#39; ` - 字符串的三种境界"></a>引号族：<code>&quot;</code> <code>&#39;</code> <code>`</code> - 字符串的三种境界</h3><p><strong>双引号 <code>&quot;</code> 和单引号 <code>&#39;</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础字符串</span></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;React Developer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSX 属性中的使用</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn-primary&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  Submit</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON 数据（必须使用双引号）</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="string">&quot;apiUrl&quot;</span>: <span class="string">&quot;https://api.example.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;timeout&quot;</span>: <span class="number">5000</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>反引号 <code>`</code> - 模板字符串的强大功能</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础模板字符串</span></span><br><span class="line"><span class="keyword">const</span> greeting = <span class="string">`Hello, <span class="subst">$&#123;userName&#125;</span>!`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多行字符串</span></span><br><span class="line"><span class="keyword">const</span> sqlQuery = <span class="string">`</span></span><br><span class="line"><span class="string">  SELECT id, name, email </span></span><br><span class="line"><span class="string">  FROM users </span></span><br><span class="line"><span class="string">  WHERE active = true</span></span><br><span class="line"><span class="string">  ORDER BY created_at DESC</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React 中的动态样式</span></span><br><span class="line"><span class="keyword">const</span> containerStyle = &#123;</span><br><span class="line">  <span class="attr">backgroundColor</span>: <span class="string">`hsl(<span class="subst">$&#123;hue&#125;</span>, 70%, 50%)`</span>,</span><br><span class="line">  <span class="attr">transform</span>: <span class="string">`translateX(<span class="subst">$&#123;offset&#125;</span>px)`</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TanStack Query 的动态查询键</span></span><br><span class="line"><span class="keyword">const</span> queryKey = [<span class="string">&#x27;user&#x27;</span>, userId, <span class="string">`profile-<span class="subst">$&#123;version&#125;</span>`</span>];</span><br></pre></td></tr></table></figure><p><strong>高级模板字符串用法</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标签模板字符串（用于样式库如 styled-components）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledButton</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">  background: <span class="subst">$&#123;props =&gt; props.primary ? <span class="string">&#x27;blue&#x27;</span> : <span class="string">&#x27;white&#x27;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">  color: <span class="subst">$&#123;props =&gt; props.primary ? <span class="string">&#x27;white&#x27;</span> : <span class="string">&#x27;blue&#x27;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">  padding: <span class="subst">$&#123;(&#123; size &#125;) =&gt; size === <span class="string">&#x27;large&#x27;</span> ? <span class="string">&#x27;12px 24px&#x27;</span> : <span class="string">&#x27;8px 16px&#x27;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GraphQL 查询（在 TanStack 项目中常见）</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">GET_USERS</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">query</span> GetUsers<span class="punctuation">(</span><span class="variable">$limit</span>: Int<span class="punctuation">!</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-graphql">    users<span class="punctuation">(</span><span class="symbol">limit</span><span class="punctuation">:</span> <span class="variable">$limit</span>) <span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-graphql">      id</span></span><br><span class="line"><span class="language-graphql">      name</span></span><br><span class="line"><span class="language-graphql">      email</span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-graphql">`</span>;</span><br></pre></td></tr></table></figure><h2 id="对象与类型系统符号"><a href="#对象与类型系统符号" class="headerlink" title="对象与类型系统符号"></a>对象与类型系统符号</h2><h3 id="冒号-类型与值的桥梁"><a href="#冒号-类型与值的桥梁" class="headerlink" title="冒号 : - 类型与值的桥梁"></a>冒号 <code>:</code> - 类型与值的桥梁</h3><p><strong>对象属性定义</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">hobbies</span>: [<span class="string">&quot;reading&quot;</span>, <span class="string">&quot;coding&quot;</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>TypeScript 类型注解</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础类型注解</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">count</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">message</span>: <span class="built_in">string</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">isActive</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数类型注解</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateTotal</span>(<span class="params"><span class="attr">price</span>: <span class="built_in">number</span>, <span class="attr">tax</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> price * (<span class="number">1</span> + tax);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React 组件 Props 类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ButtonProps</span> &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  <span class="attr">variant</span>: <span class="string">&#x27;primary&#x27;</span> | <span class="string">&#x27;secondary&#x27;</span>;</span><br><span class="line">  <span class="attr">onClick</span>: <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">React</span>.<span class="title class_">MouseEvent</span>&lt;<span class="title class_">HTMLButtonElement</span>&gt;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Button</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">ButtonProps</span>&gt; = <span class="function">(<span class="params">&#123; children, variant, onClick &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">btn-</span>$&#123;<span class="attr">variant</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>TanStack 中的复杂类型应用</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TanStack Query 的类型定义</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UseUserQueryOptions</span> &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">enabled</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">staleTime</span>?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useUserQuery</span> = (<span class="params">&#123; userId, enabled = <span class="literal">true</span>, staleTime = <span class="number">5000</span> &#125;: <span class="title class_">UseUserQueryOptions</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&#x27;user&#x27;</span>, userId],</span><br><span class="line">    <span class="attr">queryFn</span>: (): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt; =&gt; <span class="title function_">fetchUser</span>(userId),</span><br><span class="line">    enabled,</span><br><span class="line">    staleTime,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TanStack Table 的列定义</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">columns</span>: <span class="title class_">ColumnDef</span>&lt;<span class="title class_">User</span>&gt;[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">accessorKey</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">    <span class="attr">header</span>: <span class="string">&#x27;Name&#x27;</span>,</span><br><span class="line">    <span class="attr">cell</span>: <span class="function">(<span class="params">&#123; row &#125;: &#123; row: Row&lt;User&gt; &#125;</span>) =&gt;</span> row.<span class="title function_">getValue</span>(<span class="string">&#x27;name&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="分号-语句的优雅结束"><a href="#分号-语句的优雅结束" class="headerlink" title="分号 ; - 语句的优雅结束"></a>分号 <code>;</code> - 语句的优雅结束</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐始终使用分号</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;React&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> version = <span class="string">&quot;18.0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 避免 ASI (Automatic Semicolon Insertion) 问题</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">calculate</span>()</span><br><span class="line">;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">forEach</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// 没有分号会出错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// React Hook 调用</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">fetchData</span>();</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// TanStack Query 的配置</span></span><br><span class="line"><span class="keyword">const</span> queryClient = <span class="keyword">new</span> <span class="title class_">QueryClient</span>(&#123;</span><br><span class="line">  <span class="attr">defaultOptions</span>: &#123;</span><br><span class="line">    <span class="attr">queries</span>: &#123;</span><br><span class="line">      <span class="attr">staleTime</span>: <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="括号家族-结构与逻辑"><a href="#括号家族-结构与逻辑" class="headerlink" title="括号家族 - 结构与逻辑"></a>括号家族 - 结构与逻辑</h2><h3 id="小括号-函数与表达式的容器"><a href="#小括号-函数与表达式的容器" class="headerlink" title="小括号 () - 函数与表达式的容器"></a>小括号 <code>()</code> - 函数与表达式的容器</h3><p><strong>函数调用与定义</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// React 函数组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Header</span> = (<span class="params"><span class="attr">props</span>: <span class="title class_">HeaderProps</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;props.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高阶组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">withAuth</span> = (<span class="params"><span class="title class_">WrappedComponent</span>: <span class="title class_">React</span>.<span class="title class_">ComponentType</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params"><span class="attr">props</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; isAuthenticated &#125; = <span class="title function_">useAuth</span>();</span><br><span class="line">    <span class="keyword">return</span> isAuthenticated ? <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>IIFE (立即调用函数表达式)</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建私有作用域</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable language_">module</span> = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> privateVar = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="function">() =&gt;</span> ++privateVar,</span><br><span class="line">    <span class="attr">getCount</span>: <span class="function">() =&gt;</span> privateVar,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// React 中的条件渲染</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ConditionalComponent</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;(() =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">      if (loading) return <span class="tag">&lt;<span class="name">LoadingSpinner</span> /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      if (error) return <span class="tag">&lt;<span class="name">ErrorMessage</span> <span class="attr">error</span>=<span class="string">&#123;error&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      return <span class="tag">&lt;<span class="name">DataList</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">    &#125;)()&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="中括号-数组与动态访问"><a href="#中括号-数组与动态访问" class="headerlink" title="中括号 [] - 数组与动态访问"></a>中括号 <code>[]</code> - 数组与动态访问</h3><p><strong>数组字面量</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> frameworks = [<span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>, <span class="string">&#x27;Angular&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// React 中的列表渲染</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">TodoList</span> = (<span class="params">&#123; todos &#125;: &#123; todos: Todo[] &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;todos.map((todo, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;todo.id</span> || <span class="attr">index</span>&#125;&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ))&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>动态属性访问</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态属性名</span></span><br><span class="line"><span class="keyword">const</span> property = <span class="string">&#x27;userName&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> value = user[property];</span><br><span class="line"></span><br><span class="line"><span class="comment">// React 表单处理</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleInputChange</span> = (<span class="params"><span class="attr">event</span>: <span class="title class_">React</span>.<span class="title class_">ChangeEvent</span>&lt;<span class="title class_">HTMLInputElement</span>&gt;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, value &#125; = event.<span class="property">target</span>;</span><br><span class="line">  <span class="title function_">setFormData</span>(<span class="function"><span class="params">prev</span> =&gt;</span> (&#123;</span><br><span class="line">    ...prev,</span><br><span class="line">    [name]: value  <span class="comment">// 计算属性名</span></span><br><span class="line">  &#125;));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TanStack Query 的动态查询键</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getDynamicQuery</span> = (<span class="params"><span class="attr">filters</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> queryKey = [<span class="string">&#x27;data&#x27;</span>, ...<span class="title class_">Object</span>.<span class="title function_">entries</span>(filters).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;value&#125;</span>`</span>)];</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    queryKey,</span><br><span class="line">    <span class="attr">queryFn</span>: <span class="function">() =&gt;</span> <span class="title function_">fetchData</span>(filters),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>TypeScript 中的索引签名与映射类型</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 索引签名</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StringDictionary</span> &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 映射类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Required</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]-?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React Props 的部分更新</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserFormProps</span> &#123;</span><br><span class="line">  <span class="attr">user</span>: <span class="title class_">User</span>;</span><br><span class="line">  <span class="attr">onUpdate</span>: <span class="function">(<span class="params"><span class="attr">updates</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">User</span>&gt;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大括号-对象与代码块"><a href="#大括号-对象与代码块" class="headerlink" title="大括号 {} - 对象与代码块"></a>大括号 <code>&#123;&#125;</code> - 对象与代码块</h3><p><strong>对象字面量与解构</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象字面量</span></span><br><span class="line"><span class="keyword">const</span> apiConfig = &#123;</span><br><span class="line">  <span class="attr">baseUrl</span>: <span class="string">&#x27;https://api.example.com&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值</span></span><br><span class="line"><span class="keyword">const</span> &#123; baseUrl, timeout, headers &#125; = apiConfig;</span><br><span class="line"><span class="keyword">const</span> &#123; data, error, isLoading &#125; = <span class="title function_">useQuery</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套解构</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="attr">user</span>: &#123; name, email &#125;,</span><br><span class="line">  <span class="attr">preferences</span>: &#123; theme &#125;</span><br><span class="line">&#125; = userProfile;</span><br></pre></td></tr></table></figure><p><strong>JSX 中的表达式</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">UserCard</span> = (<span class="params">&#123; user, showEmail = <span class="literal">false</span> &#125;: <span class="title class_">UserCardProps</span></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;user-card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;showEmail &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;user.email&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">backgroundColor:</span> <span class="attr">user.isActive</span> ? &#x27;<span class="attr">green</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">gray</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">padding:</span> &#x27;<span class="attr">10px</span>&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      Status: &#123;user.isActive ? &#x27;Active&#x27; : &#x27;Inactive&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>TanStack Router 中的应用</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由配置</span></span><br><span class="line"><span class="keyword">const</span> routeTree = <span class="title function_">createRootRoute</span>(&#123;</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span>&#123;/* 导航组件 */&#125;<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  ),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态路由参数</span></span><br><span class="line"><span class="keyword">const</span> userRoute = <span class="title function_">createRoute</span>(&#123;</span><br><span class="line">  <span class="attr">getParentRoute</span>: <span class="function">() =&gt;</span> rootRoute,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/users/$userId&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">(<span class="params">&#123; params &#125;: &#123; params: &#123; userId: <span class="built_in">string</span> &#125; &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">data</span>: user &#125; = <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">      <span class="attr">queryKey</span>: [<span class="string">&#x27;user&#x27;</span>, params.<span class="property">userId</span>],</span><br><span class="line">      <span class="attr">queryFn</span>: <span class="function">() =&gt;</span> <span class="title function_">fetchUser</span>(params.<span class="property">userId</span>),</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> user ? <span class="language-xml"><span class="tag">&lt;<span class="name">UserProfile</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> /&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="高级运算符与类型符号"><a href="#高级运算符与类型符号" class="headerlink" title="高级运算符与类型符号"></a>高级运算符与类型符号</h2><h3 id="问号-可选的力量"><a href="#问号-可选的力量" class="headerlink" title="问号 ? - 可选的力量"></a>问号 <code>?</code> - 可选的力量</h3><p><strong>可选属性与参数</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口中的可选属性</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>?: <span class="built_in">string</span>;  <span class="comment">// 可选</span></span><br><span class="line">  <span class="attr">avatar</span>?: <span class="built_in">string</span>; <span class="comment">// 可选</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数可选参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createUser</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">email</span>?: <span class="built_in">string</span></span>): <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="title function_">generateId</span>(),</span><br><span class="line">    name,</span><br><span class="line">    ...(email &amp;&amp; &#123; email &#125;),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React 组件的可选 Props</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ButtonProps</span> &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  <span class="attr">variant</span>?: <span class="string">&#x27;primary&#x27;</span> | <span class="string">&#x27;secondary&#x27;</span>;</span><br><span class="line">  <span class="attr">disabled</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Button</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">ButtonProps</span>&gt; = <span class="function">(<span class="params">&#123; </span></span></span><br><span class="line"><span class="params"><span class="function">  children, </span></span></span><br><span class="line"><span class="params"><span class="function">  variant = <span class="string">&#x27;primary&#x27;</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">  disabled = <span class="literal">false</span> </span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">btn-</span>$&#123;<span class="attr">variant</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">disabled</span>=<span class="string">&#123;disabled&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>可选链操作符 <code>?.</code></strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安全的属性访问</span></span><br><span class="line"><span class="keyword">const</span> userEmail = user?.<span class="property">profile</span>?.<span class="property">email</span>;</span><br><span class="line"><span class="keyword">const</span> firstHobby = user?.<span class="property">hobbies</span>?.[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选方法调用</span></span><br><span class="line">user?.<span class="property">updateProfile</span>?.(&#123; <span class="attr">name</span>: <span class="string">&#x27;New Name&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// React 中的安全渲染</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserProfile</span> = (<span class="params">&#123; user &#125;: &#123; user?: User &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;user?.name || &#x27;Guest&#x27;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;user?.email || &#x27;No email provided&#x27;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;user?.avatar &amp;&amp; <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;user.avatar&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;Avatar&quot;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// TanStack Query 中的安全数据访问</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserDashboard</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: user &#125; = <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&#x27;currentUser&#x27;</span>],</span><br><span class="line">    <span class="attr">queryFn</span>: fetchCurrentUser,</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome, &#123;user?.name&#125;!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Points: &#123;user?.gameStats?.points ?? 0&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>三元运算符</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础条件渲染</span></span><br><span class="line"><span class="keyword">const</span> status = isOnline ? <span class="string">&#x27;Online&#x27;</span> : <span class="string">&#x27;Offline&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React 中的条件渲染</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">LoginButton</span> = (<span class="params">&#123; isAuthenticated, onLogin, onLogout &#125;: <span class="title class_">Props</span></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;isAuthenticated</span> ? <span class="attr">onLogout</span> <span class="attr">:</span> <span class="attr">onLogin</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;isAuthenticated ? &#x27;Logout&#x27; : &#x27;Login&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套三元运算符（谨慎使用）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getStatusColor</span> = (<span class="params"><span class="attr">status</span>: <span class="built_in">string</span></span>) =&gt; </span><br><span class="line">  status === <span class="string">&#x27;success&#x27;</span> ? <span class="string">&#x27;green&#x27;</span> :</span><br><span class="line">  status === <span class="string">&#x27;error&#x27;</span> ? <span class="string">&#x27;red&#x27;</span> :</span><br><span class="line">  status === <span class="string">&#x27;warning&#x27;</span> ? <span class="string">&#x27;orange&#x27;</span> : <span class="string">&#x27;gray&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TanStack Query 状态处理</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DataComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, isLoading, error &#125; = <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&#x27;data&#x27;</span>],</span><br><span class="line">    <span class="attr">queryFn</span>: fetchData,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;isLoading ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">LoadingSpinner</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : error ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ErrorMessage</span> <span class="attr">error</span>=<span class="string">&#123;error&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">DataList</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="感叹号-断言与否定"><a href="#感叹号-断言与否定" class="headerlink" title="感叹号 ! - 断言与否定"></a>感叹号 <code>!</code> - 断言与否定</h3><p><strong>逻辑非运算符</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isNotActive = !user.<span class="property">isActive</span>;</span><br><span class="line"><span class="keyword">const</span> isEmpty = !items.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React 中的条件逻辑</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">TodoItem</span> = (<span class="params">&#123; todo, onToggle &#125;: <span class="title class_">TodoItemProps</span></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;!todo.completed</span> ? &#x27;<span class="attr">pending</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">completed</span>&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">checked</span>=<span class="string">&#123;!todo.completed&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onChange</span>=<span class="string">&#123;()</span> =&gt;</span> onToggle(todo.id)&#125;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line"><span class="language-xml">    &#123;todo.text&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>TypeScript 非空断言</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非空断言操作符（谨慎使用）</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)!;</span><br><span class="line"><span class="keyword">const</span> user = <span class="title function_">getCurrentUser</span>()!;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React Ref 的常见用法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MyComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = useRef&lt;<span class="title class_">HTMLInputElement</span>&gt;(<span class="literal">null</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">focusInput</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    inputRef.<span class="property">current</span>!.<span class="title function_">focus</span>(); <span class="comment">// 确定 current 不为 null</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组方法中的应用</span></span><br><span class="line"><span class="keyword">const</span> users = <span class="title function_">getUsers</span>();</span><br><span class="line"><span class="keyword">const</span> firstActiveUser = users.<span class="title function_">find</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">isActive</span>)!; <span class="comment">// 确定存在活跃用户</span></span><br></pre></td></tr></table></figure><h3 id="竖线-联合的智慧"><a href="#竖线-联合的智慧" class="headerlink" title="竖线 | - 联合的智慧"></a>竖线 <code>|</code> - 联合的智慧</h3><p><strong>TypeScript 联合类型</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础联合类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Status</span> = <span class="string">&#x27;loading&#x27;</span> | <span class="string">&#x27;success&#x27;</span> | <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">ID</span> = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React 组件 Props 联合类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ButtonProps</span> &#123;</span><br><span class="line">  <span class="attr">variant</span>: <span class="string">&#x27;primary&#x27;</span> | <span class="string">&#x27;secondary&#x27;</span> | <span class="string">&#x27;danger&#x27;</span>;</span><br><span class="line">  <span class="attr">size</span>: <span class="string">&#x27;small&#x27;</span> | <span class="string">&#x27;medium&#x27;</span> | <span class="string">&#x27;large&#x27;</span>;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂联合类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ApiResponse</span>&lt;T&gt; = </span><br><span class="line">  | &#123; <span class="attr">status</span>: <span class="string">&#x27;success&#x27;</span>; <span class="attr">data</span>: T &#125;</span><br><span class="line">  | &#123; <span class="attr">status</span>: <span class="string">&#x27;error&#x27;</span>; <span class="attr">error</span>: <span class="built_in">string</span> &#125;</span><br><span class="line">  | &#123; <span class="attr">status</span>: <span class="string">&#x27;loading&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理联合类型的函数</span></span><br><span class="line"><span class="keyword">const</span> handleApiResponse = &lt;T&gt;<span class="function">(<span class="params"><span class="attr">response</span>: <span class="title class_">ApiResponse</span>&lt;T&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (response.<span class="property">status</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;success&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> response.<span class="property">data</span>; <span class="comment">// TypeScript 知道这里有 data</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;error&#x27;</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(response.<span class="property">error</span>); <span class="comment">// TypeScript 知道这里有 error</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;loading&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>TanStack Query 中的联合类型应用</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询状态的联合类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">QueryStatus</span> = <span class="string">&#x27;idle&#x27;</span> | <span class="string">&#x27;loading&#x27;</span> | <span class="string">&#x27;error&#x27;</span> | <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多种数据源的联合</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DataSource</span> = </span><br><span class="line">  | &#123; <span class="attr">type</span>: <span class="string">&#x27;api&#x27;</span>; <span class="attr">url</span>: <span class="built_in">string</span> &#125;</span><br><span class="line">  | &#123; <span class="attr">type</span>: <span class="string">&#x27;cache&#x27;</span>; <span class="attr">key</span>: <span class="built_in">string</span> &#125;</span><br><span class="line">  | &#123; <span class="attr">type</span>: <span class="string">&#x27;static&#x27;</span>; <span class="attr">data</span>: <span class="built_in">any</span>[] &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useDataQuery</span> = (<span class="params"><span class="attr">source</span>: <span class="title class_">DataSource</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&#x27;data&#x27;</span>, source.<span class="property">type</span>, source.<span class="property">type</span> === <span class="string">&#x27;api&#x27;</span> ? source.<span class="property">url</span> : source.<span class="property">type</span> === <span class="string">&#x27;cache&#x27;</span> ? source.<span class="property">key</span> : <span class="string">&#x27;static&#x27;</span>],</span><br><span class="line">    <span class="attr">queryFn</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> (source.<span class="property">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;api&#x27;</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">fetch</span>(source.<span class="property">url</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>());</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;cache&#x27;</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">getCachedData</span>(source.<span class="property">key</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;static&#x27;</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(source.<span class="property">data</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="和号-交叉的力量"><a href="#和号-交叉的力量" class="headerlink" title="和号 &amp; - 交叉的力量"></a>和号 <code>&amp;</code> - 交叉的力量</h3><p><strong>TypeScript 交叉类型</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础交叉类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">email</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Admin</span> = &#123; <span class="attr">permissions</span>: <span class="built_in">string</span>[] &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AdminUser</span> = <span class="title class_">User</span> &amp; <span class="title class_">Admin</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">adminUser</span>: <span class="title class_">AdminUser</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;alice@example.com&#x27;</span>,</span><br><span class="line">  <span class="attr">permissions</span>: [<span class="string">&#x27;read&#x27;</span>, <span class="string">&#x27;write&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React 组件 Props 的组合</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">BaseProps</span> = &#123;</span><br><span class="line">  <span class="attr">className</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">children</span>?: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ButtonProps</span> = <span class="title class_">BaseProps</span> &amp; &#123;</span><br><span class="line">  <span class="attr">onClick</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">variant</span>: <span class="string">&#x27;primary&#x27;</span> | <span class="string">&#x27;secondary&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LinkProps</span> = <span class="title class_">BaseProps</span> &amp; &#123;</span><br><span class="line">  <span class="attr">href</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">target</span>?: <span class="string">&#x27;_blank&#x27;</span> | <span class="string">&#x27;_self&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高阶组件的类型组合</span></span><br><span class="line"><span class="keyword">const</span> withLoading = &lt;P <span class="keyword">extends</span> <span class="built_in">object</span>&gt;<span class="function">(<span class="params"><span class="title class_">Component</span>: <span class="title class_">React</span>.<span class="title class_">ComponentType</span>&lt;P&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params"><span class="attr">props</span>: P &amp; &#123; isLoading: <span class="built_in">boolean</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (props.<span class="property">isLoading</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="箭头-函数的现代语法"><a href="#箭头-函数的现代语法" class="headerlink" title="箭头 =&gt; - 函数的现代语法"></a>箭头 <code>=&gt;</code> - 函数的现代语法</h3><p><strong>基础箭头函数</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单箭头函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>) =&gt; a + b;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">greet</span> = (<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) =&gt; <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带类型注解的箭头函数</span></span><br><span class="line"><span class="keyword">const</span> processUser = (<span class="attr">user</span>: <span class="title class_">User</span>): <span class="function"><span class="params">ProcessedUser</span> =&gt;</span> (&#123;</span><br><span class="line">  ...user,</span><br><span class="line">  <span class="attr">displayName</span>: user.<span class="property">name</span>.<span class="title function_">toUpperCase</span>(),</span><br><span class="line">  <span class="attr">isVip</span>: user.<span class="property">points</span> &gt; <span class="number">1000</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>React 中的箭头函数</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Welcome</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;&#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;&gt; = <span class="function">(<span class="params">&#123; name &#125;</span>) =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome, &#123;name&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件处理器</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">TodoApp</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = useState&lt;<span class="title class_">Todo</span>[]&gt;([]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">addTodo</span> = (<span class="params"><span class="attr">text</span>: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTodos</span>(<span class="function"><span class="params">prev</span> =&gt;</span> [...prev, &#123; <span class="attr">id</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(), text, <span class="attr">completed</span>: <span class="literal">false</span> &#125;]);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">toggleTodo</span> = (<span class="params"><span class="attr">id</span>: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTodos</span>(<span class="function"><span class="params">prev</span> =&gt;</span> prev.<span class="title function_">map</span>(<span class="function"><span class="params">todo</span> =&gt;</span> </span><br><span class="line">      todo.<span class="property">id</span> === id ? &#123; ...todo, <span class="attr">completed</span>: !todo.<span class="property">completed</span> &#125; : todo</span><br><span class="line">    ));</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onKeyPress</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          if (e.key === &#x27;Enter&#x27;) &#123;</span></span><br><span class="line"><span class="language-xml">            addTodo((e.target as HTMLInputElement).value);</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      &#123;todos.map(todo =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> toggleTodo(todo.id)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          &#123;todo.text&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>TanStack Query 中的应用</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useUsers</span> = (<span class="params"></span>) =&gt; <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">  <span class="attr">queryKey</span>: [<span class="string">&#x27;users&#x27;</span>],</span><br><span class="line">  <span class="attr">queryFn</span>: <span class="function">() =&gt;</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/users&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>()),</span><br><span class="line">  <span class="attr">select</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> data.<span class="title function_">filter</span>(<span class="function">(<span class="params"><span class="attr">user</span>: <span class="title class_">User</span></span>) =&gt;</span> user.<span class="property">isActive</span>), <span class="comment">// 数据转换</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变异回调</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useCreateUser</span> = (<span class="params"></span>) =&gt; <span class="title function_">useMutation</span>(&#123;</span><br><span class="line">  <span class="attr">mutationFn</span>: <span class="function">(<span class="params"><span class="attr">userData</span>: <span class="title class_">CreateUserData</span></span>) =&gt;</span> </span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;/api/users&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;,</span><br><span class="line">      <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(userData),</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>()),</span><br><span class="line">  <span class="attr">onSuccess</span>: <span class="function">(<span class="params">newUser</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 成功回调</span></span><br><span class="line">    toast.<span class="title function_">success</span>(<span class="string">`User <span class="subst">$&#123;newUser.name&#125;</span> created successfully!`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onError</span>: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 错误回调</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to create user:&#x27;</span>, error);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="现代-JavaScript-TypeScript-高级符号"><a href="#现代-JavaScript-TypeScript-高级符号" class="headerlink" title="现代 JavaScript&#x2F;TypeScript 高级符号"></a>现代 JavaScript&#x2F;TypeScript 高级符号</h2><h3 id="扩展运算符-展开与收集"><a href="#扩展运算符-展开与收集" class="headerlink" title="扩展运算符 ... - 展开与收集"></a>扩展运算符 <code>...</code> - 展开与收集</h3><p><strong>数组操作</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组展开</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> moreNumbers = [<span class="number">0</span>, ...numbers, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// React 中的状态更新</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">TodoList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = useState&lt;<span class="title class_">Todo</span>[]&gt;([]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">addTodo</span> = (<span class="params"><span class="attr">newTodo</span>: <span class="title class_">Todo</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTodos</span>(<span class="function"><span class="params">prev</span> =&gt;</span> [...prev, newTodo]);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">removeTodo</span> = (<span class="params"><span class="attr">id</span>: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTodos</span>(<span class="function"><span class="params">prev</span> =&gt;</span> prev.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">id</span> !== id));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>对象操作</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象展开与合并</span></span><br><span class="line"><span class="keyword">const</span> baseUser = &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> userWithEmail = &#123; ...baseUser, <span class="attr">email</span>: <span class="string">&#x27;alice@example.com&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React Props 传递</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserCard</span> = (<span class="params"><span class="attr">props</span>: <span class="title class_">UserCardProps</span></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> &#123;<span class="attr">...props.divProps</span>&#125; <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">user-card</span> $&#123;<span class="attr">props.divProps</span>?<span class="attr">.className</span> || &#x27;&#x27;&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">UserAvatar</span> &#123;<span class="attr">...props.avatarProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">UserInfo</span> &#123;<span class="attr">...props.userProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// TanStack Query 选项合并</span></span><br><span class="line"><span class="keyword">const</span> createQueryOptions = &lt;T&gt;<span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="attr">baseOptions</span>: <span class="title class_">UseQueryOptions</span>&lt;T&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="attr">customOptions</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">UseQueryOptions</span>&lt;T&gt;&gt; = &#123;&#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> (&#123;</span><br><span class="line">  ...baseOptions,</span><br><span class="line">  ...customOptions,</span><br><span class="line">  <span class="attr">queryKey</span>: [...baseOptions.<span class="property">queryKey</span>, ...customOptions.<span class="property">queryKey</span> || []],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>函数参数收集</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Rest 参数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">logMessages</span> = (<span class="params">...<span class="attr">messages</span>: <span class="built_in">string</span>[]</span>) =&gt; &#123;</span><br><span class="line">  messages.<span class="title function_">forEach</span>(<span class="function"><span class="params">msg</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(msg));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React 组件的灵活参数</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">FlexibleButtonProps</span> &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  <span class="attr">onClick</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">FlexibleButton</span> = (<span class="params">&#123; children, onClick, ...restProps &#125;: </span></span><br><span class="line"><span class="params">  <span class="title class_">FlexibleButtonProps</span> &amp; <span class="title class_">React</span>.<span class="title class_">ButtonHTMLAttributes</span>&lt;<span class="title class_">HTMLButtonElement</span>&gt;</span></span><br><span class="line"><span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span> &#123;<span class="attr">...restProps</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="空值合并-和逻辑赋值"><a href="#空值合并-和逻辑赋值" class="headerlink" title="空值合并 ?? 和逻辑赋值"></a>空值合并 <code>??</code> 和逻辑赋值</h3><p><strong>空值合并运算符</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与 || 的区别</span></span><br><span class="line"><span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span> ?? <span class="number">3000</span>; <span class="comment">// 只有 null/undefined 时使用默认值</span></span><br><span class="line"><span class="keyword">const</span> title = user.<span class="property">title</span> ?? <span class="string">&#x27;Untitled&#x27;</span>; <span class="comment">// 空字符串不会被替换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// React 中的默认值处理</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserProfile</span> = (<span class="params">&#123; user &#125;: &#123; user?: User &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;user?.name ?? &#x27;Anonymous&#x27;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Age: &#123;user?.age ?? &#x27;Not specified&#x27;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// TanStack Query 中的默认数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useUserProfile</span> = (<span class="params"><span class="attr">userId</span>: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&#x27;user&#x27;</span>, userId],</span><br><span class="line">    <span class="attr">queryFn</span>: <span class="function">() =&gt;</span> <span class="title function_">fetchUser</span>(userId),</span><br><span class="line">    <span class="attr">placeholderData</span>: <span class="function">(<span class="params">previousData</span>) =&gt;</span> previousData ?? <span class="title function_">getDefaultUser</span>(),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>逻辑赋值运算符</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ??= 空值赋值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">config</span>: <span class="title class_">AppConfig</span> = <span class="title function_">getConfig</span>();</span><br><span class="line">config.<span class="property">theme</span> ??= <span class="string">&#x27;light&#x27;</span>; <span class="comment">// 只有为 null/undefined 时才赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ||= 逻辑或赋值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">cache</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt; = &#123;&#125;;</span><br><span class="line">cache.<span class="property">users</span> ||= []; <span class="comment">// 如果 falsy 则赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &amp;&amp;= 逻辑与赋值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">settings</span>: <span class="title class_">Settings</span> = <span class="title function_">getUserSettings</span>();</span><br><span class="line">settings.<span class="property">notifications</span> &amp;&amp;= <span class="title function_">validateNotificationSettings</span>(settings.<span class="property">notifications</span>);</span><br></pre></td></tr></table></figure><h2 id="特殊符号与现代语法"><a href="#特殊符号与现代语法" class="headerlink" title="特殊符号与现代语法"></a>特殊符号与现代语法</h2><h3 id="模板字面量标签"><a href="#模板字面量标签" class="headerlink" title="模板字面量标签"></a>模板字面量标签</h3><p><strong>styled-components 中的应用</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled, &#123; css &#125; <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础样式组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Button</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">  padding: 10px 20px;</span></span><br><span class="line"><span class="string">  border: none;</span></span><br><span class="line"><span class="string">  border-radius: 4px;</span></span><br><span class="line"><span class="string">  cursor: pointer;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;props =&gt; props.primary &amp;&amp; css`<span class="language-css"></span></span></span></span><br><span class="line"><span class="language-css"><span class="subst"><span class="string">    <span class="attribute">background-color</span>: blue;</span></span></span></span><br><span class="line"><span class="language-css"><span class="subst"><span class="string">    <span class="attribute">color</span>: white;</span></span></span></span><br><span class="line"><span class="language-css"><span class="subst"><span class="string">  `</span>&#125;</span></span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;props =&gt; props.size === <span class="string">&#x27;large&#x27;</span> &amp;&amp; css`<span class="language-css"></span></span></span></span><br><span class="line"><span class="language-css"><span class="subst"><span class="string">    <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">30px</span>;</span></span></span></span><br><span class="line"><span class="language-css"><span class="subst"><span class="string">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span></span></span><br><span class="line"><span class="language-css"><span class="subst"><span class="string">  `</span>&#125;</span></span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态样式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Container</span> = styled.<span class="property">div</span>&lt;&#123; <span class="attr">width</span>: <span class="built_in">number</span>; <span class="attr">height</span>: <span class="built_in">number</span> &#125;&gt;<span class="string">`</span></span><br><span class="line"><span class="string">  width: <span class="subst">$&#123;props =&gt; props.width&#125;</span>px;</span></span><br><span class="line"><span class="string">  height: <span class="subst">$&#123;props =&gt; props.height&#125;</span>px;</span></span><br><span class="line"><span class="string">  background: linear-gradient(45deg, </span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;props =&gt; props.theme.primary&#125;</span>, </span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;props =&gt; props.theme.secondary&#125;</span></span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p><strong>GraphQL 查询模板</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; gql &#125; <span class="keyword">from</span> <span class="string">&#x27;@apollo/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GraphQL 查询</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">GET_USER_PROFILE</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">query</span> GetUserProfile<span class="punctuation">(</span><span class="variable">$userId</span>: ID<span class="punctuation">!</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-graphql">    user<span class="punctuation">(</span><span class="symbol">id</span><span class="punctuation">:</span> <span class="variable">$userId</span>) <span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-graphql">      id</span></span><br><span class="line"><span class="language-graphql">      name</span></span><br><span class="line"><span class="language-graphql">      email</span></span><br><span class="line"><span class="language-graphql">      posts <span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-graphql">        id</span></span><br><span class="line"><span class="language-graphql">        title</span></span><br><span class="line"><span class="language-graphql">        createdAt</span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-graphql">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带变量的复杂查询</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SEARCH_USERS</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">query</span> SearchUsers<span class="punctuation">(</span><span class="variable">$filters</span>: UserFilters<span class="punctuation">!</span>, <span class="variable">$pagination</span>: PaginationInput<span class="punctuation">!</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-graphql">    searchUsers<span class="punctuation">(</span><span class="symbol">filters</span><span class="punctuation">:</span> <span class="variable">$filters</span>, <span class="symbol">pagination</span><span class="punctuation">:</span> <span class="variable">$pagination</span>) <span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-graphql">      users <span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-graphql">        <span class="punctuation">...</span>UserFragment</span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-graphql">      totalCount</span></span><br><span class="line"><span class="language-graphql">      hasNextPage</span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-graphql">  </span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">fragment</span> UserFragment <span class="keyword">on</span> User <span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-graphql">    id</span></span><br><span class="line"><span class="language-graphql">    name</span></span><br><span class="line"><span class="language-graphql">    email</span></span><br><span class="line"><span class="language-graphql">    avatar</span></span><br><span class="line"><span class="language-graphql">    isActive</span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-graphql">`</span>;</span><br></pre></td></tr></table></figure><h3 id="私有字段"><a href="#私有字段" class="headerlink" title="私有字段 #"></a>私有字段 <code>#</code></h3><p><strong>类的私有成员</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserManager</span> &#123;</span><br><span class="line">  #<span class="attr">users</span>: <span class="title class_">User</span>[] = [];</span><br><span class="line">  #<span class="attr">currentUser</span>: <span class="title class_">User</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 私有方法</span></span><br><span class="line">  #<span class="title function_">validateUser</span>(<span class="attr">user</span>: <span class="title class_">User</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> user.<span class="property">name</span>.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; user.<span class="property">email</span>.<span class="title function_">includes</span>(<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 公共接口</span></span><br><span class="line">  <span class="title function_">addUser</span>(<span class="attr">user</span>: <span class="title class_">User</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">validateUser</span>(user)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#users.<span class="title function_">push</span>(user);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">getCurrentUser</span>(): <span class="title class_">User</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#currentUser;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React Class Component 中的应用（较少使用）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataLoader</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  #cache = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  #loadingPromises = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  </span><br><span class="line">  #loadData = <span class="title function_">async</span> (<span class="attr">key</span>: <span class="built_in">string</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.#cache.<span class="title function_">has</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.#cache.<span class="title function_">get</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.#loadingPromises.<span class="title function_">has</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.#loadingPromises.<span class="title function_">get</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> promise = <span class="title function_">fetch</span>(<span class="string">`/api/data/<span class="subst">$&#123;key&#125;</span>`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>());</span><br><span class="line">    <span class="variable language_">this</span>.#loadingPromises.<span class="title function_">set</span>(key, promise);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> promise;</span><br><span class="line">      <span class="variable language_">this</span>.#cache.<span class="title function_">set</span>(key, data);</span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#loadingPromises.<span class="title function_">delete</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实际项目中的综合应用"><a href="#实际项目中的综合应用" class="headerlink" title="实际项目中的综合应用"></a>实际项目中的综合应用</h2><h3 id="React-TanStack-Query-完整示例"><a href="#React-TanStack-Query-完整示例" class="headerlink" title="React + TanStack Query 完整示例"></a>React + TanStack Query 完整示例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型定义</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">avatar</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">isActive</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">preferences</span>: &#123;</span><br><span class="line">    <span class="attr">theme</span>: <span class="string">&#x27;light&#x27;</span> | <span class="string">&#x27;dark&#x27;</span>;</span><br><span class="line">    <span class="attr">notifications</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserListProps</span> &#123;</span><br><span class="line">  <span class="attr">filters</span>?: &#123;</span><br><span class="line">    <span class="attr">active</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="attr">search</span>?: <span class="built_in">string</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="attr">onUserSelect</span>?: <span class="function">(<span class="params"><span class="attr">user</span>: <span class="title class_">User</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义 Hook</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useUsers</span> = (<span class="params">&#123; filters &#125;: &#123; filters?: UserListProps[<span class="string">&#x27;filters&#x27;</span>] &#125; = &#123;&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryKey</span>: [<span class="string">&#x27;users&#x27;</span>, filters],</span><br><span class="line">    <span class="attr">queryFn</span>: <span class="title function_">async</span> (): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>[]&gt; =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>();</span><br><span class="line">      <span class="keyword">if</span> (filters?.<span class="property">active</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        params.<span class="title function_">set</span>(<span class="string">&#x27;active&#x27;</span>, filters.<span class="property">active</span>.<span class="title function_">toString</span>());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (filters?.<span class="property">search</span>) &#123;</span><br><span class="line">        params.<span class="title function_">set</span>(<span class="string">&#x27;search&#x27;</span>, filters.<span class="property">search</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/users?<span class="subst">$&#123;params&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Failed to fetch users&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">staleTime</span>: <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>, <span class="comment">// 5分钟</span></span><br><span class="line">    <span class="attr">enabled</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户更新变异</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useUpdateUser</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> queryClient = <span class="title function_">useQueryClient</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useMutation</span>(&#123;</span><br><span class="line">    <span class="attr">mutationFn</span>: <span class="title function_">async</span> (&#123; id, updates &#125;: &#123; <span class="attr">id</span>: <span class="built_in">string</span>; <span class="attr">updates</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">User</span>&gt; &#125;): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt; =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;id&#125;</span>`</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;PATCH&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(updates),</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Failed to update user&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onSuccess</span>: <span class="function">(<span class="params">updatedUser</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 更新缓存中的用户数据</span></span><br><span class="line">      queryClient.<span class="title function_">setQueryData</span>(</span><br><span class="line">        [<span class="string">&#x27;users&#x27;</span>], </span><br><span class="line">        <span class="function">(<span class="params"><span class="attr">oldData</span>: <span class="title class_">User</span>[] | <span class="literal">undefined</span></span>) =&gt;</span> </span><br><span class="line">          oldData?.<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> </span><br><span class="line">            user.<span class="property">id</span> === updatedUser.<span class="property">id</span> ? updatedUser : user</span><br><span class="line">          ) ?? []</span><br><span class="line">      );</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 同时更新单个用户的缓存</span></span><br><span class="line">      queryClient.<span class="title function_">setQueryData</span>([<span class="string">&#x27;user&#x27;</span>, updatedUser.<span class="property">id</span>], updatedUser);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onError</span>: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Update failed:&#x27;</span>, error);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserList</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">UserListProps</span>&gt; = <span class="function">(<span class="params">&#123; filters, onUserSelect &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [searchTerm, setSearchTerm] = <span class="title function_">useState</span>(filters?.<span class="property">search</span> ?? <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [showActiveOnly, setShowActiveOnly] = <span class="title function_">useState</span>(filters?.<span class="property">active</span> ?? <span class="literal">false</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 防抖搜索</span></span><br><span class="line">  <span class="keyword">const</span> debouncedSearch = <span class="title function_">useMemo</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="title function_">debounce</span>(<span class="function">(<span class="params"><span class="attr">term</span>: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 触发搜索逻辑</span></span><br><span class="line">    &#125;, <span class="number">300</span>),</span><br><span class="line">    []</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> queryFilters = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">active</span>: showActiveOnly || <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">search</span>: searchTerm || <span class="literal">undefined</span>,</span><br><span class="line">  &#125;), [showActiveOnly, searchTerm]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: users = [], isLoading, error, refetch &#125; = <span class="title function_">useUsers</span>(&#123; <span class="attr">filters</span>: queryFilters &#125;);</span><br><span class="line">  <span class="keyword">const</span> updateUserMutation = <span class="title function_">useUpdateUser</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> handleUserToggle = <span class="title function_">useCallback</span>(<span class="function">(<span class="params"><span class="attr">user</span>: <span class="title class_">User</span></span>) =&gt;</span> &#123;</span><br><span class="line">    updateUserMutation.<span class="title function_">mutate</span>(&#123;</span><br><span class="line">      <span class="attr">id</span>: user.<span class="property">id</span>,</span><br><span class="line">      <span class="attr">updates</span>: &#123; <span class="attr">isActive</span>: !user.<span class="property">isActive</span> &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, [updateUserMutation]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> handleSearchChange = <span class="title function_">useCallback</span>(<span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">React</span>.<span class="title class_">ChangeEvent</span>&lt;<span class="title class_">HTMLInputElement</span>&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> value = event.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="title function_">setSearchTerm</span>(value);</span><br><span class="line">    <span class="title function_">debouncedSearch</span>(value);</span><br><span class="line">  &#125;, [debouncedSearch]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (isLoading) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;loading&quot;</span>&gt;</span>Loading users...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Failed to load users: &#123;error.message&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> refetch()&#125;&gt;Retry<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;user-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;filters&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">placeholder</span>=<span class="string">&quot;Search users...&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;searchTerm&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;handleSearchChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">checked</span>=<span class="string">&#123;showActiveOnly&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setShowActiveOnly(e.target.checked)&#125;</span></span><br><span class="line"><span class="language-xml">          /&gt;</span></span><br><span class="line"><span class="language-xml">          Show active only</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;users.length === 0 ? (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>No users found.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ) : (</span></span><br><span class="line"><span class="language-xml">          users.map((user) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">UserCard</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">user</span>=<span class="string">&#123;user&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> onUserSelect?.(user)&#125;</span></span><br><span class="line"><span class="language-xml">              onToggleActive=&#123;() =&gt; handleUserToggle(user)&#125;</span></span><br><span class="line"><span class="language-xml">              isUpdating=&#123;updateUserMutation.isLoading&#125;</span></span><br><span class="line"><span class="language-xml">            /&gt;</span></span><br><span class="line"><span class="language-xml">          ))</span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户卡片组件</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserCardProps</span> &#123;</span><br><span class="line">  <span class="attr">user</span>: <span class="title class_">User</span>;</span><br><span class="line">  <span class="attr">onClick</span>?: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">onToggleActive</span>?: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">isUpdating</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserCard</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">UserCardProps</span>&gt; = <span class="title function_">memo</span>(<span class="function">(<span class="params">&#123; </span></span></span><br><span class="line"><span class="params"><span class="function">  user, </span></span></span><br><span class="line"><span class="params"><span class="function">  onClick, </span></span></span><br><span class="line"><span class="params"><span class="function">  onToggleActive,</span></span></span><br><span class="line"><span class="params"><span class="function">  isUpdating = <span class="literal">false</span> </span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">user-card</span> $&#123;<span class="attr">user.isActive</span> ? &#x27;<span class="attr">active</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">inactive</span>&#x27;&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;user-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;user.avatar ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;user.avatar&#125;</span> <span class="attr">alt</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">user.name</span>&#125; <span class="attr">avatar</span>`&#125; <span class="attr">className</span>=<span class="string">&quot;avatar&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;avatar-placeholder&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;user.name.charAt(0).toUpperCase()&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;details&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;user.email&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;preferences&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Theme: &#123;user.preferences.theme&#125; | </span></span><br><span class="line"><span class="language-xml">          Notifications: &#123;user.preferences.notifications ? &#x27;On&#x27; : &#x27;Off&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        e.stopPropagation();</span></span><br><span class="line"><span class="language-xml">        onToggleActive?.();</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      disabled=&#123;isUpdating&#125;</span></span><br><span class="line"><span class="language-xml">      className=&#123;`toggle-button $&#123;user.isActive ? &#x27;deactivate&#x27; : &#x27;activate&#x27;&#125;`&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">      &#123;isUpdating ? &#x27;...&#x27; : (user.isActive ? &#x27;Deactivate&#x27; : &#x27;Activate&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">));</span><br></pre></td></tr></table></figure><h2 id="最佳实践总结"><a href="#最佳实践总结" class="headerlink" title="最佳实践总结"></a>最佳实践总结</h2><h3 id="代码风格建议"><a href="#代码风格建议" class="headerlink" title="代码风格建议"></a>代码风格建议</h3><ol><li><p><strong>一致性原则</strong></p><ul><li>在项目中保持引号使用的一致性</li><li>统一使用分号或不使用（推荐使用）</li><li>保持缩进和换行的一致性</li></ul></li><li><p><strong>可读性优先</strong></p><ul><li>复杂的三元运算符考虑拆分为 if-else</li><li>适当使用括号明确运算优先级</li><li>长链式调用适当换行</li></ul></li><li><p><strong>类型安全</strong></p><ul><li>优先使用 TypeScript 的严格模式</li><li>谨慎使用非空断言 <code>!</code></li><li>利用联合类型和交叉类型提高类型精确性</li></ul></li></ol><h3 id="性能考虑"><a href="#性能考虑" class="headerlink" title="性能考虑"></a>性能考虑</h3><ol><li><p><strong>对象和数组操作</strong></p><ul><li>大量数据时考虑 immutable 库</li><li>避免在渲染函数中创建新对象</li><li>合理使用 useMemo 和 useCallback</li></ul></li><li><p><strong>查询优化</strong></p><ul><li>合理设置 TanStack Query 的缓存时间</li><li>使用查询键的层次结构</li><li>避免不必要的重复请求</li></ul></li></ol><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><ol><li><p><strong>防御性编程</strong></p><ul><li>使用可选链避免空值错误</li><li>提供合理的默认值</li><li>及时处理异步操作的错误</li></ul></li><li><p><strong>用户体验</strong></p><ul><li>提供加载状态指示</li><li>友好的错误提示信息</li><li>支持重试机制</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>TypeScript&#x2F;JavaScript 中的标点符号不仅是语法规则，更是表达复杂逻辑和构建现代应用程序的重要工具。掌握这些符号的用法，特别是在 React 和 TanStack 生态中的应用，能够帮助我们：</p><ol><li><strong>写出更安全的代码</strong> - 通过类型系统和可选链避免运行时错误</li><li><strong>提高开发效率</strong> - 利用现代语法糖和工具链</li><li><strong>构建可维护的应用</strong> - 清晰的类型定义和组件结构</li><li><strong>优化用户体验</strong> - 通过状态管理和数据获取优化</li></ol><p>记住，工具本身不是目的，重要的是理解何时以及如何正确使用这些工具来解决实际问题。在实际开发中，始终关注代码的可读性、可维护性和性能，选择最适合当前场景的语法和模式。</p><hr><p><em>本文涵盖了 TypeScript&#x2F;JavaScript 中主要标点符号的用法，从基础语法到现代框架中的高级应用。希望这份指南能够帮助你更好地理解和运用这些强大的语言特性。</em></p>]]></content>
    
    
    <summary type="html">深入解析 TypeScript/JavaScript 中各种标点符号的用法，包括在 React 和 TanStack 生态中的实际应用场景</summary>
    
    
    
    
    <category term="symbols" scheme="https://blog.baduncle.top/tags/symbols/"/>
    
    <category term="syntax" scheme="https://blog.baduncle.top/tags/syntax/"/>
    
    <category term="operators" scheme="https://blog.baduncle.top/tags/operators/"/>
    
    <category term="destructuring" scheme="https://blog.baduncle.top/tags/destructuring/"/>
    
    <category term="template-literals" scheme="https://blog.baduncle.top/tags/template-literals/"/>
    
    <category term="optional-chaining" scheme="https://blog.baduncle.top/tags/optional-chaining/"/>
    
    <category term="spread-operator" scheme="https://blog.baduncle.top/tags/spread-operator/"/>
    
    <category term="arrow-functions" scheme="https://blog.baduncle.top/tags/arrow-functions/"/>
    
    <category term="union-types" scheme="https://blog.baduncle.top/tags/union-types/"/>
    
    <category term="intersection-types" scheme="https://blog.baduncle.top/tags/intersection-types/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript/TypeScript 函数语法完全指南：从 Java 开发者视角理解现代 JS 函数</title>
    <link href="https://blog.baduncle.top/2025/08/06/javascript-typescript-function-syntax-guide-for-java-developers/"/>
    <id>https://blog.baduncle.top/2025/08/06/javascript-typescript-function-syntax-guide-for-java-developers/</id>
    <published>2025-08-06T13:23:00.000Z</published>
    <updated>2025-08-06T16:39:21.741Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名 Java 开发者，当你第一次看到这样的 TypeScript 代码时，可能会感到困惑：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">createRouter</span>: <span class="title class_">CreateRouterFn</span> = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Router</span>(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CreateRouterFn</code> 是什么？<code>=&gt;</code> 又是什么语法？这与 Java 的方法声明有何不同？本文将从 Java 开发者熟悉的概念出发，系统性地解析 JavaScript&#x2F;TypeScript 函数的各种语法形式，帮你快速掌握现代前端开发的核心语法。</p><span id="more"></span><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E5%BC%95%E8%A8%80%EF%BC%9A%E4%BB%8E%E5%9B%B0%E6%83%91%E5%88%B0%E6%B8%85%E6%99%B0">引言：从困惑到清晰</a><ul><li><a href="#%E8%A7%A6%E5%8F%91%E6%80%9D%E8%80%83%E7%9A%84%E6%BA%90%E7%A0%81%E7%89%87%E6%AE%B5">触发思考的源码片段</a></li><li><a href="#Java-vs-JavaScript-TypeScript-%E7%9A%84%E6%A0%B9%E6%9C%AC%E5%B7%AE%E5%BC%82">Java vs JavaScript&#x2F;TypeScript 的根本差异</a></li></ul></li><li><a href="#%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%85%A8%E5%AF%B9%E6%AF%94">第一章：基础语法全对比</a><ul><li><a href="#1-1-%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E6%96%B9%E5%BC%8F">1.1 函数声明方式</a></li><li><a href="#1-2-%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86%E5%AF%B9%E6%AF%94">1.2 参数处理对比</a></li></ul></li><li><a href="#%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90">第二章：箭头函数深度解析</a><ul><li><a href="#2-1-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%84">2.1 箭头函数语法解构</a></li><li><a href="#2-2-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0-vs-Java-Lambda">2.2 箭头函数 vs Java Lambda</a></li><li><a href="#2-3-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E7%89%B9%E6%AE%8A%E6%80%A7">2.3 箭头函数的特殊性</a></li></ul></li><li><a href="#%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9ATypeScript-%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F">第三章：TypeScript 函数类型系统</a><ul><li><a href="#3-1-%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89%E5%92%8C%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BB%B7%E5%80%BC">3.1 函数类型定义和注解的价值</a></li><li><a href="#3-2-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3">3.2 高阶函数类型注解</a></li><li><a href="#3-3-%E5%A4%8D%E6%9D%82%E7%B1%BB%E5%9E%8B%E7%BB%84%E5%90%88">3.3 复杂类型组合</a></li></ul></li><li><a href="#%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%8E%B0%E4%BB%A3-JavaScript-TypeScript-%E5%87%BD%E6%95%B0%E7%89%B9%E6%80%A7">第四章：现代 JavaScript&#x2F;TypeScript 函数特性</a><ul><li><a href="#4-1-%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0%EF%BC%88async-await%EF%BC%89">4.1 异步函数（async&#x2F;await）</a></li><li><a href="#4-2-%E6%B3%9B%E5%9E%8B%E5%87%BD%E6%95%B0">4.2 泛型函数</a></li><li><a href="#4-3-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD">4.3 函数重载</a></li></ul></li><li><a href="#%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">第五章：实际应用场景</a><ul><li><a href="#5-1-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0">5.1 事件处理函数</a></li><li><a href="#5-2-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F">5.2 函数式编程模式</a></li><li><a href="#5-3-%E5%BC%82%E6%AD%A5%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E5%92%8C%E7%BC%93%E5%AD%98">5.3 异步数据获取和缓存</a></li></ul></li><li><a href="#%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">第六章：最佳实践和注意事项</a><ul><li><a href="#6-1-%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E6%96%B9%E5%BC%8F">6.1 何时使用不同的函数声明方式</a></li><li><a href="#6-2-%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%87%BD%E6%95%B0%E8%AE%BE%E8%AE%A1">6.2 类型安全的函数设计</a></li><li><a href="#6-3-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">6.3 错误处理最佳实践</a></li></ul></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul><h2 id="引言：从困惑到清晰"><a href="#引言：从困惑到清晰" class="headerlink" title="引言：从困惑到清晰"></a>引言：从困惑到清晰</h2><h3 id="触发思考的源码片段"><a href="#触发思考的源码片段" class="headerlink" title="触发思考的源码片段"></a>触发思考的源码片段</h3><p>在分析 TanStack Router 源码时，我们遇到了这样的函数定义：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">createRouter</span>: <span class="title class_">CreateRouterFn</span> = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Router</span>(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 Java 开发者来说，这个语法包含了多个陌生概念：</p><ul><li>函数作为常量被声明？</li><li>类型注解的位置为什么在函数名后面？</li><li><code>=&gt;</code> 是什么操作符？</li></ul><h3 id="Java-vs-JavaScript-TypeScript-的根本差异"><a href="#Java-vs-JavaScript-TypeScript-的根本差异" class="headerlink" title="Java vs JavaScript&#x2F;TypeScript 的根本差异"></a>Java vs JavaScript&#x2F;TypeScript 的根本差异</h3><table><thead><tr><th>特性</th><th>Java</th><th>JavaScript&#x2F;TypeScript</th></tr></thead><tbody><tr><td><strong>函数地位</strong></td><td>方法必须属于类</td><td>函数是一等公民，可独立存在</td></tr><tr><td><strong>类型系统</strong></td><td>静态类型，编译时检查</td><td>JS动态类型，TS可选静态类型</td></tr><tr><td><strong>函数赋值</strong></td><td>不能直接将方法赋值给变量</td><td>函数可以赋值给变量</td></tr><tr><td><strong>语法灵活性</strong></td><td>相对固定的语法</td><td>多种函数声明方式</td></tr></tbody></table><h2 id="第一章：基础语法全对比"><a href="#第一章：基础语法全对比" class="headerlink" title="第一章：基础语法全对比"></a>第一章：基础语法全对比</h2><h3 id="1-1-函数声明方式"><a href="#1-1-函数声明方式" class="headerlink" title="1.1 函数声明方式"></a>1.1 函数声明方式</h3><h4 id="传统函数声明"><a href="#传统函数声明" class="headerlink" title="传统函数声明"></a>传统函数声明</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript/JavaScript</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createUser</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>): <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 等价写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">createUser</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关键差异</strong>：</p><ul><li><strong>类型位置</strong>：TypeScript 在参数后用 <code>:</code> 标注类型，Java 在参数前声明类型</li><li><strong>访问修饰符</strong>：JavaScript 没有 <code>public/private</code> 概念，通过 <code>export</code> 控制可见性</li><li><strong>返回类型</strong>：TypeScript 在参数列表后用 <code>:</code> 标注，Java 在方法名前声明</li></ul><h4 id="函数表达式（赋值给变量）"><a href="#函数表达式（赋值给变量）" class="headerlink" title="函数表达式（赋值给变量）"></a>函数表达式（赋值给变量）</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript - 函数作为值赋给变量</span></span><br><span class="line"><span class="keyword">const</span> createUser = <span class="keyword">function</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>): <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 8+ 使用函数式接口实现类似效果</span></span><br><span class="line">BiFunction&lt;String, Integer, User&gt; createUser = </span><br><span class="line">    (name, age) -&gt; <span class="keyword">new</span> <span class="title class_">User</span>(name, age);</span><br></pre></td></tr></table></figure><p><strong>概念映射</strong>：</p><ul><li>JavaScript 的函数变量 ≈ Java 的函数式接口变量</li><li>但 JavaScript 更直观，不需要预先定义接口</li></ul><h3 id="1-2-参数处理对比"><a href="#1-2-参数处理对比" class="headerlink" title="1.2 参数处理对比"></a>1.2 参数处理对比</h3><h4 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript - 原生支持可选参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">greeting</span>?: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;greeting || <span class="string">&#x27;Hello&#x27;</span>&#125;</span>, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方式</span></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&#x27;Alice&#x27;</span>);           <span class="comment">// &quot;Hello, Alice!&quot;</span></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Hi&#x27;</span>);      <span class="comment">// &quot;Hi, Bob!&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java - 需要方法重载实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">greet</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> greet(name, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">greet</span><span class="params">(String name, String greeting)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> greeting + <span class="string">&quot;, &quot;</span> + name + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a>默认参数值</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript - 直接在参数上设置默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createConfig</span>(<span class="params"><span class="attr">host</span>: <span class="built_in">string</span> = <span class="string">&#x27;localhost&#x27;</span>, <span class="attr">port</span>: <span class="built_in">number</span> = <span class="number">3000</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; host, port &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java - 通过方法重载或Builder模式实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Config <span class="title function_">createConfig</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> createConfig(<span class="string">&quot;localhost&quot;</span>, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Config <span class="title function_">createConfig</span><span class="params">(String host, <span class="type">int</span> port)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Config</span>(host, port);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二章：箭头函数深度解析"><a href="#第二章：箭头函数深度解析" class="headerlink" title="第二章：箭头函数深度解析"></a>第二章：箭头函数深度解析</h2><h3 id="2-1-箭头函数语法解构"><a href="#2-1-箭头函数语法解构" class="headerlink" title="2.1 箭头函数语法解构"></a>2.1 箭头函数语法解构</h3><p>让我们逐步分解那个令人困惑的语法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">createRouter</span>: <span class="title class_">CreateRouterFn</span> = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Router</span>(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>步骤分解</strong>：</p><ol><li><code>export const createRouter</code> - 导出一个常量</li><li><code>: CreateRouterFn</code> - 类型注解（这是函数类型，不是返回值类型！）</li><li><code>=</code> - 赋值操作</li><li><code>(options) =&gt;</code> - 箭头函数的参数部分</li><li><code>&#123; return new Router(options) &#125;</code> - 箭头函数的函数体</li></ol><h3 id="2-2-箭头函数-vs-Java-Lambda"><a href="#2-2-箭头函数-vs-Java-Lambda" class="headerlink" title="2.2 箭头函数 vs Java Lambda"></a>2.2 箭头函数 vs Java Lambda</h3><h4 id="基本语法对比"><a href="#基本语法对比" class="headerlink" title="基本语法对比"></a>基本语法对比</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> add = (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化版（单行返回）</span></span><br><span class="line"><span class="keyword">const</span> add = (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> a + b;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java Lambda 表达式</span></span><br><span class="line">BiFunction&lt;Integer, Integer, Integer&gt; add = </span><br><span class="line">    (a, b) -&gt; a + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用方法引用</span></span><br><span class="line">BinaryOperator&lt;Integer&gt; add = Integer::sum;</span><br></pre></td></tr></table></figure><h4 id="复杂场景对比"><a href="#复杂场景对比" class="headerlink" title="复杂场景对比"></a>复杂场景对比</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript - 数组处理</span></span><br><span class="line"><span class="keyword">const</span> users = [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Charlie&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤和映射</span></span><br><span class="line"><span class="keyword">const</span> activeUsers = users</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="function"><span class="params">name</span> =&gt;</span> name.<span class="property">length</span> &gt; <span class="number">3</span>)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function"><span class="params">name</span> =&gt;</span> (&#123; name, <span class="attr">active</span>: <span class="literal">true</span> &#125;));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java Stream API</span></span><br><span class="line">List&lt;String&gt; users = Arrays.asList(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; activeUsers = users.stream()</span><br><span class="line">    .filter(name -&gt; name.length() &gt; <span class="number">3</span>)</span><br><span class="line">    .map(name -&gt; <span class="keyword">new</span> <span class="title class_">User</span>(name, <span class="literal">true</span>))</span><br><span class="line">    .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="2-3-箭头函数的特殊性"><a href="#2-3-箭头函数的特殊性" class="headerlink" title="2.3 箭头函数的特殊性"></a>2.3 箭头函数的特殊性</h3><h4 id="this-绑定差异（JavaScript-独有概念）"><a href="#this-绑定差异（JavaScript-独有概念）" class="headerlink" title="this 绑定差异（JavaScript 独有概念）"></a>this 绑定差异（JavaScript 独有概念）</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventHandler</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> message = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 传统函数 - this 会变化</span></span><br><span class="line">  <span class="title function_">handleClick1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">message</span>); <span class="comment">// undefined！this 指向了 setTimeout</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 箭头函数 - this 保持不变</span></span><br><span class="line">  <span class="title function_">handleClick2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">message</span>); <span class="comment">// &quot;Hello&quot; - this 仍指向 EventHandler 实例</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java 对比</strong>：Java 没有这个问题，因为没有 <code>this</code> 的动态绑定概念。</p><h2 id="第三章：TypeScript-函数类型系统"><a href="#第三章：TypeScript-函数类型系统" class="headerlink" title="第三章：TypeScript 函数类型系统"></a>第三章：TypeScript 函数类型系统</h2><h3 id="3-1-函数类型定义和注解的价值"><a href="#3-1-函数类型定义和注解的价值" class="headerlink" title="3.1 函数类型定义和注解的价值"></a>3.1 函数类型定义和注解的价值</h3><p>回到最初的困惑，<code>CreateRouterFn</code> 究竟是什么？为什么需要函数类型注解？</p><h4 id="关键理解：JavaScript-中函数是”值”，不是”方法”"><a href="#关键理解：JavaScript-中函数是”值”，不是”方法”" class="headerlink" title="关键理解：JavaScript 中函数是”值”，不是”方法”"></a>关键理解：JavaScript 中函数是”值”，不是”方法”</h4><p>这是 Java 开发者理解 JavaScript&#x2F;TypeScript 的关键难点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java - 方法属于类，不能独立存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;  <span class="comment">// 这是方法，不是值</span></span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 你不能这样做：Calculator.add = someOtherMethod;  // 编译错误！</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript/TypeScript - 函数是值，可以被赋值和传递</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数可以被重新赋值！</span></span><br><span class="line">add = <span class="keyword">function</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;  <span class="comment">// 现在 add 实际上是乘法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数可以作为变量传递</span></span><br><span class="line"><span class="keyword">const</span> myOperation = add;</span><br></pre></td></tr></table></figure><h4 id="函数类型注解的实际价值"><a href="#函数类型注解的实际价值" class="headerlink" title="函数类型注解的实际价值"></a>函数类型注解的实际价值</h4><p><strong>1. 确保函数符合预期的”形状”</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数类型 - 这是个&quot;模板&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MathOperation</span> = <span class="function">(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在我可以确保任何 MathOperation 类型的变量都有正确的签名</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">add</span>: <span class="title class_">MathOperation</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;        <span class="comment">// ✅ 符合</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">multiply</span>: <span class="title class_">MathOperation</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a * b;   <span class="comment">// ✅ 符合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这些会报错！</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">badFunction</span>: <span class="title class_">MathOperation</span> = <span class="function">(<span class="params">a</span>) =&gt;</span> a;       <span class="comment">// ❌ 参数不匹配</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">anotherBad</span>: <span class="title class_">MathOperation</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="string">&quot;hi&quot;</span>;  <span class="comment">// ❌ 返回类型不匹配</span></span><br></pre></td></tr></table></figure><p><strong>Java 对比</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MathOperation</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">apply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">MathOperation</span> <span class="variable">add</span> <span class="operator">=</span> (a, b) -&gt; a + b;</span><br><span class="line"><span class="type">MathOperation</span> <span class="variable">multiply</span> <span class="operator">=</span> (a, b) -&gt; a * b;</span><br></pre></td></tr></table></figure><p><strong>2. 函数作为参数时的类型安全</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理数组的函数，要求传入特定形状的操作函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processNumbers</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="attr">numbers</span>: <span class="built_in">number</span>[], </span></span><br><span class="line"><span class="params">    <span class="attr">operation</span>: (a: <span class="built_in">number</span>, b: <span class="built_in">number</span>) =&gt; <span class="built_in">number</span>  <span class="comment">// 函数类型注解</span></span></span><br><span class="line"><span class="params"></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> numbers.<span class="title function_">reduce</span>(operation);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用时，TypeScript 会检查传入的函数是否符合要求</span></span><br><span class="line"><span class="title function_">processNumbers</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);     <span class="comment">// ✅ 求和</span></span><br><span class="line"><span class="title function_">processNumbers</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="function">(<span class="params">a, b</span>) =&gt;</span> a * b);     <span class="comment">// ✅ 求积</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这些会报错！</span></span><br><span class="line"><span class="title function_">processNumbers</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="function">(<span class="params">a</span>) =&gt;</span> a);            <span class="comment">// ❌ 参数不匹配</span></span><br><span class="line"><span class="title function_">processNumbers</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="string">&quot;hello&quot;</span>);   <span class="comment">// ❌ 返回类型不匹配</span></span><br></pre></td></tr></table></figure><p><strong>3. 创建可配置的函数工厂</strong></p><p>回到最初让人困惑的代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这定义了&quot;什么样的函数可以创建 Router&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CreateRouterFn</span> = <span class="function">(<span class="params"><span class="attr">options</span>: <span class="title class_">RouterOptions</span></span>) =&gt;</span> <span class="title class_">Router</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在我可以有多种创建 Router 的方式，但都必须符合这个&quot;形状&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">createRouter</span>: <span class="title class_">CreateRouterFn</span> = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Router</span>(options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我还可以创建其他符合同样类型的函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">createTestRouter</span>: <span class="title class_">CreateRouterFn</span> = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;...options, <span class="attr">testMode</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">createCachedRouter</span>: <span class="title class_">CreateRouterFn</span> = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 先检查缓存</span></span><br><span class="line">    <span class="keyword">if</span> (routerCache.<span class="title function_">has</span>(options.<span class="property">id</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> routerCache.<span class="title function_">get</span>(options.<span class="property">id</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>(options);</span><br><span class="line">    routerCache.<span class="title function_">set</span>(options.<span class="property">id</span>, router);</span><br><span class="line">    <span class="keyword">return</span> router;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据环境动态切换函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">createRouter</span>: <span class="title class_">CreateRouterFn</span> = </span><br><span class="line">    process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span> </span><br><span class="line">        ? createTestRouter      <span class="comment">// 开发环境用测试版本</span></span><br><span class="line">        : createProductionRouter; <span class="comment">// 生产环境用正式版本</span></span><br></pre></td></tr></table></figure><p><strong>4. 插件系统的类型安全</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义插件必须实现的函数类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PluginInitializer</span> = <span class="function">(<span class="params"><span class="attr">config</span>: <span class="title class_">PluginConfig</span></span>) =&gt;</span> <span class="title class_">PluginInstance</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PluginManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">plugins</span>: <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="title class_">PluginInitializer</span>&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册插件时确保类型正确</span></span><br><span class="line">    <span class="title function_">register</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">initializer</span>: <span class="title class_">PluginInitializer</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">plugins</span>.<span class="title function_">set</span>(name, initializer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用插件 - TypeScript 确保调用是安全的</span></span><br><span class="line">    <span class="title function_">createPlugin</span>(<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">config</span>: <span class="title class_">PluginConfig</span>): <span class="title class_">PluginInstance</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> initializer = <span class="variable language_">this</span>.<span class="property">plugins</span>.<span class="title function_">get</span>(name);</span><br><span class="line">        <span class="keyword">if</span> (!initializer) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Plugin <span class="subst">$&#123;name&#125;</span> not found`</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">initializer</span>(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数类型注解的价值总结"><a href="#函数类型注解的价值总结" class="headerlink" title="函数类型注解的价值总结"></a>函数类型注解的价值总结</h4><ol><li><strong>确保一致性</strong>：所有符合某种用途的函数都有相同的签名</li><li><strong>类型安全</strong>：传递函数时不会出现参数不匹配的问题  </li><li><strong>代码提示</strong>：IDE 可以准确提示函数的参数和返回值</li><li><strong>重构安全</strong>：修改函数签名时，所有使用的地方会自动报错</li><li><strong>文档作用</strong>：类型就是最好的文档，说明函数的用途和约束</li></ol><p><strong>Java 开发者的理解方式</strong>：</p><ul><li>函数类型 ≈ Java 的函数式接口</li><li>但 JavaScript 的函数类型更灵活，可以直接定义而不需要先创建接口</li></ul><h4 id="等价的接口定义方式"><a href="#等价的接口定义方式" class="headerlink" title="等价的接口定义方式"></a>等价的接口定义方式</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型别名方式</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CreateRouterFn</span> = <span class="function">(<span class="params"><span class="attr">options</span>: <span class="title class_">RouterOptions</span></span>) =&gt;</span> <span class="title class_">Router</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口方式</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CreateRouterFunction</span> &#123;</span><br><span class="line">  (<span class="attr">options</span>: <span class="title class_">RouterOptions</span>): <span class="title class_">Router</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-高阶函数类型注解"><a href="#3-2-高阶函数类型注解" class="headerlink" title="3.2 高阶函数类型注解"></a>3.2 高阶函数类型注解</h3><h4 id="函数作为参数"><a href="#函数作为参数" class="headerlink" title="函数作为参数"></a>函数作为参数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript - 函数作为参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processData</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="attr">data</span>: <span class="built_in">string</span>[], </span></span><br><span class="line"><span class="params">  <span class="attr">processor</span>: (item: <span class="built_in">string</span>) =&gt; <span class="built_in">string</span></span></span><br><span class="line"><span class="params"></span>): <span class="built_in">string</span>[] &#123;</span><br><span class="line">  <span class="keyword">return</span> data.<span class="title function_">map</span>(processor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">processData</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], <span class="function"><span class="params">item</span> =&gt;</span> item.<span class="title function_">toUpperCase</span>());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java - 使用 Function 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">processData</span><span class="params">(</span></span><br><span class="line"><span class="params">    List&lt;String&gt; data, </span></span><br><span class="line"><span class="params">    Function&lt;String, String&gt; processor</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data.stream()</span><br><span class="line">        .map(processor)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">List&lt;String&gt; result = processData(</span><br><span class="line">    Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>), </span><br><span class="line">    String::toUpperCase</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="函数作为返回值"><a href="#函数作为返回值" class="headerlink" title="函数作为返回值"></a>函数作为返回值</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript - 工厂函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createValidator</span>(<span class="params"><span class="attr">minLength</span>: <span class="built_in">number</span></span>): <span class="function">(<span class="params"><span class="attr">input</span>: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params"><span class="attr">input</span>: <span class="built_in">string</span></span>) =&gt;</span> input.<span class="property">length</span> &gt;= minLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> validateEmail = <span class="title function_">createValidator</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> isValid = <span class="title function_">validateEmail</span>(<span class="string">&quot;test@example.com&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java - 返回函数式接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Function&lt;String, Boolean&gt; <span class="title function_">createValidator</span><span class="params">(<span class="type">int</span> minLength)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> input -&gt; input.length() &gt;= minLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">Function&lt;String, Boolean&gt; validateEmail = createValidator(<span class="number">5</span>);</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">isValid</span> <span class="operator">=</span> validateEmail.apply(<span class="string">&quot;test@example.com&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="3-3-复杂类型组合"><a href="#3-3-复杂类型组合" class="headerlink" title="3.3 复杂类型组合"></a>3.3 复杂类型组合</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 复杂的函数类型组合</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AsyncProcessor</span>&lt;T, R&gt; = <span class="function">(<span class="params"><span class="attr">input</span>: T</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;R&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ErrorHandler</span> = <span class="function">(<span class="params"><span class="attr">error</span>: <span class="title class_">Error</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">DataPipeline</span>&lt;T, R&gt; &#123;</span><br><span class="line">  <span class="attr">process</span>: <span class="title class_">AsyncProcessor</span>&lt;T, R&gt;;</span><br><span class="line">  <span class="attr">onError</span>: <span class="title class_">ErrorHandler</span>;</span><br><span class="line">  <span class="attr">retryCount</span>?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">userPipeline</span>: <span class="title class_">DataPipeline</span>&lt;<span class="title class_">UserInput</span>, <span class="title class_">User</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">process</span>: <span class="title function_">async</span> (input) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 异步处理逻辑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(input.<span class="property">name</span>, input.<span class="property">age</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onError</span>: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Processing failed:&#x27;</span>, error);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">retryCount</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="第四章：现代-JavaScript-TypeScript-函数特性"><a href="#第四章：现代-JavaScript-TypeScript-函数特性" class="headerlink" title="第四章：现代 JavaScript&#x2F;TypeScript 函数特性"></a>第四章：现代 JavaScript&#x2F;TypeScript 函数特性</h2><h3 id="4-1-异步函数（async-await）"><a href="#4-1-异步函数（async-await）" class="headerlink" title="4.1 异步函数（async&#x2F;await）"></a>4.1 异步函数（async&#x2F;await）</h3><p>这是 Java 开发者需要重新学习的重要概念。</p><h4 id="基本异步函数"><a href="#基本异步函数" class="headerlink" title="基本异步函数"></a>基本异步函数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript 异步函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUserData</span>(<span class="params"><span class="attr">userId</span>: <span class="built_in">string</span></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">const</span> userData = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(userData);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Failed to fetch user: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数版本</span></span><br><span class="line"><span class="keyword">const</span> fetchUserData = <span class="title function_">async</span> (<span class="attr">userId</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="keyword">await</span> response.<span class="title function_">json</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java 对比</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java - 使用 CompletableFuture</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;User&gt; <span class="title function_">fetchUserData</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// HTTP 请求逻辑（伪代码）</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.get(<span class="string">&quot;/api/users/&quot;</span> + userId);</span><br><span class="line">            <span class="type">UserData</span> <span class="variable">userData</span> <span class="operator">=</span> objectMapper.readValue(response, UserData.class);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(userData);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Failed to fetch user: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="并行异步处理"><a href="#并行异步处理" class="headerlink" title="并行异步处理"></a>并行异步处理</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript - 并行处理</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadUserProfile</span>(<span class="params"><span class="attr">userId</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, posts, friends] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">    <span class="title function_">fetchUser</span>(userId),</span><br><span class="line">    <span class="title function_">fetchUserPosts</span>(userId),</span><br><span class="line">    <span class="title function_">fetchUserFriends</span>(userId)</span><br><span class="line">  ]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123; user, posts, friends &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java - CompletableFuture 并行处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;UserProfile&gt; <span class="title function_">loadUserProfile</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">    CompletableFuture&lt;User&gt; userFuture = fetchUser(userId);</span><br><span class="line">    CompletableFuture&lt;List&lt;Post&gt;&gt; postsFuture = fetchUserPosts(userId);</span><br><span class="line">    CompletableFuture&lt;List&lt;User&gt;&gt; friendsFuture = fetchUserFriends(userId);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> CompletableFuture.allOf(userFuture, postsFuture, friendsFuture)</span><br><span class="line">        .thenApply(ignored -&gt; <span class="keyword">new</span> <span class="title class_">UserProfile</span>(</span><br><span class="line">            userFuture.join(),</span><br><span class="line">            postsFuture.join(),</span><br><span class="line">            friendsFuture.join()</span><br><span class="line">        ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-泛型函数"><a href="#4-2-泛型函数" class="headerlink" title="4.2 泛型函数"></a>4.2 泛型函数</h3><h4 id="TypeScript-泛型函数"><a href="#TypeScript-泛型函数" class="headerlink" title="TypeScript 泛型函数"></a>TypeScript 泛型函数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本泛型函数</span></span><br><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数泛型</span></span><br><span class="line"><span class="keyword">const</span> identity = &lt;T&gt;(<span class="attr">arg</span>: T): <span class="function"><span class="params">T</span> =&gt;</span> arg;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 约束泛型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Lengthwise</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getLength&lt;T <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt;(<span class="attr">arg</span>: T): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> stringLength = <span class="title function_">getLength</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// 5</span></span><br><span class="line"><span class="keyword">const</span> arrayLength = <span class="title function_">getLength</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>Java 对比</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 泛型方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">identity</span><span class="params">(T arg)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有界泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt; <span class="type">int</span> <span class="title function_">getLength</span><span class="params">(T arg)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arg.getLength();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result1</span> <span class="operator">=</span> identity(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">result2</span> <span class="operator">=</span> identity(<span class="number">42</span>);</span><br></pre></td></tr></table></figure><h4 id="复杂泛型场景"><a href="#复杂泛型场景" class="headerlink" title="复杂泛型场景"></a>复杂泛型场景</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高级泛型函数</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">KeyValuePair</span>&lt;K, V&gt; = &#123;</span><br><span class="line">  <span class="attr">key</span>: K;</span><br><span class="line">  <span class="attr">value</span>: V;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> createMap&lt;K <span class="keyword">extends</span> <span class="built_in">string</span> | <span class="built_in">number</span>, V&gt;(</span><br><span class="line">  <span class="attr">pairs</span>: <span class="title class_">KeyValuePair</span>&lt;K, V&gt;[]</span><br><span class="line">): <span class="title class_">Map</span>&lt;K, V&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;K, V&gt;();</span><br><span class="line">  pairs.<span class="title function_">forEach</span>(<span class="function"><span class="params">pair</span> =&gt;</span> map.<span class="title function_">set</span>(pair.<span class="property">key</span>, pair.<span class="property">value</span>));</span><br><span class="line">  <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> userMap = <span class="title function_">createMap</span>([</span><br><span class="line">  &#123; <span class="attr">key</span>: <span class="string">&#x27;alice&#x27;</span>, <span class="attr">value</span>: <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;Alice&#x27;</span>) &#125;,</span><br><span class="line">  &#123; <span class="attr">key</span>: <span class="string">&#x27;bob&#x27;</span>, <span class="attr">value</span>: <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;Bob&#x27;</span>) &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="4-3-函数重载"><a href="#4-3-函数重载" class="headerlink" title="4.3 函数重载"></a>4.3 函数重载</h3><p>TypeScript 独有的特性，Java 通过方法重载实现类似效果。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript 函数重载声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"><span class="attr">input</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"><span class="attr">input</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"><span class="attr">input</span>: <span class="built_in">boolean</span></span>): <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"><span class="attr">input</span>: <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span></span>): <span class="built_in">string</span> | <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> input === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> input.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> input === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> input * <span class="number">2</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> input.<span class="title function_">toString</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 - TypeScript 会根据参数类型推断返回值类型</span></span><br><span class="line"><span class="keyword">const</span> stringResult = <span class="title function_">process</span>(<span class="string">&quot;hello&quot;</span>);    <span class="comment">// 类型: string</span></span><br><span class="line"><span class="keyword">const</span> numberResult = <span class="title function_">process</span>(<span class="number">42</span>);         <span class="comment">// 类型: number</span></span><br><span class="line"><span class="keyword">const</span> booleanResult = <span class="title function_">process</span>(<span class="literal">true</span>);      <span class="comment">// 类型: string</span></span><br></pre></td></tr></table></figure><p><strong>Java 对比</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 方法重载</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">process</span><span class="params">(String input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> input.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span> input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> input * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">process</span><span class="params">(<span class="type">boolean</span> input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第五章：实际应用场景"><a href="#第五章：实际应用场景" class="headerlink" title="第五章：实际应用场景"></a>第五章：实际应用场景</h2><h3 id="5-1-事件处理函数"><a href="#5-1-事件处理函数" class="headerlink" title="5.1 事件处理函数"></a>5.1 事件处理函数</h3><h4 id="DOM-事件处理"><a href="#DOM-事件处理" class="headerlink" title="DOM 事件处理"></a>DOM 事件处理</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript 事件处理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ButtonHandler</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> clickCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 箭头函数确保 this 绑定正确</span></span><br><span class="line">  handleClick = <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">MouseEvent</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">clickCount</span>++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Button clicked <span class="subst">$&#123;<span class="variable language_">this</span>.clickCount&#125;</span> times`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 传统函数需要手动绑定</span></span><br><span class="line">  <span class="title function_">handleHover</span>(<span class="params"><span class="attr">event</span>: <span class="title class_">MouseEvent</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Button hovered&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setupEventListeners</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myButton&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (button) &#123;</span><br><span class="line">      button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleClick</span>);</span><br><span class="line">      <span class="comment">// 传统函数需要 bind</span></span><br><span class="line">      button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleHover</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="React-组件中的事件处理"><a href="#React-组件中的事件处理" class="headerlink" title="React 组件中的事件处理"></a>React 组件中的事件处理</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React 函数组件</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserFormProps</span> &#123;</span><br><span class="line">  <span class="attr">onSubmit</span>: <span class="function">(<span class="params"><span class="attr">user</span>: <span class="title class_">User</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">onCancel</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserForm</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">UserFormProps</span>&gt; = <span class="function">(<span class="params">&#123; onSubmit, onCancel &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [email, setEmail] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 表单提交处理</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSubmit</span> = (<span class="params"><span class="attr">e</span>: <span class="title class_">React</span>.<span class="title class_">FormEvent</span></span>) =&gt; &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="keyword">if</span> (name &amp;&amp; email) &#123;</span><br><span class="line">      <span class="title function_">onSubmit</span>(<span class="keyword">new</span> <span class="title class_">User</span>(name, email));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输入变化处理</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleNameChange</span> = (<span class="params"><span class="attr">e</span>: <span class="title class_">React</span>.<span class="title class_">ChangeEvent</span>&lt;<span class="title class_">HTMLInputElement</span>&gt;</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setName</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;name&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;handleNameChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">placeholder</span>=<span class="string">&quot;Name&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;email&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setEmail(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">        placeholder=&quot;Email&quot; </span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;onCancel&#125;</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-2-函数式编程模式"><a href="#5-2-函数式编程模式" class="headerlink" title="5.2 函数式编程模式"></a>5.2 函数式编程模式</h3><h4 id="数据处理管道"><a href="#数据处理管道" class="headerlink" title="数据处理管道"></a>数据处理管道</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数式数据处理</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">price</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">category</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">  <span class="comment">// 纯函数 - 无副作用</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> filterByCategory = <span class="function">(<span class="params"><span class="attr">category</span>: <span class="built_in">string</span></span>) =&gt;</span> </span><br><span class="line">    <span class="function">(<span class="params"><span class="attr">product</span>: <span class="title class_">Product</span></span>) =&gt;</span> product.<span class="property">category</span> === category;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> filterByPrice = <span class="function">(<span class="params"><span class="attr">maxPrice</span>: <span class="built_in">number</span></span>) =&gt;</span> </span><br><span class="line">    <span class="function">(<span class="params"><span class="attr">product</span>: <span class="title class_">Product</span></span>) =&gt;</span> product.<span class="property">price</span> &lt;= maxPrice;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> sortByPrice = <span class="function">(<span class="params"><span class="attr">ascending</span>: <span class="built_in">boolean</span> = <span class="literal">true</span></span>) =&gt;</span> </span><br><span class="line">    <span class="function">(<span class="params"><span class="attr">a</span>: <span class="title class_">Product</span>, <span class="attr">b</span>: <span class="title class_">Product</span></span>) =&gt;</span> </span><br><span class="line">      ascending ? a.<span class="property">price</span> - b.<span class="property">price</span> : b.<span class="property">price</span> - a.<span class="property">price</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 组合函数创建处理管道</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">searchProducts</span>(</span><br><span class="line">    <span class="attr">products</span>: <span class="title class_">Product</span>[],</span><br><span class="line">    <span class="attr">category</span>?: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">maxPrice</span>?: <span class="built_in">number</span>,</span><br><span class="line">    sortAscending = <span class="literal">true</span></span><br><span class="line">  ): <span class="title class_">Product</span>[] &#123;</span><br><span class="line">    <span class="keyword">let</span> result = products;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (category) &#123;</span><br><span class="line">      result = result.<span class="title function_">filter</span>(<span class="variable language_">this</span>.<span class="title function_">filterByCategory</span>(category));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (maxPrice) &#123;</span><br><span class="line">      result = result.<span class="title function_">filter</span>(<span class="variable language_">this</span>.<span class="title function_">filterByPrice</span>(maxPrice));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.<span class="title function_">sort</span>(<span class="variable language_">this</span>.<span class="title function_">sortByPrice</span>(sortAscending));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> products = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Laptop&#x27;</span>, <span class="attr">price</span>: <span class="number">1000</span>, <span class="attr">category</span>: <span class="string">&#x27;Electronics&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Book&#x27;</span>, <span class="attr">price</span>: <span class="number">20</span>, <span class="attr">category</span>: <span class="string">&#x27;Education&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Phone&#x27;</span>, <span class="attr">price</span>: <span class="number">800</span>, <span class="attr">category</span>: <span class="string">&#x27;Electronics&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cheapElectronics = <span class="title class_">ProductService</span>.<span class="title function_">searchProducts</span>(</span><br><span class="line">  products,</span><br><span class="line">  <span class="string">&#x27;Electronics&#x27;</span>,</span><br><span class="line">  <span class="number">900</span>,</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="5-3-异步数据获取和缓存"><a href="#5-3-异步数据获取和缓存" class="headerlink" title="5.3 异步数据获取和缓存"></a>5.3 异步数据获取和缓存</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高级异步模式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataCache</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> cache = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, &#123; <span class="attr">data</span>: T; <span class="attr">timestamp</span>: <span class="built_in">number</span> &#125;&gt;();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="variable constant_">TTL</span> = <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>; <span class="comment">// 5分钟</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通用获取函数，支持缓存</span></span><br><span class="line">  <span class="keyword">async</span> fetchWithCache&lt;R&gt;(</span><br><span class="line">    <span class="attr">key</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">fetcher</span>: <span class="function">() =&gt;</span> <span class="title class_">Promise</span>&lt;R&gt;,</span><br><span class="line">    ttl = <span class="variable language_">this</span>.<span class="property">TTL</span></span><br><span class="line">  ): <span class="title class_">Promise</span>&lt;R&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> cached = <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(key);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (cached &amp;&amp; <span class="title class_">Date</span>.<span class="title function_">now</span>() - cached.<span class="property">timestamp</span> &lt; ttl) &#123;</span><br><span class="line">      <span class="keyword">return</span> cached.<span class="property">data</span> <span class="keyword">as</span> R;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetcher</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key, &#123; <span class="attr">data</span>: data <span class="keyword">as</span> T, <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>() &#125;);</span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// 如果有缓存数据，在网络错误时返回缓存</span></span><br><span class="line">      <span class="keyword">if</span> (cached) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;Using stale cache due to fetch error:&#x27;</span>, error);</span><br><span class="line">        <span class="keyword">return</span> cached.<span class="property">data</span> <span class="keyword">as</span> R;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 批量获取</span></span><br><span class="line">  <span class="keyword">async</span> fetchBatch&lt;R&gt;(</span><br><span class="line">    <span class="attr">requests</span>: <span class="title class_">Array</span>&lt;&#123;</span><br><span class="line">      <span class="attr">key</span>: <span class="built_in">string</span>;</span><br><span class="line">      <span class="attr">fetcher</span>: <span class="function">() =&gt;</span> <span class="title class_">Promise</span>&lt;R&gt;;</span><br><span class="line">    &#125;&gt;</span><br><span class="line">  ): <span class="title class_">Promise</span>&lt;R[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span><br><span class="line">      requests.<span class="title function_">map</span>(<span class="function"><span class="params">req</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">fetchWithCache</span>(req.<span class="property">key</span>, req.<span class="property">fetcher</span>))</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> userCache = <span class="keyword">new</span> <span class="title class_">DataCache</span>&lt;<span class="title class_">User</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadUserDashboard</span>(<span class="params"><span class="attr">userId</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, posts, notifications] = <span class="keyword">await</span> userCache.<span class="title function_">fetchBatch</span>([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">key</span>: <span class="string">`user:<span class="subst">$&#123;userId&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">fetcher</span>: <span class="function">() =&gt;</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>())</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">key</span>: <span class="string">`posts:<span class="subst">$&#123;userId&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">fetcher</span>: <span class="function">() =&gt;</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>/posts`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>())</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">key</span>: <span class="string">`notifications:<span class="subst">$&#123;userId&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">fetcher</span>: <span class="function">() =&gt;</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>/notifications`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>())</span><br><span class="line">    &#125;</span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; user, posts, notifications &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第六章：最佳实践和注意事项"><a href="#第六章：最佳实践和注意事项" class="headerlink" title="第六章：最佳实践和注意事项"></a>第六章：最佳实践和注意事项</h2><h3 id="6-1-何时使用不同的函数声明方式"><a href="#6-1-何时使用不同的函数声明方式" class="headerlink" title="6.1 何时使用不同的函数声明方式"></a>6.1 何时使用不同的函数声明方式</h3><h4 id="选择指南"><a href="#选择指南" class="headerlink" title="选择指南"></a>选择指南</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 普通函数声明 - 适用于顶层函数、需要提升的场合</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateTax</span>(<span class="params"><span class="attr">amount</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> amount * <span class="number">0.1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 函数表达式 - 适用于条件性创建函数</span></span><br><span class="line"><span class="keyword">const</span> calculator = isAdvancedMode </span><br><span class="line">  ? <span class="keyword">function</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>) &#123; <span class="keyword">return</span> a * b * <span class="number">1.2</span>; &#125;</span><br><span class="line">  : <span class="keyword">function</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>) &#123; <span class="keyword">return</span> a * b; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 箭头函数 - 适用于回调、简短逻辑、需要保持 this 绑定</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> doubled = numbers.<span class="title function_">map</span>(<span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 方法定义 - 适用于对象/类的方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">  <span class="comment">// 普通方法 - 可以被继承和覆盖</span></span><br><span class="line">  <span class="title function_">calculate</span>(<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 箭头函数属性 - 绑定 this，但不能被覆盖</span></span><br><span class="line">  multiply = (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="性能考虑"><a href="#性能考虑" class="headerlink" title="性能考虑"></a>性能考虑</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 避免 - 每次渲染都创建新函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Component</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(&#x27;clicked&#x27;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      Click me</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 推荐 - 函数复用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Component</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clicked&#x27;</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 推荐 - 类方法中使用箭头函数属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clicked&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-类型安全的函数设计"><a href="#6-2-类型安全的函数设计" class="headerlink" title="6.2 类型安全的函数设计"></a>6.2 类型安全的函数设计</h3><h4 id="严格的类型注解"><a href="#严格的类型注解" class="headerlink" title="严格的类型注解"></a>严格的类型注解</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完整的类型注解</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserValidator</span> = &#123;</span><br><span class="line">  (<span class="attr">user</span>: <span class="title class_">User</span>): <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">errorMessage</span>?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createUserValidator = (</span><br><span class="line">  <span class="attr">rules</span>: <span class="title class_">Array</span>&lt;<span class="function">(<span class="params"><span class="attr">user</span>: <span class="title class_">User</span></span>) =&gt;</span> <span class="built_in">boolean</span>&gt;,</span><br><span class="line">  errorMessage = <span class="string">&#x27;Invalid user&#x27;</span></span><br><span class="line">): <span class="function"><span class="params">UserValidator</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">validator</span>: <span class="title class_">UserValidator</span> = (<span class="attr">user</span>: <span class="title class_">User</span>): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rules.<span class="title function_">every</span>(<span class="function"><span class="params">rule</span> =&gt;</span> <span class="title function_">rule</span>(user));</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  validator.<span class="property">errorMessage</span> = errorMessage;</span><br><span class="line">  <span class="keyword">return</span> validator;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> isValidUser = <span class="title function_">createUserValidator</span>([</span><br><span class="line">  <span class="function">(<span class="params">user</span>) =&gt;</span> user.<span class="property">name</span>.<span class="property">length</span> &gt; <span class="number">0</span>,</span><br><span class="line">  <span class="function">(<span class="params">user</span>) =&gt;</span> user.<span class="property">email</span>.<span class="title function_">includes</span>(<span class="string">&#x27;@&#x27;</span>),</span><br><span class="line">  <span class="function">(<span class="params">user</span>) =&gt;</span> user.<span class="property">age</span> &gt;= <span class="number">18</span></span><br><span class="line">], <span class="string">&#x27;User must have name, valid email, and be at least 18&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_">isValidUser</span>(someUser)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(isValidUser.<span class="property">errorMessage</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型约束和条件类型"><a href="#泛型约束和条件类型" class="headerlink" title="泛型约束和条件类型"></a>泛型约束和条件类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高级类型安全设计</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ExtractReturnType</span>&lt;T&gt; = T <span class="title function_">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; infer R ? R : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AsyncFunction</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], R&gt; = <span class="function">(<span class="params">...<span class="attr">args</span>: T</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;R&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建类型安全的异步函数包装器</span></span><br><span class="line"><span class="keyword">function</span> createAsyncWrapper&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], R&gt;(</span><br><span class="line">  <span class="attr">syncFn</span>: <span class="function">(<span class="params">...<span class="attr">args</span>: T</span>) =&gt;</span> R</span><br><span class="line">): <span class="title class_">AsyncFunction</span>&lt;T, R&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">async</span> (...<span class="attr">args</span>: T): <span class="title class_">Promise</span>&lt;R&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">syncFn</span>(...args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 - 完全类型安全</span></span><br><span class="line"><span class="keyword">const</span> syncAdd = (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> a + b;</span><br><span class="line"><span class="keyword">const</span> asyncAdd = <span class="title function_">createAsyncWrapper</span>(syncAdd);</span><br><span class="line"></span><br><span class="line"><span class="comment">// TypeScript 会推断出正确的类型</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">asyncAdd</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// result 类型为 number</span></span><br></pre></td></tr></table></figure><h3 id="6-3-错误处理最佳实践"><a href="#6-3-错误处理最佳实践" class="headerlink" title="6.3 错误处理最佳实践"></a>6.3 错误处理最佳实践</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结果类型模式（类似 Rust 的 Result）</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span>&lt;T, E = <span class="title class_">Error</span>&gt; = </span><br><span class="line">  | &#123; <span class="attr">success</span>: <span class="literal">true</span>; <span class="attr">data</span>: T &#125;</span><br><span class="line">  | &#123; <span class="attr">success</span>: <span class="literal">false</span>; <span class="attr">error</span>: E &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全的异步函数包装器</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> safeAsync&lt;T&gt;(</span><br><span class="line">  <span class="attr">promise</span>: <span class="title class_">Promise</span>&lt;T&gt;</span><br><span class="line">): <span class="title class_">Promise</span>&lt;<span class="title class_">Result</span>&lt;T&gt;&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> promise;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">success</span>: <span class="literal">true</span>, data &#125;;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; </span><br><span class="line">      <span class="attr">success</span>: <span class="literal">false</span>, </span><br><span class="line">      <span class="attr">error</span>: error <span class="keyword">instanceof</span> <span class="title class_">Error</span> ? error : <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="title class_">String</span>(error))</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleUserCreation</span>(<span class="params"><span class="attr">userData</span>: <span class="title class_">UserInput</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">safeAsync</span>(<span class="title function_">createUser</span>(userData));</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (result.<span class="property">success</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User created:&#x27;</span>, result.<span class="property">data</span>);</span><br><span class="line">    <span class="keyword">return</span> result.<span class="property">data</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to create user:&#x27;</span>, result.<span class="property">error</span>.<span class="property">message</span>);</span><br><span class="line">    <span class="keyword">throw</span> result.<span class="property">error</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过本文的深入对比和解析，我们系统性地了解了 JavaScript&#x2F;TypeScript 函数语法与 Java 的差异和联系：</p><h3 id="核心概念映射"><a href="#核心概念映射" class="headerlink" title="核心概念映射"></a>核心概念映射</h3><table><thead><tr><th>JavaScript&#x2F;TypeScript</th><th>Java 对应概念</th><th>主要差异</th></tr></thead><tbody><tr><td>函数声明</td><td>静态方法</td><td>JS 函数独立存在，不需要类</td></tr><tr><td>箭头函数</td><td>Lambda 表达式</td><td>JS 箭头函数有 this 绑定特性</td></tr><tr><td>函数类型</td><td>函数式接口</td><td>TS 类型系统更灵活</td></tr><tr><td>async&#x2F;await</td><td>CompletableFuture</td><td>JS 原生支持，语法更简洁</td></tr><tr><td>函数重载</td><td>方法重载</td><td>TS 是声明式重载</td></tr></tbody></table><h3 id="学习要点总结"><a href="#学习要点总结" class="headerlink" title="学习要点总结"></a>学习要点总结</h3><ol><li><strong>函数是一等公民</strong>：JavaScript 中函数可以像变量一样被传递和操作</li><li><strong>类型注解位置</strong>：TypeScript 在参数后用 <code>:</code> 标注类型</li><li><strong>箭头函数的 this 绑定</strong>：这是 Java 开发者需要特别注意的概念</li><li><strong>异步编程模式</strong>：<code>async/await</code> 比 Java 的 <code>CompletableFuture</code> 更直观</li><li><strong>类型安全</strong>：TypeScript 提供了比 Java 更灵活的类型系统</li></ol><h3 id="实践建议"><a href="#实践建议" class="headerlink" title="实践建议"></a>实践建议</h3><ul><li><strong>从简单开始</strong>：先掌握基本的函数声明和箭头函数</li><li><strong>理解 this 绑定</strong>：这是与 Java 最大的差异点</li><li><strong>善用类型注解</strong>：充分利用 TypeScript 的类型检查能力</li><li><strong>拥抱异步编程</strong>：掌握 Promise 和 async&#x2F;await 模式</li><li><strong>学习函数式编程</strong>：JavaScript 对函数式编程有很好的支持</li></ul><p>掌握了这些概念，你就能够自信地阅读和编写现代 JavaScript&#x2F;TypeScript 代码，从 Java 开发者成功转型到前端开发者！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;作为一名 Java 开发者，当你第一次看到这样的 TypeScript 代码时，可能会感到困惑：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;createRouter&lt;/span&gt;: &lt;span class=&quot;title class_&quot;&gt;CreateRouterFn&lt;/span&gt; = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;options&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Router&lt;/span&gt;(options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;CreateRouterFn&lt;/code&gt; 是什么？&lt;code&gt;=&amp;gt;&lt;/code&gt; 又是什么语法？这与 Java 的方法声明有何不同？本文将从 Java 开发者熟悉的概念出发，系统性地解析 JavaScript&amp;#x2F;TypeScript 函数的各种语法形式，帮你快速掌握现代前端开发的核心语法。&lt;/p&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://blog.baduncle.top/categories/Programming/"/>
    
    
    <category term="typescript" scheme="https://blog.baduncle.top/tags/typescript/"/>
    
    <category term="arrow-functions" scheme="https://blog.baduncle.top/tags/arrow-functions/"/>
    
    <category term="javascript" scheme="https://blog.baduncle.top/tags/javascript/"/>
    
    <category term="java-to-javascript" scheme="https://blog.baduncle.top/tags/java-to-javascript/"/>
    
    <category term="type-annotations" scheme="https://blog.baduncle.top/tags/type-annotations/"/>
    
    <category term="this-binding" scheme="https://blog.baduncle.top/tags/this-binding/"/>
    
    <category term="optional-parameters" scheme="https://blog.baduncle.top/tags/optional-parameters/"/>
    
    <category term="function-types" scheme="https://blog.baduncle.top/tags/function-types/"/>
    
    <category term="async-await" scheme="https://blog.baduncle.top/tags/async-await/"/>
    
    <category term="generics" scheme="https://blog.baduncle.top/tags/generics/"/>
    
  </entry>
  
  <entry>
    <title>TanStack Router scrollRestoration 深度解析：从源码到实现原理</title>
    <link href="https://blog.baduncle.top/2025/08/06/tanstack-router-scroll-restoration-analysis/"/>
    <id>https://blog.baduncle.top/2025/08/06/tanstack-router-scroll-restoration-analysis/</id>
    <published>2025-08-06T11:48:00.000Z</published>
    <updated>2025-08-06T16:41:17.725Z</updated>
    
    <content type="html"><![CDATA[<p>在现代单页应用（SPA）开发中，用户体验的优化往往体现在细节处理上。其中，滚动位置的恢复功能是一个看似简单但技术含量很高的特性。本文将深入分析 TanStack Router 中 <code>scrollRestoration</code> 功能的实现原理，从基本概念到源码解析，全面解读这一重要特性。</p><span id="more"></span><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-scrollRestoration%EF%BC%9F">什么是 scrollRestoration？</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E4%B8%BE%E4%BE%8B">使用场景举例</a><ul><li><a href="#%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99%E5%9C%BA%E6%99%AF">电商网站场景</a></li><li><a href="#%E5%85%B6%E4%BB%96%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">其他应用场景</a></li></ul></li><li><a href="#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8">基本配置和使用</a></li><li><a href="#%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">技术实现原理</a></li><li><a href="#%E6%BA%90%E7%A0%81%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90">源码深度解析</a></li><li><a href="#%E6%BB%9A%E5%8A%A8%E6%81%A2%E5%A4%8D%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B">滚动恢复工作流程</a></li><li><a href="#%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7">高级特性</a></li><li><a href="#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%9C%BA%E5%88%B6">性能优化机制</a></li><li><a href="#%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86">边界情况处理</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul><h2 id="什么是-scrollRestoration？"><a href="#什么是-scrollRestoration？" class="headerlink" title="什么是 scrollRestoration？"></a>什么是 scrollRestoration？</h2><p><code>scrollRestoration</code> 是 TanStack Router 提供的一个配置选项，它控制页面滚动位置的恢复行为。当设置为 <code>true</code> 时，它会：</p><ul><li><strong>自动保存滚动位置</strong>：当用户离开页面时，保存当前的滚动位置</li><li><strong>自动恢复滚动位置</strong>：当用户返回页面时，恢复到之前的滚动位置</li><li><strong>提升用户体验</strong>：避免用户在导航后需要重新滚动到之前浏览的位置</li></ul><h2 id="使用场景举例"><a href="#使用场景举例" class="headerlink" title="使用场景举例"></a>使用场景举例</h2><h3 id="电商网站场景"><a href="#电商网站场景" class="headerlink" title="电商网站场景"></a>电商网站场景</h3><p>假设用户在商品列表页浏览：</p><p><strong>没有 scrollRestoration 的情况</strong>：</p><ol><li>用户滚动到第 50 个商品位置</li><li>点击某个商品进入详情页</li><li>点击浏览器后退按钮返回列表页</li><li>页面回到顶部，用户需要重新滚动找到第 50 个商品 😫</li></ol><p><strong>启用 scrollRestoration 的情况</strong>：</p><ol><li>用户滚动到第 50 个商品位置</li><li>点击某个商品进入详情页</li><li>点击浏览器后退按钮返回列表页</li><li>页面自动滚动到第 50 个商品位置 😊</li></ol><h3 id="其他应用场景"><a href="#其他应用场景" class="headerlink" title="其他应用场景"></a>其他应用场景</h3><ul><li><strong>社交媒体 Feed</strong>：滚动到第 100 条动态，点击评论后返回，还在第 100 条的位置</li><li><strong>文档阅读</strong>：在长文档中间位置，点击链接后返回，还在原来的阅读位置</li><li><strong>搜索结果</strong>：查看第 3 页搜索结果中的某项，返回后还在第 3 页</li></ul><h2 id="基本配置和使用"><a href="#基本配置和使用" class="headerlink" title="基本配置和使用"></a>基本配置和使用</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/router.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;@tanstack/react-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; routeTree &#125; <span class="keyword">from</span> <span class="string">&#x27;./routeTree.gen&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123; </span><br><span class="line">        routeTree,</span><br><span class="line">        <span class="attr">scrollRestoration</span>: <span class="literal">true</span>, <span class="comment">// 启用滚动位置恢复</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> router</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="技术实现原理"><a href="#技术实现原理" class="headerlink" title="技术实现原理"></a>技术实现原理</h2><h3 id="1-浏览器-History-API-基础"><a href="#1-浏览器-History-API-基础" class="headerlink" title="1. 浏览器 History API 基础"></a>1. 浏览器 History API 基础</h3><p>现代浏览器提供了原生的滚动恢复控制：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浏览器原生的 scrollRestoration</span></span><br><span class="line">history.<span class="property">scrollRestoration</span> = <span class="string">&#x27;auto&#x27;</span>    <span class="comment">// 浏览器自动管理</span></span><br><span class="line">history.<span class="property">scrollRestoration</span> = <span class="string">&#x27;manual&#x27;</span>  <span class="comment">// 手动管理</span></span><br></pre></td></tr></table></figure><p>TanStack Router 通过设置 <code>history.scrollRestoration = &#39;manual&#39;</code> 来接管滚动恢复的控制权。</p><h3 id="2-滚动位置的保存机制"><a href="#2-滚动位置的保存机制" class="headerlink" title="2. 滚动位置的保存机制"></a>2. 滚动位置的保存机制</h3><p>当路由变化时，TanStack Router 会保存当前滚动位置：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滚动位置保存的概念实现</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">saveScrollPosition</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> scrollData = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="variable language_">window</span>.<span class="property">scrollX</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="variable language_">window</span>.<span class="property">scrollY</span>,</span><br><span class="line">    <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 保存到 sessionStorage</span></span><br><span class="line">  <span class="keyword">const</span> restoreKey = <span class="title function_">getKey</span>(router.<span class="property">state</span>.<span class="property">location</span>)</span><br><span class="line">  scrollRestorationCache.<span class="title function_">set</span>(restoreKey, &#123;</span><br><span class="line">    <span class="string">&#x27;window&#x27;</span>: scrollData</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-滚动位置的恢复机制"><a href="#3-滚动位置的恢复机制" class="headerlink" title="3. 滚动位置的恢复机制"></a>3. 滚动位置的恢复机制</h3><p>当返回到页面时，恢复滚动位置：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滚动位置恢复的概念实现</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">restoreScrollPosition</span> = (<span class="params">routeState</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (routeState.<span class="property">scrollPosition</span>) &#123;</span><br><span class="line">    <span class="comment">// 等待页面渲染完成</span></span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(&#123;</span><br><span class="line">        <span class="attr">top</span>: routeState.<span class="property">scrollPosition</span>.<span class="property">y</span>,</span><br><span class="line">        <span class="attr">left</span>: routeState.<span class="property">scrollPosition</span>.<span class="property">x</span>,</span><br><span class="line">        <span class="attr">behavior</span>: <span class="string">&#x27;auto&#x27;</span> <span class="comment">// 或 &#x27;smooth&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-关键时机控制"><a href="#4-关键时机控制" class="headerlink" title="4. 关键时机控制"></a>4. 关键时机控制</h3><p><strong>保存时机</strong>：</p><ul><li>用户点击链接离开页面前</li><li>浏览器前进&#x2F;后退导航前</li><li>路由变化触发前</li></ul><p><strong>恢复时机</strong>：</p><ul><li>页面组件挂载完成后</li><li>DOM 渲染完成后</li><li>使用 <code>requestAnimationFrame</code> 确保布局完成</li></ul><h2 id="源码深度解析"><a href="#源码深度解析" class="headerlink" title="源码深度解析"></a>源码深度解析</h2><p>基于 TanStack Router 官方源码的深入分析，以下是 <code>scrollRestoration</code> 功能的具体实现：</p><h3 id="1-createRouter-函数入口"><a href="#1-createRouter-函数入口" class="headerlink" title="1. createRouter 函数入口"></a>1. createRouter 函数入口</h3><p><strong>文件位置</strong>：<code>packages/react-router/src/router.ts:80</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">createRouter</span>: <span class="title class_">CreateRouterFn</span> = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Router</span>(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-scrollRestoration-选项定义"><a href="#2-scrollRestoration-选项定义" class="headerlink" title="2. scrollRestoration 选项定义"></a>2. scrollRestoration 选项定义</h3><p><strong>文件位置</strong>：<code>packages/router-core/src/router.ts:390-414</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">RouterOptions</span>&lt;...&gt; &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * If `true`, scroll restoration will be enabled</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@default</span> <span class="variable">false</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">scrollRestoration</span>?: <span class="built_in">boolean</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * A function that will be called to get the key for the scroll restoration cache.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@default</span> (location) =&gt; location.href</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">getScrollRestorationKey</span>?: <span class="function">(<span class="params"><span class="attr">location</span>: <span class="title class_">ParsedLocation</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The default behavior for scroll restoration.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@default</span> &#x27;auto&#x27;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">scrollRestorationBehavior</span>?: <span class="title class_">ScrollBehavior</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * An array of selectors that will be used to scroll to the top of the page in addition to `window`</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@default</span> [&#x27;window&#x27;]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">scrollToTopSelectors</span>?: <span class="title class_">Array</span>&lt;<span class="built_in">string</span> | (<span class="function">() =&gt;</span> <span class="title class_">Element</span> | <span class="literal">null</span> | <span class="literal">undefined</span>)&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Router-初始化中的滚动恢复设置"><a href="#3-Router-初始化中的滚动恢复设置" class="headerlink" title="3. Router 初始化中的滚动恢复设置"></a>3. Router 初始化中的滚动恢复设置</h3><p><strong>文件位置</strong>：<code>packages/router-core/src/router.ts:924</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 Router 的 update 方法中</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">__store</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">__store</span> = <span class="keyword">new</span> <span class="title class_">Store</span>(<span class="title function_">getInitialRouterState</span>(<span class="variable language_">this</span>.<span class="property">latestLocation</span>), &#123;</span><br><span class="line">    <span class="attr">onUpdate</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setupScrollRestoration</span>(<span class="variable language_">this</span>) <span class="comment">// 关键：在这里初始化滚动恢复</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-setupScrollRestoration-核心实现"><a href="#4-setupScrollRestoration-核心实现" class="headerlink" title="4. setupScrollRestoration 核心实现"></a>4. setupScrollRestoration 核心实现</h3><p><strong>文件位置</strong>：<code>packages/router-core/src/scroll-restoration.ts:209-353</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setupScrollRestoration</span>(<span class="params"><span class="attr">router</span>: <span class="title class_">AnyRouter</span>, <span class="attr">force</span>?: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (scrollRestorationCache === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> shouldScrollRestoration = force ?? router.<span class="property">options</span>.<span class="property">scrollRestoration</span> ?? <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (shouldScrollRestoration) &#123;</span><br><span class="line">    router.<span class="property">isScrollRestoring</span> = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">document</span> === <span class="string">&#x27;undefined&#x27;</span> || router.<span class="property">isScrollRestorationSetup</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  router.<span class="property">isScrollRestorationSetup</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getKey = router.<span class="property">options</span>.<span class="property">getScrollRestorationKey</span> || defaultGetScrollRestorationKey</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关键：设置浏览器的滚动恢复为手动模式</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">scrollRestoration</span> = <span class="string">&#x27;manual&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听滚动事件并缓存滚动位置</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onScroll</span> = (<span class="params"><span class="attr">event</span>: <span class="title class_">Event</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (ignoreScroll || !router.<span class="property">isScrollRestoring</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> elementSelector = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">target</span> === <span class="variable language_">document</span> || event.<span class="property">target</span> === <span class="variable language_">window</span>) &#123;</span><br><span class="line">      elementSelector = <span class="string">&#x27;window&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> attrId = (event.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">Element</span>).<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-scroll-restoration-id&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (attrId) &#123;</span><br><span class="line">        elementSelector = <span class="string">`[data-scroll-restoration-id=&quot;<span class="subst">$&#123;attrId&#125;</span>&quot;]`</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        elementSelector = <span class="title function_">getCssSelector</span>(event.<span class="property">target</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> restoreKey = <span class="title function_">getKey</span>(router.<span class="property">state</span>.<span class="property">location</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存滚动位置到 sessionStorage</span></span><br><span class="line">    scrollRestorationCache.<span class="title function_">set</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> keyEntry = (state[restoreKey] = state[restoreKey] || &#123;&#125;)</span><br><span class="line">      <span class="keyword">const</span> elementEntry = (keyEntry[elementSelector] = keyEntry[elementSelector] || &#123;&#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (elementSelector === <span class="string">&#x27;window&#x27;</span>) &#123;</span><br><span class="line">        elementEntry.<span class="property">scrollX</span> = <span class="variable language_">window</span>.<span class="property">scrollX</span> || <span class="number">0</span></span><br><span class="line">        elementEntry.<span class="property">scrollY</span> = <span class="variable language_">window</span>.<span class="property">scrollY</span> || <span class="number">0</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elementSelector) &#123;</span><br><span class="line">        <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(elementSelector)</span><br><span class="line">        <span class="keyword">if</span> (element) &#123;</span><br><span class="line">          elementEntry.<span class="property">scrollX</span> = element.<span class="property">scrollLeft</span> || <span class="number">0</span></span><br><span class="line">          elementEntry.<span class="property">scrollY</span> = element.<span class="property">scrollTop</span> || <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节流处理滚动事件，每 100ms 最多触发一次</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">document</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="title function_">throttle</span>(onScroll, <span class="number">100</span>), <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听路由渲染完成事件，恢复滚动位置</span></span><br><span class="line">  router.<span class="title function_">subscribe</span>(<span class="string">&#x27;onRendered&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> cacheKey = <span class="title function_">getKey</span>(event.<span class="property">toLocation</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!router.<span class="property">resetNextScroll</span>) &#123;</span><br><span class="line">      router.<span class="property">resetNextScroll</span> = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">restoreScroll</span>(&#123;</span><br><span class="line">      storageKey,</span><br><span class="line">      <span class="attr">key</span>: cacheKey,</span><br><span class="line">      <span class="attr">behavior</span>: router.<span class="property">options</span>.<span class="property">scrollRestorationBehavior</span>,</span><br><span class="line">      <span class="attr">shouldScrollRestoration</span>: router.<span class="property">isScrollRestoring</span>,</span><br><span class="line">      <span class="attr">scrollToTopSelectors</span>: router.<span class="property">options</span>.<span class="property">scrollToTopSelectors</span>,</span><br><span class="line">      <span class="attr">location</span>: router.<span class="property">history</span>.<span class="property">location</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-restoreScroll-滚动恢复实现"><a href="#5-restoreScroll-滚动恢复实现" class="headerlink" title="5. restoreScroll 滚动恢复实现"></a>5. restoreScroll 滚动恢复实现</h3><p><strong>文件位置</strong>：<code>packages/router-core/src/scroll-restoration.ts:104-207</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">restoreScroll</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  storageKey,</span></span><br><span class="line"><span class="params">  key,</span></span><br><span class="line"><span class="params">  behavior,</span></span><br><span class="line"><span class="params">  shouldScrollRestoration,</span></span><br><span class="line"><span class="params">  scrollToTopSelectors,</span></span><br><span class="line"><span class="params">  location,</span></span><br><span class="line"><span class="params">&#125;: &#123;</span></span><br><span class="line"><span class="params">  storageKey: <span class="built_in">string</span></span></span><br><span class="line"><span class="params">  key?: <span class="built_in">string</span></span></span><br><span class="line"><span class="params">  behavior?: ScrollToOptions[<span class="string">&#x27;behavior&#x27;</span>]</span></span><br><span class="line"><span class="params">  shouldScrollRestoration?: <span class="built_in">boolean</span></span></span><br><span class="line"><span class="params">  scrollToTopSelectors?: <span class="built_in">Array</span>&lt;<span class="built_in">string</span> | (() =&gt; Element | <span class="literal">null</span> | <span class="literal">undefined</span>)&gt;</span></span><br><span class="line"><span class="params">  location?: HistoryLocation</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">byKey</span>: <span class="title class_">ScrollRestorationByKey</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    byKey = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(storageKey) || <span class="string">&#x27;&#123;&#125;&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (<span class="attr">error</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> resolvedKey = key || <span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">state</span>?.<span class="property">key</span></span><br><span class="line">  <span class="keyword">const</span> elementEntries = byKey[resolvedKey]</span><br><span class="line"></span><br><span class="line">  ignoreScroll = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 优先恢复缓存的滚动位置</span></span><br><span class="line">  <span class="keyword">if</span> (shouldScrollRestoration &amp;&amp; elementEntries &amp;&amp; <span class="title class_">Object</span>.<span class="title function_">keys</span>(elementEntries).<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> elementSelector <span class="keyword">in</span> elementEntries) &#123;</span><br><span class="line">      <span class="keyword">const</span> entry = elementEntries[elementSelector]!</span><br><span class="line">      <span class="keyword">if</span> (elementSelector === <span class="string">&#x27;window&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(&#123;</span><br><span class="line">          <span class="attr">top</span>: entry.<span class="property">scrollY</span>,</span><br><span class="line">          <span class="attr">left</span>: entry.<span class="property">scrollX</span>,</span><br><span class="line">          behavior,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elementSelector) &#123;</span><br><span class="line">        <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(elementSelector)</span><br><span class="line">        <span class="keyword">if</span> (element) &#123;</span><br><span class="line">          element.<span class="property">scrollLeft</span> = entry.<span class="property">scrollX</span></span><br><span class="line">          element.<span class="property">scrollTop</span> = entry.<span class="property">scrollY</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 hash 滚动</span></span><br><span class="line">  <span class="keyword">const</span> hash = (location ?? <span class="variable language_">window</span>.<span class="property">location</span>).<span class="property">hash</span>.<span class="title function_">split</span>(<span class="string">&#x27;#&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hash) &#123;</span><br><span class="line">    <span class="keyword">const</span> hashScrollIntoViewOptions = (<span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">state</span> || &#123;&#125;).<span class="property">__hashScrollIntoViewOptions</span> ?? <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hashScrollIntoViewOptions) &#123;</span><br><span class="line">      <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(hash)</span><br><span class="line">      <span class="keyword">if</span> (el) &#123;</span><br><span class="line">        el.<span class="title function_">scrollIntoView</span>(hashScrollIntoViewOptions)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 默认滚动到页面顶部</span></span><br><span class="line">  [<span class="string">&#x27;window&#x27;</span>, ...(scrollToTopSelectors?.<span class="title function_">filter</span>(<span class="function">(<span class="params">d</span>) =&gt;</span> d !== <span class="string">&#x27;window&#x27;</span>) ?? [])].<span class="title function_">forEach</span>(<span class="function">(<span class="params">selector</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> element = selector === <span class="string">&#x27;window&#x27;</span> ? <span class="variable language_">window</span> : <span class="keyword">typeof</span> selector === <span class="string">&#x27;function&#x27;</span> ? <span class="title function_">selector</span>() : <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(selector)</span><br><span class="line">    <span class="keyword">if</span> (element) &#123;</span><br><span class="line">      element.<span class="title function_">scrollTo</span>(&#123;</span><br><span class="line">        <span class="attr">top</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">left</span>: <span class="number">0</span>,</span><br><span class="line">        behavior,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  ignoreScroll = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-缓存系统实现"><a href="#6-缓存系统实现" class="headerlink" title="6. 缓存系统实现"></a>6. 缓存系统实现</h3><p><strong>文件位置</strong>：<code>packages/router-core/src/scroll-restoration.ts:36-73</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储键定义</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> storageKey = <span class="string">&#x27;tsr-scroll-restoration-v1_3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 节流函数实现</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">throttle</span> = (<span class="params"><span class="attr">fn</span>: (...args: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt;) =&gt; <span class="built_in">void</span>, <span class="attr">wait</span>: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">timeout</span>: <span class="built_in">any</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...<span class="attr">args</span>: <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">fn</span>(...args)</span><br><span class="line">        timeout = <span class="literal">null</span></span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建滚动恢复缓存</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createScrollRestorationCache</span>(<span class="params"></span>): <span class="title class_">ScrollRestorationCache</span> | <span class="literal">undefined</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> safeSessionStorage = <span class="title function_">getSafeSessionStorage</span>()</span><br><span class="line">  <span class="keyword">if</span> (!safeSessionStorage) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> persistedState = safeSessionStorage.<span class="title function_">getItem</span>(storageKey)</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">state</span>: <span class="title class_">ScrollRestorationByKey</span> = persistedState ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(persistedState) : &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    state,</span><br><span class="line">    <span class="attr">set</span>: <span class="function">(<span class="params">updater</span>) =&gt;</span> (</span><br><span class="line">      (state = <span class="title function_">functionalUpdate</span>(updater, state) || state),</span><br><span class="line">      safeSessionStorage.<span class="title function_">setItem</span>(storageKey, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state))</span><br><span class="line">    ),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> scrollRestorationCache = <span class="title function_">createScrollRestorationCache</span>()</span><br></pre></td></tr></table></figure><h3 id="6-数据存储结构"><a href="#6-数据存储结构" class="headerlink" title="6. 数据存储结构"></a>6. 数据存储结构</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sessionStorage 中的数据结构</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;tsr-scroll-restoration-v1_3&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;/products&quot;</span>: &#123;          <span class="comment">// 路由路径作为 key</span></span><br><span class="line">      <span class="string">&quot;window&quot;</span>: &#123;           <span class="comment">// 元素选择器</span></span><br><span class="line">        <span class="string">&quot;scrollX&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;scrollY&quot;</span>: <span class="number">1250</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;/products/123&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;window&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;scrollX&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;scrollY&quot;</span>: <span class="number">800</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="滚动恢复工作流程"><a href="#滚动恢复工作流程" class="headerlink" title="滚动恢复工作流程"></a>滚动恢复工作流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant User as 用户</span><br><span class="line">    participant Router as TanStack Router</span><br><span class="line">    participant Browser as 浏览器</span><br><span class="line">    participant Storage as SessionStorage</span><br><span class="line"></span><br><span class="line">    Note over Router: 初始化阶段</span><br><span class="line">    Router-&gt;&gt;Browser: history.scrollRestoration = &#x27;manual&#x27;</span><br><span class="line">    Router-&gt;&gt;Browser: addEventListener(&#x27;scroll&#x27;, onScroll)</span><br><span class="line">    Router-&gt;&gt;Router: setupScrollRestoration()</span><br><span class="line"></span><br><span class="line">    Note over User: 用户浏览和导航</span><br><span class="line">    User-&gt;&gt;Browser: 滚动页面</span><br><span class="line">    Browser-&gt;&gt;Router: scroll event</span><br><span class="line">    Router-&gt;&gt;Storage: 保存滚动位置 &#123; x, y &#125;</span><br><span class="line">    </span><br><span class="line">    User-&gt;&gt;Router: 点击链接导航</span><br><span class="line">    Router-&gt;&gt;Storage: 保存当前页面滚动位置</span><br><span class="line">    Router-&gt;&gt;Browser: 导航到新页面</span><br><span class="line">    </span><br><span class="line">    Note over User: 用户返回操作</span><br><span class="line">    User-&gt;&gt;Browser: 点击后退按钮</span><br><span class="line">    Browser-&gt;&gt;Router: 路由变化事件</span><br><span class="line">    Router-&gt;&gt;Storage: 读取保存的滚动位置</span><br><span class="line">    Router-&gt;&gt;Router: 等待页面渲染完成</span><br><span class="line">    Router-&gt;&gt;Browser: window.scrollTo(x, y)</span><br><span class="line">    Browser-&gt;&gt;User: 页面滚动到之前位置</span><br></pre></td></tr></table></figure><h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><h3 id="1-多元素滚动支持"><a href="#1-多元素滚动支持" class="headerlink" title="1. 多元素滚动支持"></a>1. 多元素滚动支持</h3><p>TanStack Router 不仅支持 window 级别的滚动，还支持页面内滚动容器：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 支持多个滚动元素</span></span><br><span class="line"><span class="keyword">const</span> elementSelector = event.<span class="property">target</span> === <span class="variable language_">window</span> </span><br><span class="line">  ? <span class="string">&#x27;window&#x27;</span> </span><br><span class="line">  : <span class="title function_">getCssSelector</span>(event.<span class="property">target</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为特定元素设置滚动恢复 ID</span></span><br><span class="line">&lt;div data-scroll-restoration-id=<span class="string">&quot;product-list&quot;</span> className=<span class="string">&quot;overflow-auto&quot;</span>&gt;</span><br><span class="line">  &#123;<span class="comment">/* 滚动内容 */</span>&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="2-自定义滚动恢复键"><a href="#2-自定义滚动恢复键" class="headerlink" title="2. 自定义滚动恢复键"></a>2. 自定义滚动恢复键</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  routeTree,</span><br><span class="line">  <span class="attr">scrollRestoration</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">getScrollRestorationKey</span>: <span class="function">(<span class="params">location</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义缓存键生成策略</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;location.pathname&#125;</span><span class="subst">$&#123;location.search&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-滚动行为配置"><a href="#3-滚动行为配置" class="headerlink" title="3. 滚动行为配置"></a>3. 滚动行为配置</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  routeTree,</span><br><span class="line">  <span class="attr">scrollRestoration</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">scrollRestorationBehavior</span>: <span class="string">&#x27;smooth&#x27;</span>, <span class="comment">// &#x27;auto&#x27; | &#x27;smooth&#x27;</span></span><br><span class="line">  <span class="attr">scrollToTopSelectors</span>: [<span class="string">&#x27;window&#x27;</span>, <span class="string">&#x27;.main-content&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="性能优化机制"><a href="#性能优化机制" class="headerlink" title="性能优化机制"></a>性能优化机制</h2><h3 id="1-事件防抖"><a href="#1-事件防抖" class="headerlink" title="1. 事件防抖"></a>1. 事件防抖</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用节流函数，每 100ms 最多触发一次保存</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="title function_">throttle</span>(onScroll, <span class="number">100</span>), <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="2-智能忽略机制"><a href="#2-智能忽略机制" class="headerlink" title="2. 智能忽略机制"></a>2. 智能忽略机制</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ignoreScroll = <span class="literal">false</span> <span class="comment">// 防止恢复滚动时触发保存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">restoreScroll</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  ignoreScroll = <span class="literal">true</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(x, y)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ignoreScroll = <span class="literal">false</span></span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-渲染完成检测"><a href="#3-渲染完成检测" class="headerlink" title="3. 渲染完成检测"></a>3. 渲染完成检测</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 requestAnimationFrame 确保 DOM 渲染完成</span></span><br><span class="line"><span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(&#123;</span><br><span class="line">    <span class="attr">top</span>: savedPosition.<span class="property">y</span>,</span><br><span class="line">    <span class="attr">left</span>: savedPosition.<span class="property">x</span>,</span><br><span class="line">    <span class="attr">behavior</span>: <span class="string">&#x27;auto&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="边界情况处理"><a href="#边界情况处理" class="headerlink" title="边界情况处理"></a>边界情况处理</h2><h3 id="1-页面高度变化"><a href="#1-页面高度变化" class="headerlink" title="1. 页面高度变化"></a>1. 页面高度变化</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理动态内容加载导致的页面高度变化</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">restoreWithRetry</span> = (<span class="params">targetY</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> attempts = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> maxAttempts = <span class="number">10</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">tryRestore</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> currentHeight = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (currentHeight &gt;= targetY || attempts &gt;= maxAttempts) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="title class_">Math</span>.<span class="title function_">min</span>(targetY, currentHeight))</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    attempts++</span><br><span class="line">    <span class="built_in">setTimeout</span>(tryRestore, <span class="number">100</span>) <span class="comment">// 延迟重试</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">tryRestore</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Hash-链接处理"><a href="#2-Hash-链接处理" class="headerlink" title="2. Hash 链接处理"></a>2. Hash 链接处理</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优先处理 hash 滚动</span></span><br><span class="line"><span class="keyword">const</span> hash = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>.<span class="title function_">split</span>(<span class="string">&#x27;#&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> (hash) &#123;</span><br><span class="line">  <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(hash)</span><br><span class="line">  <span class="keyword">if</span> (element) &#123;</span><br><span class="line">    element.<span class="title function_">scrollIntoView</span>()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-错误处理"><a href="#3-错误处理" class="headerlink" title="3. 错误处理"></a>3. 错误处理</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cachedData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(storageKey) || <span class="string">&#x27;&#123;&#125;&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to parse scroll restoration data:&#x27;</span>, error)</span><br><span class="line">  <span class="comment">// 降级到默认行为</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>TanStack Router 的 <code>scrollRestoration</code> 功能通过以下关键技术实现了精确的滚动位置恢复：</p><ol><li><strong>浏览器 API 接管</strong>：通过 <code>history.scrollRestoration = &#39;manual&#39;</code> 接管浏览器原生行为</li><li><strong>事件监听机制</strong>：监听 scroll 事件，实时保存滚动位置</li><li><strong>SessionStorage 持久化</strong>：使用 sessionStorage 跨页面保存滚动数据</li><li><strong>智能恢复策略</strong>：结合 requestAnimationFrame 和重试机制确保准确恢复</li><li><strong>性能优化</strong>：通过防抖、忽略机制等优化性能</li><li><strong>多元素支持</strong>：不仅支持 window 滚动，还支持页面内滚动容器</li></ol><p>这个功能看似简单，但其实现涉及了深度的浏览器 API 理解、事件处理优化、数据持久化策略等多个技术层面。通过源码分析，我们可以看到 TanStack Router 团队在用户体验优化上的细致考虑和技术深度。</p><p>对于现代 SPA 应用来说，启用 <code>scrollRestoration: true</code> 是一个简单而有效的用户体验提升方案。它不仅技术实现精巧，更重要的是真正解决了用户在应用中导航时的痛点问题。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在现代单页应用（SPA）开发中，用户体验的优化往往体现在细节处理上。其中，滚动位置的恢复功能是一个看似简单但技术含量很高的特性。本文将深入分析 TanStack Router 中 &lt;code&gt;scrollRestoration&lt;/code&gt; 功能的实现原理，从基本概念到源码解析，全面解读这一重要特性。&lt;/p&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://blog.baduncle.top/categories/Programming/"/>
    
    
    <category term="tanstack-router" scheme="https://blog.baduncle.top/tags/tanstack-router/"/>
    
    <category term="react" scheme="https://blog.baduncle.top/tags/react/"/>
    
    <category term="typescript" scheme="https://blog.baduncle.top/tags/typescript/"/>
    
    <category term="spa" scheme="https://blog.baduncle.top/tags/spa/"/>
    
    <category term="scroll-restoration" scheme="https://blog.baduncle.top/tags/scroll-restoration/"/>
    
    <category term="source-code-analysis" scheme="https://blog.baduncle.top/tags/source-code-analysis/"/>
    
    <category term="session-storage" scheme="https://blog.baduncle.top/tags/session-storage/"/>
    
    <category term="browser-api" scheme="https://blog.baduncle.top/tags/browser-api/"/>
    
    <category term="history-api" scheme="https://blog.baduncle.top/tags/history-api/"/>
    
    <category term="performance-optimization" scheme="https://blog.baduncle.top/tags/performance-optimization/"/>
    
    <category term="user-experience" scheme="https://blog.baduncle.top/tags/user-experience/"/>
    
    <category term="event-throttling" scheme="https://blog.baduncle.top/tags/event-throttling/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 TypeScript 的 typeof 和 ReturnType：从 Java 开发者视角</title>
    <link href="https://blog.baduncle.top/2025/08/06/typescript-typeof-returntype-explained/"/>
    <id>https://blog.baduncle.top/2025/08/06/typescript-typeof-returntype-explained/</id>
    <published>2025-08-06T06:30:00.000Z</published>
    <updated>2025-08-06T16:42:33.423Z</updated>
    
    <content type="html"><![CDATA[<p>对于来自 Java 背景的开发者来说，TypeScript 类型系统的一些细微差别往往令人困惑，特别是 <code>typeof</code> 和 <code>ReturnType</code> 的理解。本文将通过清晰的对比和实际例子来详细解析这些概念。</p><span id="more"></span><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E6%A0%B8%E5%BF%83%E5%B7%AE%E5%BC%82%EF%BC%9ARuntime-vs-Compile-time">核心差异：Runtime vs Compile-time</a><ul><li><a href="#Java-%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%8F%8D%E5%B0%84%EF%BC%88Runtime%EF%BC%89">Java 的类型反射（Runtime）</a></li><li><a href="#TypeScript-%E7%9A%84%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F%EF%BC%88Compile-time%EF%BC%89">TypeScript 的类型系统（Compile-time）</a></li></ul></li><li><a href="#%E7%90%86%E8%A7%A3-TypeScript-%E4%B8%AD%E7%9A%84-typeof">理解 TypeScript 中的 <code>typeof</code></a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">基本使用示例</a></li><li><a href="#%E9%AB%98%E7%BA%A7-typeof-%E7%94%A8%E6%B3%95">高级 typeof 用法</a></li></ul></li><li><a href="#%E7%90%86%E8%A7%A3-ReturnType">理解 <code>ReturnType&lt;T&gt;</code></a><ul><li><a href="#ReturnType-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">ReturnType 基本用法</a></li><li><a href="#%E5%AF%B9%E6%AF%94%EF%BC%9AFunction-Type-vs-Return-Type">对比：Function Type vs Return Type</a></li></ul></li><li><a href="#%E5%AE%9E%E9%99%85%E6%A1%88%E4%BE%8B%EF%BC%9ATanStack-Router">实际案例：TanStack Router</a></li><li><a href="#Java-vs-TypeScript%EF%BC%9A%E5%85%B3%E9%94%AE%E5%B7%AE%E5%BC%82">Java vs TypeScript：关键差异</a><ul><li><a href="#Java-%E7%AD%89%E4%BB%B7%E6%A8%A1%E5%BC%8F">Java 等价模式</a></li></ul></li><li><a href="#%E9%AB%98%E7%BA%A7%E6%A8%A1%E5%BC%8F%EF%BC%9A%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8%E7%9A%84-API-%E5%B7%A5%E5%8E%82">高级模式：类型安全的 API 工厂</a></li><li><a href="#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">最佳实践</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul><h2 id="核心差异：Runtime-vs-Compile-time"><a href="#核心差异：Runtime-vs-Compile-time" class="headerlink" title="核心差异：Runtime vs Compile-time"></a>核心差异：Runtime vs Compile-time</h2><h3 id="Java-的类型反射（Runtime）"><a href="#Java-的类型反射（Runtime）" class="headerlink" title="Java 的类型反射（Runtime）"></a>Java 的类型反射（Runtime）</h3><p>在 Java 中，类型信息在运行时通过反射可用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java - Runtime type checking</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Class&lt;?&gt; clazz = list.getClass();</span><br><span class="line"><span class="type">String</span> <span class="variable">typeName</span> <span class="operator">=</span> clazz.getSimpleName(); <span class="comment">// &quot;ArrayList&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Get type information dynamically</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> getUserData();</span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> User) &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TypeScript-的类型系统（Compile-time）"><a href="#TypeScript-的类型系统（Compile-time）" class="headerlink" title="TypeScript 的类型系统（Compile-time）"></a>TypeScript 的类型系统（Compile-time）</h3><p>TypeScript 的 <code>typeof</code> 在编译时进行静态类型检查：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript - Compile-time type inference</span></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserType</span> = <span class="keyword">typeof</span> user; <span class="comment">// &#123; name: string; age: number &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// No runtime overhead - purely for type safety</span></span><br></pre></td></tr></table></figure><h2 id="理解-TypeScript-中的-typeof"><a href="#理解-TypeScript-中的-typeof" class="headerlink" title="理解 TypeScript 中的 typeof"></a>理解 TypeScript 中的 <code>typeof</code></h2><p>在 TypeScript 中，<code>typeof</code> 操作符用于提取任何值或表达式的类型：</p><h3 id="基本使用示例"><a href="#基本使用示例" class="headerlink" title="基本使用示例"></a>基本使用示例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Extract variable types</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">apiUrl</span>: <span class="string">&quot;https://api.example.com&quot;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">    <span class="attr">retries</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ConfigType</span> = <span class="keyword">typeof</span> config;</span><br><span class="line"><span class="comment">// Result: &#123; apiUrl: string; timeout: number; retries: number &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Extract function types</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createUser</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">id</span>: <span class="title class_">Math</span>.<span class="title function_">random</span>(), name, age, <span class="attr">isActive</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CreateUserFunction</span> = <span class="keyword">typeof</span> createUser;</span><br><span class="line"><span class="comment">// Result: (name: string, age: number) =&gt; &#123; id: number; name: string; age: number; isActive: boolean &#125;</span></span><br></pre></td></tr></table></figure><h3 id="高级-typeof-用法"><a href="#高级-typeof-用法" class="headerlink" title="高级 typeof 用法"></a>高级 typeof 用法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Extract enum types</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Status</span> &#123;</span><br><span class="line">    <span class="variable constant_">PENDING</span> = <span class="string">&quot;pending&quot;</span>,</span><br><span class="line">    <span class="variable constant_">COMPLETED</span> = <span class="string">&quot;completed&quot;</span>,</span><br><span class="line">    <span class="variable constant_">FAILED</span> = <span class="string">&quot;failed&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StatusType</span> = <span class="keyword">typeof</span> <span class="title class_">Status</span>;</span><br><span class="line"><span class="comment">// Result: &#123; PENDING: &quot;pending&quot;; COMPLETED: &quot;completed&quot;; FAILED: &quot;failed&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Extract class constructor types</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">users</span>: <span class="title class_">User</span>[] = [];</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">addUser</span>(<span class="params"><span class="attr">user</span>: <span class="title class_">User</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">push</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserServiceConstructor</span> = <span class="keyword">typeof</span> <span class="title class_">UserService</span>;</span><br><span class="line"><span class="comment">// Result: new () =&gt; UserService</span></span><br></pre></td></tr></table></figure><h2 id="理解-ReturnType"><a href="#理解-ReturnType" class="headerlink" title="理解 ReturnType&lt;T&gt;"></a>理解 <code>ReturnType&lt;T&gt;</code></h2><p><code>ReturnType&lt;T&gt;</code> 是一个工具类型，用于从函数类型中提取返回类型：</p><h3 id="ReturnType-基本用法"><a href="#ReturnType-基本用法" class="headerlink" title="ReturnType 基本用法"></a>ReturnType 基本用法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchUserData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">        <span class="attr">email</span>: <span class="string">&quot;alice@example.com&quot;</span>,</span><br><span class="line">        <span class="attr">preferences</span>: &#123;</span><br><span class="line">            <span class="attr">theme</span>: <span class="string">&quot;dark&quot;</span>,</span><br><span class="line">            <span class="attr">notifications</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extract just the return type</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserData</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> fetchUserData&gt;;</span><br><span class="line"><span class="comment">// Result: &#123;</span></span><br><span class="line"><span class="comment">//   id: number;</span></span><br><span class="line"><span class="comment">//   name: string;</span></span><br><span class="line"><span class="comment">//   email: string;</span></span><br><span class="line"><span class="comment">//   preferences: &#123; theme: string; notifications: boolean &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h3 id="对比：Function-Type-vs-Return-Type"><a href="#对比：Function-Type-vs-Return-Type" class="headerlink" title="对比：Function Type vs Return Type"></a>对比：Function Type vs Return Type</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">routes</span>: [],</span><br><span class="line">        <span class="attr">navigate</span>: <span class="function">(<span class="params"><span class="attr">path</span>: <span class="built_in">string</span></span>) =&gt;</span> &#123;&#125;,</span><br><span class="line">        <span class="attr">currentPath</span>: <span class="string">&quot;/&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Full function type</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RouterFunction</span> = <span class="keyword">typeof</span> createRouter;</span><br><span class="line"><span class="comment">// Result: () =&gt; &#123; routes: any[]; navigate: (path: string) =&gt; void; currentPath: string &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Only the return type</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RouterInstance</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> createRouter&gt;;</span><br><span class="line"><span class="comment">// Result: &#123; routes: any[]; navigate: (path: string) =&gt; void; currentPath: string &#125;</span></span><br></pre></td></tr></table></figure><h2 id="实际案例：TanStack-Router"><a href="#实际案例：TanStack-Router" class="headerlink" title="实际案例：TanStack Router"></a>实际案例：TanStack Router</h2><p>让我们来看看 TanStack Router 配置中的实际使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> router = <span class="title function_">createTanstackRouter</span>(&#123; </span><br><span class="line">        routeTree,</span><br><span class="line">        <span class="attr">scrollRestoration</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> router;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type declaration for module augmentation</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;@tanstack/react-router&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Register</span> &#123;</span><br><span class="line">        <span class="attr">router</span>: <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> createRouter&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逐步分解："><a href="#逐步分解：" class="headerlink" title="逐步分解："></a>逐步分解：</h3><ol><li><strong><code>typeof createRouter</code></strong> - 获取函数类型：<code>() =&gt; Router</code></li><li><strong><code>ReturnType&lt;typeof createRouter&gt;</code></strong> - 提取返回类型：<code>Router</code></li><li><strong>最终结果</strong> - <code>router</code> 属性具有与 <code>createRouter()</code> 返回值完全相同的类型</li></ol><h2 id="Java-vs-TypeScript：关键差异"><a href="#Java-vs-TypeScript：关键差异" class="headerlink" title="Java vs TypeScript：关键差异"></a>Java vs TypeScript：关键差异</h2><table><thead><tr><th>方面</th><th>Java</th><th>TypeScript</th></tr></thead><tbody><tr><td><strong>时机</strong></td><td>Runtime</td><td>Compile-time</td></tr><tr><td><strong>目的</strong></td><td>反射与动态行为</td><td>静态类型检查</td></tr><tr><td><strong>性能</strong></td><td>运行时开销</td><td>零运行时成本</td></tr><tr><td><strong>用法</strong></td><td><code>obj.getClass()</code>, <code>instanceof</code></td><td><code>typeof</code>, <code>ReturnType&lt;T&gt;</code></td></tr></tbody></table><h3 id="Java-等价模式"><a href="#Java-等价模式" class="headerlink" title="Java 等价模式"></a>Java 等价模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java approach - runtime type checking</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createService</span><span class="params">(Class&lt;T&gt; serviceType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (serviceType == UserService.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unknown service type&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TypeScript approach - compile-time type safety</span></span><br><span class="line">function createService&lt;T <span class="keyword">extends</span> <span class="title class_">ServiceType</span>&gt;(): T &#123;</span><br><span class="line">    <span class="comment">// Type is guaranteed at compile-time</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServiceRegistry</span>().get&lt;T&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高级模式：类型安全的-API-工厂"><a href="#高级模式：类型安全的-API-工厂" class="headerlink" title="高级模式：类型安全的 API 工厂"></a>高级模式：类型安全的 API 工厂</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Define API endpoints with their return types</span></span><br><span class="line"><span class="keyword">const</span> apiEndpoints = &#123;</span><br><span class="line">    <span class="attr">getUser</span>: <span class="function">() =&gt;</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/user&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>()) <span class="keyword">as</span> <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt;,</span><br><span class="line">    <span class="attr">getPosts</span>: <span class="function">() =&gt;</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/posts&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>()) <span class="keyword">as</span> <span class="title class_">Promise</span>&lt;<span class="title class_">Post</span>[]&gt;,</span><br><span class="line">    <span class="attr">getComments</span>: <span class="function">(<span class="params"><span class="attr">postId</span>: <span class="built_in">number</span></span>) =&gt;</span> </span><br><span class="line">        <span class="title function_">fetch</span>(<span class="string">`/api/posts/<span class="subst">$&#123;postId&#125;</span>/comments`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>()) <span class="keyword">as</span> <span class="title class_">Promise</span>&lt;<span class="title class_">Comment</span>[]&gt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extract all endpoint return types</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ApiReturnTypes</span> = &#123;</span><br><span class="line">    [K <span class="keyword">in</span> keyof <span class="keyword">typeof</span> apiEndpoints]: <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> apiEndpoints[K]&gt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Result:</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   getUser: Promise&lt;User&gt;;</span></span><br><span class="line"><span class="comment">//   getPosts: Promise&lt;Post[]&gt;;</span></span><br><span class="line"><span class="comment">//   getComments: Promise&lt;Comment[]&gt;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><strong>使用 <code>typeof</code> 进行类型推导</strong> - 当你希望 TypeScript 自动确定类型时</li><li><strong>结合 <code>ReturnType&lt;&gt;</code> 使用</strong> - 当你只需要函数的返回类型时</li><li><strong>优先选择类型推导而非显式类型</strong> - 让 TypeScript 来完成这项工作</li><li><strong>在泛型约束中使用</strong> - 创建灵活、类型安全的 API</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good: Let TypeScript infer the type</span></span><br><span class="line"><span class="keyword">const</span> config = &#123; <span class="attr">timeout</span>: <span class="number">5000</span>, <span class="attr">retries</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Config</span> = <span class="keyword">typeof</span> config;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Better: Use with generics for reusable patterns</span></span><br><span class="line"><span class="keyword">function</span> createApiClient&lt;T <span class="keyword">extends</span> <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="function">(<span class="params">...<span class="attr">args</span>: <span class="built_in">any</span>[]</span>) =&gt;</span> <span class="built_in">any</span>&gt;&gt;(</span><br><span class="line">    <span class="attr">endpoints</span>: T</span><br><span class="line">): &#123; [K <span class="keyword">in</span> keyof T]: <span class="title class_">ReturnType</span>&lt;T[K]&gt; &#125; &#123;</span><br><span class="line">    <span class="comment">// Implementation here</span></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125; <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>理解 <code>typeof</code> 和 <code>ReturnType</code> 对于编写类型安全的 TypeScript 代码至关重要。与 Java 的运行时反射不同，这些是编译时工具，提供零成本的类型安全。它们支持强大的模式，如类型推导、泛型约束和模块扩展，同时保持出色的开发者体验。</p><p>对于 Java 开发者来说，可以将 <code>typeof</code> 视为编译时反射，在没有运行时开销的情况下捕获类型信息，而 <code>ReturnType&lt;T&gt;</code> 则是从方法签名中提取”输出类型”的方式。</p>]]></content>
    
    
    <summary type="html">从 Java 开发者的视角深入解析 TypeScript 的 typeof 和 ReturnType 工具类型，通过对比和实际案例帮助理解编译时类型推导。</summary>
    
    
    
    <category term="Programming" scheme="https://blog.baduncle.top/categories/Programming/"/>
    
    
    <category term="TypeScript" scheme="https://blog.baduncle.top/tags/TypeScript/"/>
    
    <category term="typeof" scheme="https://blog.baduncle.top/tags/typeof/"/>
    
    <category term="ReturnType" scheme="https://blog.baduncle.top/tags/ReturnType/"/>
    
    <category term="type-safety" scheme="https://blog.baduncle.top/tags/type-safety/"/>
    
    <category term="JavaScript" scheme="https://blog.baduncle.top/tags/JavaScript/"/>
    
    <category term="Java" scheme="https://blog.baduncle.top/tags/Java/"/>
    
    <category term="Programming" scheme="https://blog.baduncle.top/tags/Programming/"/>
    
    <category term="Tutorial" scheme="https://blog.baduncle.top/tags/Tutorial/"/>
    
    <category term="utility-types" scheme="https://blog.baduncle.top/tags/utility-types/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 模块系统完全指南：从 Java 开发者视角理解 declare module</title>
    <link href="https://blog.baduncle.top/2025/08/06/typescript-module-system-guide/"/>
    <id>https://blog.baduncle.top/2025/08/06/typescript-module-system-guide/</id>
    <published>2025-08-06T02:30:00.000Z</published>
    <updated>2025-08-06T16:42:05.847Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名 Java 开发者初次接触 TypeScript 时，可能会对其模块系统感到困惑。为什么需要 <code>declare module</code>？为什么不能直接使用文件？本文将从 Java 开发者熟悉的概念出发，深入解析 TypeScript 的模块系统。</p><span id="more"></span><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7">模块系统的必要性</a><ul><li><a href="#%E6%B2%A1%E6%9C%89%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%97%AE%E9%A2%98">没有模块系统的问题</a></li><li><a href="#%E6%97%A9%E6%9C%9F-JavaScript-%E7%9A%84%E5%90%8C%E6%A0%B7%E9%97%AE%E9%A2%98">早期 JavaScript 的同样问题</a></li></ul></li><li><a href="#Java-vs-TypeScript-%E6%A8%A1%E5%9D%97%E5%AF%B9%E6%AF%94">Java vs TypeScript 模块对比</a><ul><li><a href="#Java-%E7%9A%84%E5%8C%85%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">Java 的包系统解决方案</a></li><li><a href="#TypeScript-%E7%9A%84%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F">TypeScript 的模块系统</a></li></ul></li><li><a href="#declare-module-%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E7%94%A8%E6%B3%95">declare module 的作用和用法</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">基本概念</a></li></ul></li><li><a href="#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81-declare-module">什么时候需要 declare module</a><ul><li><a href="#%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8%E7%9A%84%E6%83%85%E5%86%B5">需要使用的情况</a></li><li><a href="#%E4%B8%8D%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8%E7%9A%84%E6%83%85%E5%86%B5">不需要使用的情况</a></li></ul></li><li><a href="#%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">实际应用场景</a><ul><li><a href="#%E5%9C%BA%E6%99%AF-1%EF%BC%9A%E9%9B%86%E6%88%90%E8%80%81%E6%97%A7%E7%9A%84-JavaScript-%E5%BA%93">场景 1：集成老旧的 JavaScript 库</a></li><li><a href="#%E5%9C%BA%E6%99%AF-2%EF%BC%9A%E5%BE%AE%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97%E5%A3%B0%E6%98%8E">场景 2：微前端架构中的模块声明</a></li><li><a href="#%E5%9C%BA%E6%99%AF-3%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%89%B9%E5%AE%9A%E7%9A%84%E6%A8%A1%E5%9D%97">场景 3：开发环境特定的模块</a></li></ul></li><li><a href="#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">最佳实践</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul><h2 id="模块系统的必要性"><a href="#模块系统的必要性" class="headerlink" title="模块系统的必要性"></a>模块系统的必要性</h2><h3 id="没有模块系统的问题"><a href="#没有模块系统的问题" class="headerlink" title="没有模块系统的问题"></a>没有模块系统的问题</h3><p>想象一下，如果 Java 没有包（package）系统，所有类都在根目录下会发生什么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有类都在根目录</span></span><br><span class="line"><span class="comment">// File: StringUtils.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">format</span><span class="params">(String str)</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// File: DateUtils.java  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">format</span><span class="params">(Date date)</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// File: MyStringUtils.java (你自己写的)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtils</span> &#123;  <span class="comment">// ❌ 命名冲突！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">format</span><span class="params">(String str)</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题显而易见</strong>：</p><ol><li><strong>命名冲突</strong> - 不能有两个同名类</li><li><strong>代码组织混乱</strong> - 所有类都在一个平面空间</li><li><strong>依赖关系不清晰</strong> - 不知道哪些类属于同一个功能模块</li><li><strong>维护困难</strong> - 大型项目中找到特定功能的类变得困难</li></ol><h3 id="早期-JavaScript-的同样问题"><a href="#早期-JavaScript-的同样问题" class="headerlink" title="早期 JavaScript 的同样问题"></a>早期 JavaScript 的同样问题</h3><p>在模块系统出现之前，JavaScript 开发是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 早期的 JavaScript 开发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lodash.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;myapp.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 所有函数都在全局作用域</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> users = [];  <span class="comment">// 全局变量</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">getUsers</span>(<span class="params"></span>) &#123; ... &#125;  <span class="comment">// 全局函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">formatDate</span>(<span class="params"></span>) &#123; ... &#125;  <span class="comment">// 全局函数</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 问题：</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. 如果 jquery 和 lodash 都有 $ 函数怎么办？</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2. 如果两个库都定义了 utils 对象怎么办？</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 3. script 标签的加载顺序必须严格控制</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 4. 所有函数都暴露在全局，无法控制访问权限</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Java-vs-TypeScript-模块对比"><a href="#Java-vs-TypeScript-模块对比" class="headerlink" title="Java vs TypeScript 模块对比"></a>Java vs TypeScript 模块对比</h2><h3 id="Java-的包系统解决方案"><a href="#Java-的包系统解决方案" class="headerlink" title="Java 的包系统解决方案"></a>Java 的包系统解决方案</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com/example/utils/StringUtils.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">capitalize</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + str.substring(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 私有方法，外部无法访问</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str != <span class="literal">null</span> &amp;&amp; !str.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// com/thirdparty/utils/StringUtils.java  </span></span><br><span class="line"><span class="keyword">package</span> com.thirdparty.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtils</span> &#123;  <span class="comment">// ✅ 可以同名！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">capitalize</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="comment">// 不同的实现</span></span><br><span class="line">        <span class="keyword">return</span> str.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Main.java - 使用时明确指定来源</span></span><br><span class="line"><span class="keyword">import</span> com.example.utils.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.thirdparty.utils.StringUtils as ThirdPartyStringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result1</span> <span class="operator">=</span> StringUtils.capitalize(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result2</span> <span class="operator">=</span> ThirdPartyStringUtils.capitalize(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TypeScript-的模块系统"><a href="#TypeScript-的模块系统" class="headerlink" title="TypeScript 的模块系统"></a>TypeScript 的模块系统</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils/stringHelper.ts (一个模块)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">capitalize</span>(<span class="params"><span class="attr">str</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + str.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有函数，不导出，外部无法访问</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isValid</span>(<span class="params"><span class="attr">str</span>: <span class="built_in">string</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str != <span class="literal">null</span> &amp;&amp; str.<span class="property">length</span> &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">formatString</span>(<span class="params"><span class="attr">str</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">isValid</span>(str)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid string&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">capitalize</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// thirdparty/stringUtils.ts (另一个模块)  </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">capitalize</span>(<span class="params"><span class="attr">str</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;  <span class="comment">// ✅ 同名函数，但在不同模块</span></span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.ts - 使用时明确指定来源</span></span><br><span class="line"><span class="keyword">import</span> &#123; capitalize <span class="keyword">as</span> stringCapitalize, formatString &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils/stringHelper&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; capitalize <span class="keyword">as</span> thirdPartyCapitalize &#125; <span class="keyword">from</span> <span class="string">&#x27;./thirdparty/stringUtils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 明确知道使用的是哪个函数</span></span><br><span class="line"><span class="keyword">const</span> result1 = <span class="title function_">stringCapitalize</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> result2 = <span class="title function_">thirdPartyCapitalize</span>(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> result3 = <span class="title function_">formatString</span>(<span class="string">&quot;typescript&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="declare-module-的作用和用法"><a href="#declare-module-的作用和用法" class="headerlink" title="declare module 的作用和用法"></a>declare module 的作用和用法</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><code>declare module</code> 是 TypeScript 中用于声明模块类型的语法。它的作用类似于给 TypeScript 编译器提供”接口文档”，告诉编译器外部模块的结构。</p><h3 id="1-声明第三方库模块类型"><a href="#1-声明第三方库模块类型" class="headerlink" title="1. 声明第三方库模块类型"></a>1. 声明第三方库模块类型</h3><p>当使用没有 TypeScript 类型声明的 JavaScript 库时：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设你安装了一个纯 JavaScript 库 &#x27;awesome-library&#x27;</span></span><br><span class="line"><span class="comment">// 没有类型声明时会报错</span></span><br><span class="line"><span class="keyword">import</span> awesomeLib <span class="keyword">from</span> <span class="string">&#x27;awesome-library&#x27;</span>;  <span class="comment">// ❌ 找不到模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 declare module 声明类型</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;awesome-library&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">        <span class="attr">timeout</span>: <span class="built_in">number</span>;</span><br><span class="line">        <span class="attr">retries</span>: <span class="built_in">number</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">Config</span></span>): <span class="built_in">void</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"><span class="attr">data</span>: <span class="built_in">string</span></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">cleanup</span>(<span class="params"></span>): <span class="built_in">void</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 默认导出</span></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">awesomeLib</span>: &#123;</span><br><span class="line">        <span class="attr">version</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="attr">init</span>: <span class="keyword">typeof</span> init;</span><br><span class="line">        <span class="attr">process</span>: <span class="keyword">typeof</span> process;</span><br><span class="line">        <span class="attr">cleanup</span>: <span class="keyword">typeof</span> cleanup;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> awesomeLib;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在可以正常使用，并且有类型检查</span></span><br><span class="line"><span class="keyword">import</span> awesomeLib, &#123; init, process &#125; <span class="keyword">from</span> <span class="string">&#x27;awesome-library&#x27;</span>;</span><br><span class="line"></span><br><span class="line">awesomeLib.<span class="property">version</span>;  <span class="comment">// ✅ TypeScript 知道这个属性存在</span></span><br><span class="line"><span class="title function_">init</span>(&#123; <span class="attr">timeout</span>: <span class="number">5000</span>, <span class="attr">retries</span>: <span class="number">3</span> &#125;);  <span class="comment">// ✅ 有参数类型检查</span></span><br><span class="line"><span class="title function_">process</span>(<span class="string">&quot;some data&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;  <span class="comment">// ✅ 知道返回 Promise&lt;string&gt;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-声明资源文件模块"><a href="#2-声明资源文件模块" class="headerlink" title="2. 声明资源文件模块"></a>2. 声明资源文件模块</h3><p>前端开发中经常需要导入非 JavaScript 文件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明 CSS 模块</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.css&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">styles</span>: &#123; [<span class="attr">className</span>: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125;;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> styles;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明图片模块</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.png&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">src</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> src;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.jpg&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">src</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> src;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明 JSON 文件</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.json&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">value</span>: <span class="built_in">any</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在可以导入这些资源</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./component.css&#x27;</span>;      <span class="comment">// ✅ 类型是 &#123; [className: string]: string &#125;</span></span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./assets/logo.png&#x27;</span>;     <span class="comment">// ✅ 类型是 string</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;./config.json&#x27;</span>;       <span class="comment">// ✅ 类型是 any</span></span><br></pre></td></tr></table></figure><h3 id="3-模块扩展-Module-Augmentation"><a href="#3-模块扩展-Module-Augmentation" class="headerlink" title="3. 模块扩展 (Module Augmentation)"></a>3. 模块扩展 (Module Augmentation)</h3><p>扩展现有模块的类型定义，这在使用框架时特别有用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展 Express 的 Request 接口</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;express&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Request</span> &#123;</span><br><span class="line">        <span class="attr">user</span>?: &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">            <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">            <span class="attr">role</span>: <span class="built_in">string</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="attr">sessionId</span>?: <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Response</span> &#123;</span><br><span class="line">        <span class="title function_">success</span>(<span class="attr">data</span>: <span class="built_in">any</span>): <span class="title class_">Response</span>;</span><br><span class="line">        <span class="title function_">error</span>(<span class="attr">message</span>: <span class="built_in">string</span>, <span class="attr">code</span>?: <span class="built_in">number</span>): <span class="title class_">Response</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在在 Express 应用中可以使用扩展的类型</span></span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// TypeScript 现在知道 req.user 和 req.sessionId 存在</span></span><br><span class="line">    req.<span class="property">user</span> = &#123; <span class="attr">id</span>: <span class="string">&#x27;123&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">role</span>: <span class="string">&#x27;admin&#x27;</span> &#125;;</span><br><span class="line">    req.<span class="property">sessionId</span> = <span class="string">&#x27;session-123&#x27;</span>;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/profile&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ✅ TypeScript 知道这些属性存在</span></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">user</span>) &#123;</span><br><span class="line">        res.<span class="title function_">success</span>(&#123; </span><br><span class="line">            <span class="attr">name</span>: req.<span class="property">user</span>.<span class="property">name</span>, </span><br><span class="line">            <span class="attr">role</span>: req.<span class="property">user</span>.<span class="property">role</span> </span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">error</span>(<span class="string">&#x27;Unauthorized&#x27;</span>, <span class="number">401</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-全局模块声明"><a href="#4-全局模块声明" class="headerlink" title="4. 全局模块声明"></a>4. 全局模块声明</h3><p>声明全局可用的模块或变量：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明全局变量</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Window</span> &#123;</span><br><span class="line">        <span class="attr">myApp</span>: &#123;</span><br><span class="line">            <span class="attr">version</span>: <span class="built_in">string</span>;</span><br><span class="line">            <span class="title function_">init</span>(): <span class="built_in">void</span>;</span><br><span class="line">            <span class="attr">config</span>: &#123;</span><br><span class="line">                <span class="attr">apiUrl</span>: <span class="built_in">string</span>;</span><br><span class="line">                <span class="attr">debug</span>: <span class="built_in">boolean</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="attr">gtag</span>: <span class="function">(<span class="params"><span class="attr">command</span>: <span class="built_in">string</span>, ...<span class="attr">args</span>: <span class="built_in">any</span>[]</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> <span class="attr">ENV</span>: <span class="string">&#x27;development&#x27;</span> | <span class="string">&#x27;production&#x27;</span> | <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在可以直接使用全局变量</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">myApp</span>.<span class="title function_">init</span>();</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">gtag</span>(<span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;GA_MEASUREMENT_ID&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Environment: <span class="subst">$&#123;ENV&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果在模块中使用，需要导出空对象使其成为模块</span></span><br><span class="line"><span class="keyword">export</span> &#123;&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-条件类型声明"><a href="#5-条件类型声明" class="headerlink" title="5. 条件类型声明"></a>5. 条件类型声明</h3><p>根据模块路径模式声明类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为所有组件文件声明通用类型</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;components/*&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">import</span> &#123; <span class="title class_">ComponentType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">component</span>: <span class="title class_">ComponentType</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> component;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 API 模块声明类型</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;api/*&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ApiResponse</span>&lt;T = <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">        <span class="attr">data</span>: T;</span><br><span class="line">        <span class="attr">status</span>: <span class="built_in">number</span>;</span><br><span class="line">        <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> get&lt;T&gt;(<span class="attr">endpoint</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">ApiResponse</span>&lt;T&gt;&gt;;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> post&lt;T&gt;(<span class="attr">endpoint</span>: <span class="built_in">string</span>, <span class="attr">data</span>: <span class="built_in">any</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">ApiResponse</span>&lt;T&gt;&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什么时候需要-declare-module"><a href="#什么时候需要-declare-module" class="headerlink" title="什么时候需要 declare module"></a>什么时候需要 declare module</h2><h3 id="需要使用的情况"><a href="#需要使用的情况" class="headerlink" title="需要使用的情况"></a>需要使用的情况</h3><h4 id="1-第三方-JavaScript-库（没有类型定义）"><a href="#1-第三方-JavaScript-库（没有类型定义）" class="headerlink" title="1. 第三方 JavaScript 库（没有类型定义）"></a>1. 第三方 JavaScript 库（没有类型定义）</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用老旧的 jQuery 插件</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;jquery-plugin&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">JQuery</span> &#123;</span><br><span class="line">        <span class="title function_">myPlugin</span>(<span class="attr">options</span>?: &#123; <span class="attr">color</span>: <span class="built_in">string</span>; <span class="attr">size</span>: <span class="built_in">number</span> &#125;): <span class="title class_">JQuery</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;jquery-plugin&#x27;</span>;</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#element&#x27;</span>).<span class="title function_">myPlugin</span>(&#123; <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>, <span class="attr">size</span>: <span class="number">12</span> &#125;);</span><br></pre></td></tr></table></figure><h4 id="2-Node-js-环境的特殊模块"><a href="#2-Node-js-环境的特殊模块" class="headerlink" title="2. Node.js 环境的特殊模块"></a>2. Node.js 环境的特殊模块</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明 Node.js 内置模块的扩展</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;fs&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">readFileSync</span>(<span class="params"><span class="attr">path</span>: <span class="built_in">string</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf8&#x27;</span></span>): <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">readFileSync</span>(<span class="params"><span class="attr">path</span>: <span class="built_in">string</span></span>): <span class="title class_">Buffer</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-开发工具生成的模块"><a href="#3-开发工具生成的模块" class="headerlink" title="3. 开发工具生成的模块"></a>3. 开发工具生成的模块</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Webpack 的热重载模块</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;webpack-hot-middleware/client&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">hotClient</span>: &#123;</span><br><span class="line">        <span class="title function_">subscribe</span>(<span class="attr">handler</span>: <span class="function">(<span class="params"><span class="attr">obj</span>: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">export</span> = hotClient;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vite 的环境变量</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;virtual:env&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">env</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> env;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不需要使用的情况"><a href="#不需要使用的情况" class="headerlink" title="不需要使用的情况"></a>不需要使用的情况</h3><h4 id="1-你自己编写的-TypeScript-文件"><a href="#1-你自己编写的-TypeScript-文件" class="headerlink" title="1. 你自己编写的 TypeScript 文件"></a>1. 你自己编写的 TypeScript 文件</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.ts - 你自己写的文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// calculator.ts - 使用你自己的模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; add, multiply &#125; <span class="keyword">from</span> <span class="string">&#x27;./math&#x27;</span>;  <span class="comment">// ✅ 不需要 declare module</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>));       <span class="comment">// TypeScript 直接知道函数签名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">3</span>, <span class="number">4</span>));  <span class="comment">// 有完整的类型检查</span></span><br></pre></td></tr></table></figure><h4 id="2-已有类型定义的第三方库"><a href="#2-已有类型定义的第三方库" class="headerlink" title="2. 已有类型定义的第三方库"></a>2. 已有类型定义的第三方库</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大多数流行的库都有官方或社区的类型定义</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;           <span class="comment">// ✅ @types/react 提供类型</span></span><br><span class="line"><span class="keyword">import</span> lodash <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;         <span class="comment">// ✅ @types/lodash 提供类型</span></span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;       <span class="comment">// ✅ @types/express 提供类型</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;           <span class="comment">// ✅ axios 自带 TypeScript 类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这些都不需要 declare module</span></span><br></pre></td></tr></table></figure><h2 id="实际应用场景"><a href="#实际应用场景" class="headerlink" title="实际应用场景"></a>实际应用场景</h2><h3 id="场景-1：集成老旧的-JavaScript-库"><a href="#场景-1：集成老旧的-JavaScript-库" class="headerlink" title="场景 1：集成老旧的 JavaScript 库"></a>场景 1：集成老旧的 JavaScript 库</h3><p>假设你需要在 TypeScript 项目中使用一个老旧的图表库：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 老旧的图表库没有类型定义</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;old-chart-library&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">ChartOptions</span> &#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="built_in">number</span>;</span><br><span class="line">        <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span> | <span class="string">&#x27;bar&#x27;</span> | <span class="string">&#x27;pie&#x27;</span>;</span><br><span class="line">        <span class="attr">data</span>: <span class="title class_">Array</span>&lt;&#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="built_in">string</span>;</span><br><span class="line">            <span class="attr">value</span>: <span class="built_in">number</span>;</span><br><span class="line">            <span class="attr">color</span>?: <span class="built_in">string</span>;</span><br><span class="line">        &#125;&gt;;</span><br><span class="line">        <span class="attr">animation</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">        <span class="attr">legend</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">ChartInstance</span> &#123;</span><br><span class="line">        <span class="title function_">render</span>(): <span class="built_in">void</span>;</span><br><span class="line">        <span class="title function_">update</span>(<span class="attr">data</span>: <span class="title class_">ChartOptions</span>[<span class="string">&#x27;data&#x27;</span>]): <span class="built_in">void</span>;</span><br><span class="line">        <span class="title function_">destroy</span>(): <span class="built_in">void</span>;</span><br><span class="line">        <span class="title function_">on</span>(<span class="attr">event</span>: <span class="string">&#x27;click&#x27;</span> | <span class="string">&#x27;hover&#x27;</span>, <span class="attr">callback</span>: <span class="function">(<span class="params"><span class="attr">data</span>: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createChart</span>(<span class="params"><span class="attr">container</span>: <span class="built_in">string</span> | <span class="title class_">HTMLElement</span>, <span class="attr">options</span>: <span class="title class_">ChartOptions</span></span>): <span class="title class_">ChartInstance</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">version</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">import</span> &#123; createChart &#125; <span class="keyword">from</span> <span class="string">&#x27;old-chart-library&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chart = <span class="title function_">createChart</span>(<span class="string">&#x27;#chart-container&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: [</span><br><span class="line">        &#123; <span class="attr">label</span>: <span class="string">&#x27;January&#x27;</span>, <span class="attr">value</span>: <span class="number">100</span>, <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">label</span>: <span class="string">&#x27;February&#x27;</span>, <span class="attr">value</span>: <span class="number">150</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">animation</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">legend</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">chart.<span class="title function_">render</span>();</span><br><span class="line">chart.<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Chart clicked:&#x27;</span>, data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="场景-2：微前端架构中的模块声明"><a href="#场景-2：微前端架构中的模块声明" class="headerlink" title="场景 2：微前端架构中的模块声明"></a>场景 2：微前端架构中的模块声明</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在微前端架构中，不同应用可能需要共享类型</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;@shared/user-service&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="attr">role</span>: <span class="string">&#x27;admin&#x27;</span> | <span class="string">&#x27;user&#x27;</span> | <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">        <span class="attr">permissions</span>: <span class="built_in">string</span>[];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">        <span class="title function_">getCurrentUser</span>(): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt;;</span><br><span class="line">        <span class="title function_">updateUser</span>(<span class="attr">id</span>: <span class="built_in">string</span>, <span class="attr">updates</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">User</span>&gt;): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt;;</span><br><span class="line">        <span class="title function_">deleteUser</span>(<span class="attr">id</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="attr">userService</span>: <span class="title class_">UserService</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> userService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;@shared/event-bus&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">EventBus</span> &#123;</span><br><span class="line">        on&lt;T = <span class="built_in">any</span>&gt;(<span class="attr">event</span>: <span class="built_in">string</span>, <span class="attr">handler</span>: <span class="function">(<span class="params"><span class="attr">data</span>: T</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span>;</span><br><span class="line">        <span class="title function_">off</span>(<span class="attr">event</span>: <span class="built_in">string</span>, <span class="attr">handler</span>?: <span class="title class_">Function</span>): <span class="built_in">void</span>;</span><br><span class="line">        emit&lt;T = <span class="built_in">any</span>&gt;(<span class="attr">event</span>: <span class="built_in">string</span>, <span class="attr">data</span>: T): <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="attr">eventBus</span>: <span class="title class_">EventBus</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> eventBus;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在主应用中使用</span></span><br><span class="line"><span class="keyword">import</span> userService <span class="keyword">from</span> <span class="string">&#x27;@shared/user-service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> eventBus <span class="keyword">from</span> <span class="string">&#x27;@shared/event-bus&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">initApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> userService.<span class="title function_">getCurrentUser</span>();</span><br><span class="line">    </span><br><span class="line">    eventBus.<span class="title function_">on</span>(<span class="string">&#x27;user-updated&#x27;</span>, <span class="function">(<span class="params">updatedUser</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User updated:&#x27;</span>, updatedUser);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    eventBus.<span class="title function_">emit</span>(<span class="string">&#x27;app-initialized&#x27;</span>, &#123; <span class="attr">userId</span>: user.<span class="property">id</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="场景-3：开发环境特定的模块"><a href="#场景-3：开发环境特定的模块" class="headerlink" title="场景 3：开发环境特定的模块"></a>场景 3：开发环境特定的模块</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开发环境的热重载和调试工具</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;dev-tools&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">DevTools</span> &#123;</span><br><span class="line">        <span class="title function_">enableHotReload</span>(): <span class="built_in">void</span>;</span><br><span class="line">        <span class="title function_">enableDebugMode</span>(): <span class="built_in">void</span>;</span><br><span class="line">        <span class="title function_">logPerformance</span>(<span class="attr">label</span>: <span class="built_in">string</span>): <span class="built_in">void</span>;</span><br><span class="line">        <span class="title function_">inspectComponent</span>(<span class="attr">selector</span>: <span class="built_in">string</span>): <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="attr">devTools</span>: <span class="title class_">DevTools</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> devTools;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只在开发环境使用</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">import</span>(<span class="string">&#x27;dev-tools&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; <span class="keyword">default</span>: devTools &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        devTools.<span class="title function_">enableHotReload</span>();</span><br><span class="line">        devTools.<span class="title function_">enableDebugMode</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-类型定义文件的组织"><a href="#1-类型定义文件的组织" class="headerlink" title="1. 类型定义文件的组织"></a>1. 类型定义文件的组织</h3><p>创建专门的类型定义文件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/global.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Window</span> &#123;</span><br><span class="line">        <span class="attr">APP_CONFIG</span>: &#123;</span><br><span class="line">            <span class="attr">version</span>: <span class="built_in">string</span>;</span><br><span class="line">            <span class="attr">apiUrl</span>: <span class="built_in">string</span>;</span><br><span class="line">            <span class="attr">features</span>: <span class="built_in">string</span>[];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// types/modules.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.css&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">styles</span>: &#123; [<span class="attr">className</span>: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125;;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> styles;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.svg&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">ReactComponent</span>: <span class="title class_">React</span>.<span class="property">ComponentType</span>&lt;<span class="title class_">React</span>.<span class="property">SVGProps</span>&lt;<span class="title class_">SVGSVGElement</span>&gt;&gt;;</span><br><span class="line">    <span class="keyword">export</span> &#123; <span class="title class_">ReactComponent</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">src</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> src;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// types/third-party.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;legacy-library&#x27;</span> &#123;</span><br><span class="line">    <span class="comment">// 第三方库的类型定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-渐进式类型定义"><a href="#2-渐进式类型定义" class="headerlink" title="2. 渐进式类型定义"></a>2. 渐进式类型定义</h3><p>从简单开始，逐步完善：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始版本 - 基本可用</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;some-library&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">lib</span>: <span class="built_in">any</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> lib;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改进版本 - 添加主要 API</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;some-library&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"><span class="attr">config</span>: <span class="built_in">any</span></span>): <span class="built_in">void</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"><span class="attr">data</span>: <span class="built_in">any</span></span>): <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完善版本 - 完整类型定义</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;some-library&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">        <span class="attr">timeout</span>: <span class="built_in">number</span>;</span><br><span class="line">        <span class="attr">retries</span>: <span class="built_in">number</span>;</span><br><span class="line">        <span class="attr">debug</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">ProcessResult</span> &#123;</span><br><span class="line">        <span class="attr">success</span>: <span class="built_in">boolean</span>;</span><br><span class="line">        <span class="attr">data</span>: <span class="built_in">any</span>;</span><br><span class="line">        <span class="attr">errors</span>?: <span class="built_in">string</span>[];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">Config</span></span>): <span class="built_in">void</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"><span class="attr">data</span>: <span class="built_in">unknown</span></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">ProcessResult</span>&gt;;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">cleanup</span>(<span class="params"></span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-文档和注释"><a href="#3-文档和注释" class="headerlink" title="3. 文档和注释"></a>3. 文档和注释</h3><p>为类型定义添加详细的文档：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;payment-gateway&#x27;</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付网关配置选项</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">PaymentConfig</span> &#123;</span><br><span class="line">        <span class="comment">/** 商户ID */</span></span><br><span class="line">        <span class="attr">merchantId</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="comment">/** API密钥 */</span></span><br><span class="line">        <span class="attr">apiKey</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="comment">/** 是否为沙盒环境 */</span></span><br><span class="line">        <span class="attr">sandbox</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">        <span class="comment">/** 超时时间（毫秒） */</span></span><br><span class="line">        <span class="attr">timeout</span>?: <span class="built_in">number</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">PaymentResult</span> &#123;</span><br><span class="line">        <span class="comment">/** 是否支付成功 */</span></span><br><span class="line">        <span class="attr">success</span>: <span class="built_in">boolean</span>;</span><br><span class="line">        <span class="comment">/** 交易ID */</span></span><br><span class="line">        <span class="attr">transactionId</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="comment">/** 错误信息（如果失败） */</span></span><br><span class="line">        <span class="attr">error</span>?: <span class="built_in">string</span>;</span><br><span class="line">        <span class="comment">/** 支付金额 */</span></span><br><span class="line">        <span class="attr">amount</span>: <span class="built_in">number</span>;</span><br><span class="line">        <span class="comment">/** 货币类型 */</span></span><br><span class="line">        <span class="attr">currency</span>: <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建支付实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config 支付配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> 支付实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createPayment</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">PaymentConfig</span></span>): &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 处理支付</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> amount 支付金额</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> currency 货币类型</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@returns</span> 支付结果</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="title function_">processPayment</span>(<span class="attr">amount</span>: <span class="built_in">number</span>, <span class="attr">currency</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">PaymentResult</span>&gt;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>TypeScript 的模块系统和 <code>declare module</code> 解决了 JavaScript 开发中的核心问题：</p><ol><li><strong>命名空间隔离</strong> - 避免全局污染和命名冲突</li><li><strong>依赖管理</strong> - 明确声明模块间的依赖关系</li><li><strong>类型安全</strong> - 为第三方库和特殊资源提供类型检查</li><li><strong>代码组织</strong> - 将相关功能组织在同一模块中</li><li><strong>封装控制</strong> - 决定哪些功能对外暴露</li></ol><p>对于 Java 开发者来说，可以这样理解：</p><ul><li><strong>模块系统</strong> ≈ Java 的包（package）系统</li><li><strong>export&#x2F;import</strong> ≈ Java 的 public 和 import 语句</li><li><strong>declare module</strong> ≈ 为第三方 JAR 包编写接口定义</li></ul><p>掌握了这些概念，你就能在 TypeScript 项目中更好地组织代码，享受类型安全带来的开发体验提升。</p>]]></content>
    
    
    <summary type="html">从 Java 开发者的视角深入解析 TypeScript 模块系统和 declare module 的使用，通过对比理解为什么需要模块系统以及如何正确使用。</summary>
    
    
    
    <category term="Programming" scheme="https://blog.baduncle.top/categories/Programming/"/>
    
    
    <category term="TypeScript" scheme="https://blog.baduncle.top/tags/TypeScript/"/>
    
    <category term="JavaScript" scheme="https://blog.baduncle.top/tags/JavaScript/"/>
    
    <category term="Java" scheme="https://blog.baduncle.top/tags/Java/"/>
    
    <category term="Programming" scheme="https://blog.baduncle.top/tags/Programming/"/>
    
    <category term="Tutorial" scheme="https://blog.baduncle.top/tags/Tutorial/"/>
    
    <category term="declare-module" scheme="https://blog.baduncle.top/tags/declare-module/"/>
    
    <category term="module-system" scheme="https://blog.baduncle.top/tags/module-system/"/>
    
  </entry>
  
</feed>
