<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Baduncle Blog</title>
  
  <subtitle>vibe coding</subtitle>
  <link href="https://blog.baduncle.top/atom.xml" rel="self"/>
  
  <link href="https://blog.baduncle.top/"/>
  <updated>2025-08-06T02:15:17.755Z</updated>
  <id>https://blog.baduncle.top/</id>
  
  <author>
    <name>Baduncle</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Understanding TypeScript typeof and ReturnType - A Java Developer&#39;s Perspective</title>
    <link href="https://blog.baduncle.top/2025/08/06/typescript-typeof-returntype-explained/"/>
    <id>https://blog.baduncle.top/2025/08/06/typescript-typeof-returntype-explained/</id>
    <published>2025-08-06T06:30:00.000Z</published>
    <updated>2025-08-06T02:15:17.755Z</updated>
    
    <content type="html"><![CDATA[<p>As developers coming from Java backgrounds often struggle with TypeScript’s type system nuances, understanding <code>typeof</code> and <code>ReturnType</code> can be particularly confusing. Let me break down these concepts with clear comparisons and practical examples.</p><h2 id="The-Core-Difference-Runtime-vs-Compile-time"><a href="#The-Core-Difference-Runtime-vs-Compile-time" class="headerlink" title="The Core Difference: Runtime vs Compile-time"></a>The Core Difference: Runtime vs Compile-time</h2><h3 id="Java’s-Type-Reflection-Runtime"><a href="#Java’s-Type-Reflection-Runtime" class="headerlink" title="Java’s Type Reflection (Runtime)"></a>Java’s Type Reflection (Runtime)</h3><p>In Java, type information is available at runtime through reflection:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java - Runtime type checking</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Class&lt;?&gt; clazz = list.getClass();</span><br><span class="line"><span class="type">String</span> <span class="variable">typeName</span> <span class="operator">=</span> clazz.getSimpleName(); <span class="comment">// &quot;ArrayList&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Get type information dynamically</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> getUserData();</span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> User) &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TypeScript’s-Type-System-Compile-time"><a href="#TypeScript’s-Type-System-Compile-time" class="headerlink" title="TypeScript’s Type System (Compile-time)"></a>TypeScript’s Type System (Compile-time)</h3><p>TypeScript’s <code>typeof</code> operates at compile-time for static type checking:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript - Compile-time type inference</span></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserType</span> = <span class="keyword">typeof</span> user; <span class="comment">// &#123; name: string; age: number &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// No runtime overhead - purely for type safety</span></span><br></pre></td></tr></table></figure><h2 id="Understanding-typeof-in-TypeScript"><a href="#Understanding-typeof-in-TypeScript" class="headerlink" title="Understanding typeof in TypeScript"></a>Understanding <code>typeof</code> in TypeScript</h2><p>The <code>typeof</code> operator in TypeScript extracts the type of any value or expression:</p><h3 id="Basic-Usage-Examples"><a href="#Basic-Usage-Examples" class="headerlink" title="Basic Usage Examples"></a>Basic Usage Examples</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Extract variable types</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">apiUrl</span>: <span class="string">&quot;https://api.example.com&quot;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">    <span class="attr">retries</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ConfigType</span> = <span class="keyword">typeof</span> config;</span><br><span class="line"><span class="comment">// Result: &#123; apiUrl: string; timeout: number; retries: number &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Extract function types</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createUser</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">id</span>: <span class="title class_">Math</span>.<span class="title function_">random</span>(), name, age, <span class="attr">isActive</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CreateUserFunction</span> = <span class="keyword">typeof</span> createUser;</span><br><span class="line"><span class="comment">// Result: (name: string, age: number) =&gt; &#123; id: number; name: string; age: number; isActive: boolean &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Advanced-typeof-Usage"><a href="#Advanced-typeof-Usage" class="headerlink" title="Advanced typeof Usage"></a>Advanced typeof Usage</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Extract enum types</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Status</span> &#123;</span><br><span class="line">    <span class="variable constant_">PENDING</span> = <span class="string">&quot;pending&quot;</span>,</span><br><span class="line">    <span class="variable constant_">COMPLETED</span> = <span class="string">&quot;completed&quot;</span>,</span><br><span class="line">    <span class="variable constant_">FAILED</span> = <span class="string">&quot;failed&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StatusType</span> = <span class="keyword">typeof</span> <span class="title class_">Status</span>;</span><br><span class="line"><span class="comment">// Result: &#123; PENDING: &quot;pending&quot;; COMPLETED: &quot;completed&quot;; FAILED: &quot;failed&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Extract class constructor types</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">users</span>: <span class="title class_">User</span>[] = [];</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">addUser</span>(<span class="params"><span class="attr">user</span>: <span class="title class_">User</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">push</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserServiceConstructor</span> = <span class="keyword">typeof</span> <span class="title class_">UserService</span>;</span><br><span class="line"><span class="comment">// Result: new () =&gt; UserService</span></span><br></pre></td></tr></table></figure><h2 id="Understanding-ReturnType"><a href="#Understanding-ReturnType" class="headerlink" title="Understanding ReturnType&lt;T&gt;"></a>Understanding <code>ReturnType&lt;T&gt;</code></h2><p><code>ReturnType&lt;T&gt;</code> is a utility type that extracts the return type from a function type:</p><h3 id="Basic-ReturnType-Usage"><a href="#Basic-ReturnType-Usage" class="headerlink" title="Basic ReturnType Usage"></a>Basic ReturnType Usage</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchUserData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">        <span class="attr">email</span>: <span class="string">&quot;alice@example.com&quot;</span>,</span><br><span class="line">        <span class="attr">preferences</span>: &#123;</span><br><span class="line">            <span class="attr">theme</span>: <span class="string">&quot;dark&quot;</span>,</span><br><span class="line">            <span class="attr">notifications</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extract just the return type</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserData</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> fetchUserData&gt;;</span><br><span class="line"><span class="comment">// Result: &#123;</span></span><br><span class="line"><span class="comment">//   id: number;</span></span><br><span class="line"><span class="comment">//   name: string;</span></span><br><span class="line"><span class="comment">//   email: string;</span></span><br><span class="line"><span class="comment">//   preferences: &#123; theme: string; notifications: boolean &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Comparison-Function-Type-vs-Return-Type"><a href="#Comparison-Function-Type-vs-Return-Type" class="headerlink" title="Comparison: Function Type vs Return Type"></a>Comparison: Function Type vs Return Type</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">routes</span>: [],</span><br><span class="line">        <span class="attr">navigate</span>: <span class="function">(<span class="params"><span class="attr">path</span>: <span class="built_in">string</span></span>) =&gt;</span> &#123;&#125;,</span><br><span class="line">        <span class="attr">currentPath</span>: <span class="string">&quot;/&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Full function type</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RouterFunction</span> = <span class="keyword">typeof</span> createRouter;</span><br><span class="line"><span class="comment">// Result: () =&gt; &#123; routes: any[]; navigate: (path: string) =&gt; void; currentPath: string &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Only the return type</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RouterInstance</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> createRouter&gt;;</span><br><span class="line"><span class="comment">// Result: &#123; routes: any[]; navigate: (path: string) =&gt; void; currentPath: string &#125;</span></span><br></pre></td></tr></table></figure><h2 id="Real-world-Example-TanStack-Router"><a href="#Real-world-Example-TanStack-Router" class="headerlink" title="Real-world Example: TanStack Router"></a>Real-world Example: TanStack Router</h2><p>Let’s examine the practical usage from a real TanStack Router configuration:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> router = <span class="title function_">createTanstackRouter</span>(&#123; </span><br><span class="line">        routeTree,</span><br><span class="line">        <span class="attr">scrollRestoration</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> router;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type declaration for module augmentation</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;@tanstack/react-router&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Register</span> &#123;</span><br><span class="line">        <span class="attr">router</span>: <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> createRouter&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-by-step-Breakdown"><a href="#Step-by-step-Breakdown" class="headerlink" title="Step-by-step Breakdown:"></a>Step-by-step Breakdown:</h3><ol><li><strong><code>typeof createRouter</code></strong> - Gets the function type: <code>() =&gt; Router</code></li><li><strong><code>ReturnType&lt;typeof createRouter&gt;</code></strong> - Extracts return type: <code>Router</code></li><li><strong>Final result</strong> - The <code>router</code> property has the exact same type as what <code>createRouter()</code> returns</li></ol><h2 id="Java-vs-TypeScript-Key-Differences"><a href="#Java-vs-TypeScript-Key-Differences" class="headerlink" title="Java vs TypeScript: Key Differences"></a>Java vs TypeScript: Key Differences</h2><table><thead><tr><th>Aspect</th><th>Java</th><th>TypeScript</th></tr></thead><tbody><tr><td><strong>When</strong></td><td>Runtime</td><td>Compile-time</td></tr><tr><td><strong>Purpose</strong></td><td>Reflection &amp; dynamic behavior</td><td>Static type checking</td></tr><tr><td><strong>Performance</strong></td><td>Runtime overhead</td><td>Zero runtime cost</td></tr><tr><td><strong>Usage</strong></td><td><code>obj.getClass()</code>, <code>instanceof</code></td><td><code>typeof</code>, <code>ReturnType&lt;T&gt;</code></td></tr></tbody></table><h3 id="Java-Equivalent-Pattern"><a href="#Java-Equivalent-Pattern" class="headerlink" title="Java Equivalent Pattern"></a>Java Equivalent Pattern</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java approach - runtime type checking</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createService</span><span class="params">(Class&lt;T&gt; serviceType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (serviceType == UserService.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unknown service type&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TypeScript approach - compile-time type safety</span></span><br><span class="line">function createService&lt;T <span class="keyword">extends</span> <span class="title class_">ServiceType</span>&gt;(): T &#123;</span><br><span class="line">    <span class="comment">// Type is guaranteed at compile-time</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServiceRegistry</span>().get&lt;T&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Advanced-Pattern-Type-safe-API-Factories"><a href="#Advanced-Pattern-Type-safe-API-Factories" class="headerlink" title="Advanced Pattern: Type-safe API Factories"></a>Advanced Pattern: Type-safe API Factories</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Define API endpoints with their return types</span></span><br><span class="line"><span class="keyword">const</span> apiEndpoints = &#123;</span><br><span class="line">    <span class="attr">getUser</span>: <span class="function">() =&gt;</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/user&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>()) <span class="keyword">as</span> <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt;,</span><br><span class="line">    <span class="attr">getPosts</span>: <span class="function">() =&gt;</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/posts&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>()) <span class="keyword">as</span> <span class="title class_">Promise</span>&lt;<span class="title class_">Post</span>[]&gt;,</span><br><span class="line">    <span class="attr">getComments</span>: <span class="function">(<span class="params"><span class="attr">postId</span>: <span class="built_in">number</span></span>) =&gt;</span> </span><br><span class="line">        <span class="title function_">fetch</span>(<span class="string">`/api/posts/<span class="subst">$&#123;postId&#125;</span>/comments`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>()) <span class="keyword">as</span> <span class="title class_">Promise</span>&lt;<span class="title class_">Comment</span>[]&gt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extract all endpoint return types</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ApiReturnTypes</span> = &#123;</span><br><span class="line">    [K <span class="keyword">in</span> keyof <span class="keyword">typeof</span> apiEndpoints]: <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> apiEndpoints[K]&gt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Result:</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   getUser: Promise&lt;User&gt;;</span></span><br><span class="line"><span class="comment">//   getPosts: Promise&lt;Post[]&gt;;</span></span><br><span class="line"><span class="comment">//   getComments: Promise&lt;Comment[]&gt;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h2 id="Best-Practices"><a href="#Best-Practices" class="headerlink" title="Best Practices"></a>Best Practices</h2><ol><li><strong>Use <code>typeof</code> for type inference</strong> when you want TypeScript to automatically determine types</li><li><strong>Combine with <code>ReturnType&lt;&gt;</code></strong> when you need only the return type of a function</li><li><strong>Prefer type inference over explicit typing</strong> - let TypeScript do the work</li><li><strong>Use in generic constraints</strong> to create flexible, type-safe APIs</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good: Let TypeScript infer the type</span></span><br><span class="line"><span class="keyword">const</span> config = &#123; <span class="attr">timeout</span>: <span class="number">5000</span>, <span class="attr">retries</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Config</span> = <span class="keyword">typeof</span> config;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Better: Use with generics for reusable patterns</span></span><br><span class="line"><span class="keyword">function</span> createApiClient&lt;T <span class="keyword">extends</span> <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="function">(<span class="params">...<span class="attr">args</span>: <span class="built_in">any</span>[]</span>) =&gt;</span> <span class="built_in">any</span>&gt;&gt;(</span><br><span class="line">    <span class="attr">endpoints</span>: T</span><br><span class="line">): &#123; [K <span class="keyword">in</span> keyof T]: <span class="title class_">ReturnType</span>&lt;T[K]&gt; &#125; &#123;</span><br><span class="line">    <span class="comment">// Implementation here</span></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125; <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Understanding <code>typeof</code> and <code>ReturnType</code> is crucial for writing type-safe TypeScript code. Unlike Java’s runtime reflection, these are compile-time tools that provide zero-cost type safety. They enable powerful patterns like type inference, generic constraints, and module augmentation while maintaining excellent developer experience.</p><p>For Java developers, think of <code>typeof</code> as compile-time reflection that captures type information without runtime overhead, and <code>ReturnType&lt;T&gt;</code> as a way to extract just the “output type” from a method signature.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;As developers coming from Java backgrounds often struggle with TypeScript’s type system nuances, understanding &lt;code&gt;typeof&lt;/code&gt; and &lt;c</summary>
      
    
    
    
    <category term="Programming" scheme="https://blog.baduncle.top/categories/Programming/"/>
    
    
    <category term="typescript" scheme="https://blog.baduncle.top/tags/typescript/"/>
    
    <category term="javascript" scheme="https://blog.baduncle.top/tags/javascript/"/>
    
    <category term="java" scheme="https://blog.baduncle.top/tags/java/"/>
    
    <category term="programming" scheme="https://blog.baduncle.top/tags/programming/"/>
    
  </entry>
  
</feed>
